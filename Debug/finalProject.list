
finalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b58  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 mysection     00000020  08005c18  08005c18  00006c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000f0  08005c38  08005c38  00006c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08005d28  08005d28  0000701c  2**0
                  CONTENTS
  5 .ARM          00000000  08005d28  08005d28  0000701c  2**0
                  CONTENTS
  6 .preinit_array 00000000  08005d28  08005d28  0000701c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08005d28  08005d28  00006d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  08005d2c  08005d2c  00006d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         0000001c  20000000  08005d30  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001980  2000001c  08005d4c  0000701c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000199c  08005d4c  0000799c  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  0000701c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009a54  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b0d  00000000  00000000  00010a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a50  00000000  00000000  000125a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007be  00000000  00000000  00012ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001a9a  00000000  00000000  000137b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a7eb  00000000  00000000  00015250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a365d  00000000  00000000  0001fa3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000c3098  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002624  00000000  00000000  000c30dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  000c5700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000001c 	.word	0x2000001c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005c00 	.word	0x08005c00

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000020 	.word	0x20000020
 8000104:	08005c00 	.word	0x08005c00

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	0010      	movs	r0, r2
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	0019      	movs	r1, r3
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f000 ff69 	bl	80012dc <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 fea9 	bl	800116c <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f000 ff5b 	bl	80012dc <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 ff51 	bl	80012dc <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			@ (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 fed3 	bl	80011f4 <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			@ (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 fec9 	bl	80011f4 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			@ (mov r8, r8)

08000470 <__aeabi_dadd>:
 8000470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000472:	4657      	mov	r7, sl
 8000474:	464e      	mov	r6, r9
 8000476:	4645      	mov	r5, r8
 8000478:	46de      	mov	lr, fp
 800047a:	b5e0      	push	{r5, r6, r7, lr}
 800047c:	b083      	sub	sp, #12
 800047e:	9000      	str	r0, [sp, #0]
 8000480:	9101      	str	r1, [sp, #4]
 8000482:	030c      	lsls	r4, r1, #12
 8000484:	004f      	lsls	r7, r1, #1
 8000486:	0fce      	lsrs	r6, r1, #31
 8000488:	0a61      	lsrs	r1, r4, #9
 800048a:	9c00      	ldr	r4, [sp, #0]
 800048c:	031d      	lsls	r5, r3, #12
 800048e:	0f64      	lsrs	r4, r4, #29
 8000490:	430c      	orrs	r4, r1
 8000492:	9900      	ldr	r1, [sp, #0]
 8000494:	9200      	str	r2, [sp, #0]
 8000496:	9301      	str	r3, [sp, #4]
 8000498:	00c8      	lsls	r0, r1, #3
 800049a:	0059      	lsls	r1, r3, #1
 800049c:	0d4b      	lsrs	r3, r1, #21
 800049e:	4699      	mov	r9, r3
 80004a0:	9a00      	ldr	r2, [sp, #0]
 80004a2:	9b01      	ldr	r3, [sp, #4]
 80004a4:	0a6d      	lsrs	r5, r5, #9
 80004a6:	0fd9      	lsrs	r1, r3, #31
 80004a8:	0f53      	lsrs	r3, r2, #29
 80004aa:	432b      	orrs	r3, r5
 80004ac:	469a      	mov	sl, r3
 80004ae:	9b00      	ldr	r3, [sp, #0]
 80004b0:	0d7f      	lsrs	r7, r7, #21
 80004b2:	00da      	lsls	r2, r3, #3
 80004b4:	4694      	mov	ip, r2
 80004b6:	464a      	mov	r2, r9
 80004b8:	46b0      	mov	r8, r6
 80004ba:	1aba      	subs	r2, r7, r2
 80004bc:	428e      	cmp	r6, r1
 80004be:	d100      	bne.n	80004c2 <__aeabi_dadd+0x52>
 80004c0:	e0b0      	b.n	8000624 <__aeabi_dadd+0x1b4>
 80004c2:	2a00      	cmp	r2, #0
 80004c4:	dc00      	bgt.n	80004c8 <__aeabi_dadd+0x58>
 80004c6:	e078      	b.n	80005ba <__aeabi_dadd+0x14a>
 80004c8:	4649      	mov	r1, r9
 80004ca:	2900      	cmp	r1, #0
 80004cc:	d100      	bne.n	80004d0 <__aeabi_dadd+0x60>
 80004ce:	e0e9      	b.n	80006a4 <__aeabi_dadd+0x234>
 80004d0:	49c9      	ldr	r1, [pc, #804]	@ (80007f8 <__aeabi_dadd+0x388>)
 80004d2:	428f      	cmp	r7, r1
 80004d4:	d100      	bne.n	80004d8 <__aeabi_dadd+0x68>
 80004d6:	e195      	b.n	8000804 <__aeabi_dadd+0x394>
 80004d8:	2501      	movs	r5, #1
 80004da:	2a38      	cmp	r2, #56	@ 0x38
 80004dc:	dc16      	bgt.n	800050c <__aeabi_dadd+0x9c>
 80004de:	2180      	movs	r1, #128	@ 0x80
 80004e0:	4653      	mov	r3, sl
 80004e2:	0409      	lsls	r1, r1, #16
 80004e4:	430b      	orrs	r3, r1
 80004e6:	469a      	mov	sl, r3
 80004e8:	2a1f      	cmp	r2, #31
 80004ea:	dd00      	ble.n	80004ee <__aeabi_dadd+0x7e>
 80004ec:	e1e7      	b.n	80008be <__aeabi_dadd+0x44e>
 80004ee:	2120      	movs	r1, #32
 80004f0:	4655      	mov	r5, sl
 80004f2:	1a8b      	subs	r3, r1, r2
 80004f4:	4661      	mov	r1, ip
 80004f6:	409d      	lsls	r5, r3
 80004f8:	40d1      	lsrs	r1, r2
 80004fa:	430d      	orrs	r5, r1
 80004fc:	4661      	mov	r1, ip
 80004fe:	4099      	lsls	r1, r3
 8000500:	1e4b      	subs	r3, r1, #1
 8000502:	4199      	sbcs	r1, r3
 8000504:	4653      	mov	r3, sl
 8000506:	40d3      	lsrs	r3, r2
 8000508:	430d      	orrs	r5, r1
 800050a:	1ae4      	subs	r4, r4, r3
 800050c:	1b45      	subs	r5, r0, r5
 800050e:	42a8      	cmp	r0, r5
 8000510:	4180      	sbcs	r0, r0
 8000512:	4240      	negs	r0, r0
 8000514:	1a24      	subs	r4, r4, r0
 8000516:	0223      	lsls	r3, r4, #8
 8000518:	d400      	bmi.n	800051c <__aeabi_dadd+0xac>
 800051a:	e10f      	b.n	800073c <__aeabi_dadd+0x2cc>
 800051c:	0264      	lsls	r4, r4, #9
 800051e:	0a64      	lsrs	r4, r4, #9
 8000520:	2c00      	cmp	r4, #0
 8000522:	d100      	bne.n	8000526 <__aeabi_dadd+0xb6>
 8000524:	e139      	b.n	800079a <__aeabi_dadd+0x32a>
 8000526:	0020      	movs	r0, r4
 8000528:	f001 fe3c 	bl	80021a4 <__clzsi2>
 800052c:	0003      	movs	r3, r0
 800052e:	3b08      	subs	r3, #8
 8000530:	2120      	movs	r1, #32
 8000532:	0028      	movs	r0, r5
 8000534:	1aca      	subs	r2, r1, r3
 8000536:	40d0      	lsrs	r0, r2
 8000538:	409c      	lsls	r4, r3
 800053a:	0002      	movs	r2, r0
 800053c:	409d      	lsls	r5, r3
 800053e:	4322      	orrs	r2, r4
 8000540:	429f      	cmp	r7, r3
 8000542:	dd00      	ble.n	8000546 <__aeabi_dadd+0xd6>
 8000544:	e173      	b.n	800082e <__aeabi_dadd+0x3be>
 8000546:	1bd8      	subs	r0, r3, r7
 8000548:	3001      	adds	r0, #1
 800054a:	1a09      	subs	r1, r1, r0
 800054c:	002c      	movs	r4, r5
 800054e:	408d      	lsls	r5, r1
 8000550:	40c4      	lsrs	r4, r0
 8000552:	1e6b      	subs	r3, r5, #1
 8000554:	419d      	sbcs	r5, r3
 8000556:	0013      	movs	r3, r2
 8000558:	40c2      	lsrs	r2, r0
 800055a:	408b      	lsls	r3, r1
 800055c:	4325      	orrs	r5, r4
 800055e:	2700      	movs	r7, #0
 8000560:	0014      	movs	r4, r2
 8000562:	431d      	orrs	r5, r3
 8000564:	076b      	lsls	r3, r5, #29
 8000566:	d009      	beq.n	800057c <__aeabi_dadd+0x10c>
 8000568:	230f      	movs	r3, #15
 800056a:	402b      	ands	r3, r5
 800056c:	2b04      	cmp	r3, #4
 800056e:	d005      	beq.n	800057c <__aeabi_dadd+0x10c>
 8000570:	1d2b      	adds	r3, r5, #4
 8000572:	42ab      	cmp	r3, r5
 8000574:	41ad      	sbcs	r5, r5
 8000576:	426d      	negs	r5, r5
 8000578:	1964      	adds	r4, r4, r5
 800057a:	001d      	movs	r5, r3
 800057c:	0223      	lsls	r3, r4, #8
 800057e:	d400      	bmi.n	8000582 <__aeabi_dadd+0x112>
 8000580:	e12d      	b.n	80007de <__aeabi_dadd+0x36e>
 8000582:	4a9d      	ldr	r2, [pc, #628]	@ (80007f8 <__aeabi_dadd+0x388>)
 8000584:	3701      	adds	r7, #1
 8000586:	4297      	cmp	r7, r2
 8000588:	d100      	bne.n	800058c <__aeabi_dadd+0x11c>
 800058a:	e0d3      	b.n	8000734 <__aeabi_dadd+0x2c4>
 800058c:	4646      	mov	r6, r8
 800058e:	499b      	ldr	r1, [pc, #620]	@ (80007fc <__aeabi_dadd+0x38c>)
 8000590:	08ed      	lsrs	r5, r5, #3
 8000592:	4021      	ands	r1, r4
 8000594:	074a      	lsls	r2, r1, #29
 8000596:	432a      	orrs	r2, r5
 8000598:	057c      	lsls	r4, r7, #21
 800059a:	024d      	lsls	r5, r1, #9
 800059c:	0b2d      	lsrs	r5, r5, #12
 800059e:	0d64      	lsrs	r4, r4, #21
 80005a0:	0524      	lsls	r4, r4, #20
 80005a2:	432c      	orrs	r4, r5
 80005a4:	07f6      	lsls	r6, r6, #31
 80005a6:	4334      	orrs	r4, r6
 80005a8:	0010      	movs	r0, r2
 80005aa:	0021      	movs	r1, r4
 80005ac:	b003      	add	sp, #12
 80005ae:	bcf0      	pop	{r4, r5, r6, r7}
 80005b0:	46bb      	mov	fp, r7
 80005b2:	46b2      	mov	sl, r6
 80005b4:	46a9      	mov	r9, r5
 80005b6:	46a0      	mov	r8, r4
 80005b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ba:	2a00      	cmp	r2, #0
 80005bc:	d100      	bne.n	80005c0 <__aeabi_dadd+0x150>
 80005be:	e084      	b.n	80006ca <__aeabi_dadd+0x25a>
 80005c0:	464a      	mov	r2, r9
 80005c2:	1bd2      	subs	r2, r2, r7
 80005c4:	2f00      	cmp	r7, #0
 80005c6:	d000      	beq.n	80005ca <__aeabi_dadd+0x15a>
 80005c8:	e16d      	b.n	80008a6 <__aeabi_dadd+0x436>
 80005ca:	0025      	movs	r5, r4
 80005cc:	4305      	orrs	r5, r0
 80005ce:	d100      	bne.n	80005d2 <__aeabi_dadd+0x162>
 80005d0:	e127      	b.n	8000822 <__aeabi_dadd+0x3b2>
 80005d2:	1e56      	subs	r6, r2, #1
 80005d4:	2a01      	cmp	r2, #1
 80005d6:	d100      	bne.n	80005da <__aeabi_dadd+0x16a>
 80005d8:	e23b      	b.n	8000a52 <__aeabi_dadd+0x5e2>
 80005da:	4d87      	ldr	r5, [pc, #540]	@ (80007f8 <__aeabi_dadd+0x388>)
 80005dc:	42aa      	cmp	r2, r5
 80005de:	d100      	bne.n	80005e2 <__aeabi_dadd+0x172>
 80005e0:	e26a      	b.n	8000ab8 <__aeabi_dadd+0x648>
 80005e2:	2501      	movs	r5, #1
 80005e4:	2e38      	cmp	r6, #56	@ 0x38
 80005e6:	dc12      	bgt.n	800060e <__aeabi_dadd+0x19e>
 80005e8:	0032      	movs	r2, r6
 80005ea:	2a1f      	cmp	r2, #31
 80005ec:	dd00      	ble.n	80005f0 <__aeabi_dadd+0x180>
 80005ee:	e1f8      	b.n	80009e2 <__aeabi_dadd+0x572>
 80005f0:	2620      	movs	r6, #32
 80005f2:	0025      	movs	r5, r4
 80005f4:	1ab6      	subs	r6, r6, r2
 80005f6:	0007      	movs	r7, r0
 80005f8:	4653      	mov	r3, sl
 80005fa:	40b0      	lsls	r0, r6
 80005fc:	40d4      	lsrs	r4, r2
 80005fe:	40b5      	lsls	r5, r6
 8000600:	40d7      	lsrs	r7, r2
 8000602:	1e46      	subs	r6, r0, #1
 8000604:	41b0      	sbcs	r0, r6
 8000606:	1b1b      	subs	r3, r3, r4
 8000608:	469a      	mov	sl, r3
 800060a:	433d      	orrs	r5, r7
 800060c:	4305      	orrs	r5, r0
 800060e:	4662      	mov	r2, ip
 8000610:	1b55      	subs	r5, r2, r5
 8000612:	45ac      	cmp	ip, r5
 8000614:	4192      	sbcs	r2, r2
 8000616:	4653      	mov	r3, sl
 8000618:	4252      	negs	r2, r2
 800061a:	000e      	movs	r6, r1
 800061c:	464f      	mov	r7, r9
 800061e:	4688      	mov	r8, r1
 8000620:	1a9c      	subs	r4, r3, r2
 8000622:	e778      	b.n	8000516 <__aeabi_dadd+0xa6>
 8000624:	2a00      	cmp	r2, #0
 8000626:	dc00      	bgt.n	800062a <__aeabi_dadd+0x1ba>
 8000628:	e08e      	b.n	8000748 <__aeabi_dadd+0x2d8>
 800062a:	4649      	mov	r1, r9
 800062c:	2900      	cmp	r1, #0
 800062e:	d175      	bne.n	800071c <__aeabi_dadd+0x2ac>
 8000630:	4661      	mov	r1, ip
 8000632:	4653      	mov	r3, sl
 8000634:	4319      	orrs	r1, r3
 8000636:	d100      	bne.n	800063a <__aeabi_dadd+0x1ca>
 8000638:	e0f6      	b.n	8000828 <__aeabi_dadd+0x3b8>
 800063a:	1e51      	subs	r1, r2, #1
 800063c:	2a01      	cmp	r2, #1
 800063e:	d100      	bne.n	8000642 <__aeabi_dadd+0x1d2>
 8000640:	e191      	b.n	8000966 <__aeabi_dadd+0x4f6>
 8000642:	4d6d      	ldr	r5, [pc, #436]	@ (80007f8 <__aeabi_dadd+0x388>)
 8000644:	42aa      	cmp	r2, r5
 8000646:	d100      	bne.n	800064a <__aeabi_dadd+0x1da>
 8000648:	e0dc      	b.n	8000804 <__aeabi_dadd+0x394>
 800064a:	2501      	movs	r5, #1
 800064c:	2938      	cmp	r1, #56	@ 0x38
 800064e:	dc14      	bgt.n	800067a <__aeabi_dadd+0x20a>
 8000650:	000a      	movs	r2, r1
 8000652:	2a1f      	cmp	r2, #31
 8000654:	dd00      	ble.n	8000658 <__aeabi_dadd+0x1e8>
 8000656:	e1a2      	b.n	800099e <__aeabi_dadd+0x52e>
 8000658:	2120      	movs	r1, #32
 800065a:	4653      	mov	r3, sl
 800065c:	1a89      	subs	r1, r1, r2
 800065e:	408b      	lsls	r3, r1
 8000660:	001d      	movs	r5, r3
 8000662:	4663      	mov	r3, ip
 8000664:	40d3      	lsrs	r3, r2
 8000666:	431d      	orrs	r5, r3
 8000668:	4663      	mov	r3, ip
 800066a:	408b      	lsls	r3, r1
 800066c:	0019      	movs	r1, r3
 800066e:	1e4b      	subs	r3, r1, #1
 8000670:	4199      	sbcs	r1, r3
 8000672:	4653      	mov	r3, sl
 8000674:	40d3      	lsrs	r3, r2
 8000676:	430d      	orrs	r5, r1
 8000678:	18e4      	adds	r4, r4, r3
 800067a:	182d      	adds	r5, r5, r0
 800067c:	4285      	cmp	r5, r0
 800067e:	4180      	sbcs	r0, r0
 8000680:	4240      	negs	r0, r0
 8000682:	1824      	adds	r4, r4, r0
 8000684:	0223      	lsls	r3, r4, #8
 8000686:	d559      	bpl.n	800073c <__aeabi_dadd+0x2cc>
 8000688:	4b5b      	ldr	r3, [pc, #364]	@ (80007f8 <__aeabi_dadd+0x388>)
 800068a:	3701      	adds	r7, #1
 800068c:	429f      	cmp	r7, r3
 800068e:	d051      	beq.n	8000734 <__aeabi_dadd+0x2c4>
 8000690:	2101      	movs	r1, #1
 8000692:	4b5a      	ldr	r3, [pc, #360]	@ (80007fc <__aeabi_dadd+0x38c>)
 8000694:	086a      	lsrs	r2, r5, #1
 8000696:	401c      	ands	r4, r3
 8000698:	4029      	ands	r1, r5
 800069a:	430a      	orrs	r2, r1
 800069c:	07e5      	lsls	r5, r4, #31
 800069e:	4315      	orrs	r5, r2
 80006a0:	0864      	lsrs	r4, r4, #1
 80006a2:	e75f      	b.n	8000564 <__aeabi_dadd+0xf4>
 80006a4:	4661      	mov	r1, ip
 80006a6:	4653      	mov	r3, sl
 80006a8:	4319      	orrs	r1, r3
 80006aa:	d100      	bne.n	80006ae <__aeabi_dadd+0x23e>
 80006ac:	e0bc      	b.n	8000828 <__aeabi_dadd+0x3b8>
 80006ae:	1e51      	subs	r1, r2, #1
 80006b0:	2a01      	cmp	r2, #1
 80006b2:	d100      	bne.n	80006b6 <__aeabi_dadd+0x246>
 80006b4:	e164      	b.n	8000980 <__aeabi_dadd+0x510>
 80006b6:	4d50      	ldr	r5, [pc, #320]	@ (80007f8 <__aeabi_dadd+0x388>)
 80006b8:	42aa      	cmp	r2, r5
 80006ba:	d100      	bne.n	80006be <__aeabi_dadd+0x24e>
 80006bc:	e16a      	b.n	8000994 <__aeabi_dadd+0x524>
 80006be:	2501      	movs	r5, #1
 80006c0:	2938      	cmp	r1, #56	@ 0x38
 80006c2:	dd00      	ble.n	80006c6 <__aeabi_dadd+0x256>
 80006c4:	e722      	b.n	800050c <__aeabi_dadd+0x9c>
 80006c6:	000a      	movs	r2, r1
 80006c8:	e70e      	b.n	80004e8 <__aeabi_dadd+0x78>
 80006ca:	4a4d      	ldr	r2, [pc, #308]	@ (8000800 <__aeabi_dadd+0x390>)
 80006cc:	1c7d      	adds	r5, r7, #1
 80006ce:	4215      	tst	r5, r2
 80006d0:	d000      	beq.n	80006d4 <__aeabi_dadd+0x264>
 80006d2:	e0d0      	b.n	8000876 <__aeabi_dadd+0x406>
 80006d4:	0025      	movs	r5, r4
 80006d6:	4662      	mov	r2, ip
 80006d8:	4653      	mov	r3, sl
 80006da:	4305      	orrs	r5, r0
 80006dc:	431a      	orrs	r2, r3
 80006de:	2f00      	cmp	r7, #0
 80006e0:	d000      	beq.n	80006e4 <__aeabi_dadd+0x274>
 80006e2:	e137      	b.n	8000954 <__aeabi_dadd+0x4e4>
 80006e4:	2d00      	cmp	r5, #0
 80006e6:	d100      	bne.n	80006ea <__aeabi_dadd+0x27a>
 80006e8:	e1a8      	b.n	8000a3c <__aeabi_dadd+0x5cc>
 80006ea:	2a00      	cmp	r2, #0
 80006ec:	d100      	bne.n	80006f0 <__aeabi_dadd+0x280>
 80006ee:	e16a      	b.n	80009c6 <__aeabi_dadd+0x556>
 80006f0:	4663      	mov	r3, ip
 80006f2:	1ac5      	subs	r5, r0, r3
 80006f4:	4653      	mov	r3, sl
 80006f6:	1ae2      	subs	r2, r4, r3
 80006f8:	42a8      	cmp	r0, r5
 80006fa:	419b      	sbcs	r3, r3
 80006fc:	425b      	negs	r3, r3
 80006fe:	1ad3      	subs	r3, r2, r3
 8000700:	021a      	lsls	r2, r3, #8
 8000702:	d400      	bmi.n	8000706 <__aeabi_dadd+0x296>
 8000704:	e203      	b.n	8000b0e <__aeabi_dadd+0x69e>
 8000706:	4663      	mov	r3, ip
 8000708:	1a1d      	subs	r5, r3, r0
 800070a:	45ac      	cmp	ip, r5
 800070c:	4192      	sbcs	r2, r2
 800070e:	4653      	mov	r3, sl
 8000710:	4252      	negs	r2, r2
 8000712:	1b1c      	subs	r4, r3, r4
 8000714:	000e      	movs	r6, r1
 8000716:	4688      	mov	r8, r1
 8000718:	1aa4      	subs	r4, r4, r2
 800071a:	e723      	b.n	8000564 <__aeabi_dadd+0xf4>
 800071c:	4936      	ldr	r1, [pc, #216]	@ (80007f8 <__aeabi_dadd+0x388>)
 800071e:	428f      	cmp	r7, r1
 8000720:	d070      	beq.n	8000804 <__aeabi_dadd+0x394>
 8000722:	2501      	movs	r5, #1
 8000724:	2a38      	cmp	r2, #56	@ 0x38
 8000726:	dca8      	bgt.n	800067a <__aeabi_dadd+0x20a>
 8000728:	2180      	movs	r1, #128	@ 0x80
 800072a:	4653      	mov	r3, sl
 800072c:	0409      	lsls	r1, r1, #16
 800072e:	430b      	orrs	r3, r1
 8000730:	469a      	mov	sl, r3
 8000732:	e78e      	b.n	8000652 <__aeabi_dadd+0x1e2>
 8000734:	003c      	movs	r4, r7
 8000736:	2500      	movs	r5, #0
 8000738:	2200      	movs	r2, #0
 800073a:	e731      	b.n	80005a0 <__aeabi_dadd+0x130>
 800073c:	2307      	movs	r3, #7
 800073e:	402b      	ands	r3, r5
 8000740:	2b00      	cmp	r3, #0
 8000742:	d000      	beq.n	8000746 <__aeabi_dadd+0x2d6>
 8000744:	e710      	b.n	8000568 <__aeabi_dadd+0xf8>
 8000746:	e093      	b.n	8000870 <__aeabi_dadd+0x400>
 8000748:	2a00      	cmp	r2, #0
 800074a:	d074      	beq.n	8000836 <__aeabi_dadd+0x3c6>
 800074c:	464a      	mov	r2, r9
 800074e:	1bd2      	subs	r2, r2, r7
 8000750:	2f00      	cmp	r7, #0
 8000752:	d100      	bne.n	8000756 <__aeabi_dadd+0x2e6>
 8000754:	e0c7      	b.n	80008e6 <__aeabi_dadd+0x476>
 8000756:	4928      	ldr	r1, [pc, #160]	@ (80007f8 <__aeabi_dadd+0x388>)
 8000758:	4589      	cmp	r9, r1
 800075a:	d100      	bne.n	800075e <__aeabi_dadd+0x2ee>
 800075c:	e185      	b.n	8000a6a <__aeabi_dadd+0x5fa>
 800075e:	2501      	movs	r5, #1
 8000760:	2a38      	cmp	r2, #56	@ 0x38
 8000762:	dc12      	bgt.n	800078a <__aeabi_dadd+0x31a>
 8000764:	2180      	movs	r1, #128	@ 0x80
 8000766:	0409      	lsls	r1, r1, #16
 8000768:	430c      	orrs	r4, r1
 800076a:	2a1f      	cmp	r2, #31
 800076c:	dd00      	ble.n	8000770 <__aeabi_dadd+0x300>
 800076e:	e1ab      	b.n	8000ac8 <__aeabi_dadd+0x658>
 8000770:	2120      	movs	r1, #32
 8000772:	0025      	movs	r5, r4
 8000774:	1a89      	subs	r1, r1, r2
 8000776:	0007      	movs	r7, r0
 8000778:	4088      	lsls	r0, r1
 800077a:	408d      	lsls	r5, r1
 800077c:	40d7      	lsrs	r7, r2
 800077e:	1e41      	subs	r1, r0, #1
 8000780:	4188      	sbcs	r0, r1
 8000782:	40d4      	lsrs	r4, r2
 8000784:	433d      	orrs	r5, r7
 8000786:	4305      	orrs	r5, r0
 8000788:	44a2      	add	sl, r4
 800078a:	4465      	add	r5, ip
 800078c:	4565      	cmp	r5, ip
 800078e:	4192      	sbcs	r2, r2
 8000790:	4252      	negs	r2, r2
 8000792:	4452      	add	r2, sl
 8000794:	0014      	movs	r4, r2
 8000796:	464f      	mov	r7, r9
 8000798:	e774      	b.n	8000684 <__aeabi_dadd+0x214>
 800079a:	0028      	movs	r0, r5
 800079c:	f001 fd02 	bl	80021a4 <__clzsi2>
 80007a0:	0003      	movs	r3, r0
 80007a2:	3318      	adds	r3, #24
 80007a4:	2b1f      	cmp	r3, #31
 80007a6:	dc00      	bgt.n	80007aa <__aeabi_dadd+0x33a>
 80007a8:	e6c2      	b.n	8000530 <__aeabi_dadd+0xc0>
 80007aa:	002a      	movs	r2, r5
 80007ac:	3808      	subs	r0, #8
 80007ae:	4082      	lsls	r2, r0
 80007b0:	429f      	cmp	r7, r3
 80007b2:	dd00      	ble.n	80007b6 <__aeabi_dadd+0x346>
 80007b4:	e0a9      	b.n	800090a <__aeabi_dadd+0x49a>
 80007b6:	1bdb      	subs	r3, r3, r7
 80007b8:	1c58      	adds	r0, r3, #1
 80007ba:	281f      	cmp	r0, #31
 80007bc:	dc00      	bgt.n	80007c0 <__aeabi_dadd+0x350>
 80007be:	e1ac      	b.n	8000b1a <__aeabi_dadd+0x6aa>
 80007c0:	0015      	movs	r5, r2
 80007c2:	3b1f      	subs	r3, #31
 80007c4:	40dd      	lsrs	r5, r3
 80007c6:	2820      	cmp	r0, #32
 80007c8:	d005      	beq.n	80007d6 <__aeabi_dadd+0x366>
 80007ca:	2340      	movs	r3, #64	@ 0x40
 80007cc:	1a1b      	subs	r3, r3, r0
 80007ce:	409a      	lsls	r2, r3
 80007d0:	1e53      	subs	r3, r2, #1
 80007d2:	419a      	sbcs	r2, r3
 80007d4:	4315      	orrs	r5, r2
 80007d6:	2307      	movs	r3, #7
 80007d8:	2700      	movs	r7, #0
 80007da:	402b      	ands	r3, r5
 80007dc:	e7b0      	b.n	8000740 <__aeabi_dadd+0x2d0>
 80007de:	08ed      	lsrs	r5, r5, #3
 80007e0:	4b05      	ldr	r3, [pc, #20]	@ (80007f8 <__aeabi_dadd+0x388>)
 80007e2:	0762      	lsls	r2, r4, #29
 80007e4:	432a      	orrs	r2, r5
 80007e6:	08e4      	lsrs	r4, r4, #3
 80007e8:	429f      	cmp	r7, r3
 80007ea:	d00f      	beq.n	800080c <__aeabi_dadd+0x39c>
 80007ec:	0324      	lsls	r4, r4, #12
 80007ee:	0b25      	lsrs	r5, r4, #12
 80007f0:	057c      	lsls	r4, r7, #21
 80007f2:	0d64      	lsrs	r4, r4, #21
 80007f4:	e6d4      	b.n	80005a0 <__aeabi_dadd+0x130>
 80007f6:	46c0      	nop			@ (mov r8, r8)
 80007f8:	000007ff 	.word	0x000007ff
 80007fc:	ff7fffff 	.word	0xff7fffff
 8000800:	000007fe 	.word	0x000007fe
 8000804:	08c0      	lsrs	r0, r0, #3
 8000806:	0762      	lsls	r2, r4, #29
 8000808:	4302      	orrs	r2, r0
 800080a:	08e4      	lsrs	r4, r4, #3
 800080c:	0013      	movs	r3, r2
 800080e:	4323      	orrs	r3, r4
 8000810:	d100      	bne.n	8000814 <__aeabi_dadd+0x3a4>
 8000812:	e186      	b.n	8000b22 <__aeabi_dadd+0x6b2>
 8000814:	2580      	movs	r5, #128	@ 0x80
 8000816:	032d      	lsls	r5, r5, #12
 8000818:	4325      	orrs	r5, r4
 800081a:	032d      	lsls	r5, r5, #12
 800081c:	4cc3      	ldr	r4, [pc, #780]	@ (8000b2c <__aeabi_dadd+0x6bc>)
 800081e:	0b2d      	lsrs	r5, r5, #12
 8000820:	e6be      	b.n	80005a0 <__aeabi_dadd+0x130>
 8000822:	4660      	mov	r0, ip
 8000824:	4654      	mov	r4, sl
 8000826:	000e      	movs	r6, r1
 8000828:	0017      	movs	r7, r2
 800082a:	08c5      	lsrs	r5, r0, #3
 800082c:	e7d8      	b.n	80007e0 <__aeabi_dadd+0x370>
 800082e:	4cc0      	ldr	r4, [pc, #768]	@ (8000b30 <__aeabi_dadd+0x6c0>)
 8000830:	1aff      	subs	r7, r7, r3
 8000832:	4014      	ands	r4, r2
 8000834:	e696      	b.n	8000564 <__aeabi_dadd+0xf4>
 8000836:	4abf      	ldr	r2, [pc, #764]	@ (8000b34 <__aeabi_dadd+0x6c4>)
 8000838:	1c79      	adds	r1, r7, #1
 800083a:	4211      	tst	r1, r2
 800083c:	d16b      	bne.n	8000916 <__aeabi_dadd+0x4a6>
 800083e:	0022      	movs	r2, r4
 8000840:	4302      	orrs	r2, r0
 8000842:	2f00      	cmp	r7, #0
 8000844:	d000      	beq.n	8000848 <__aeabi_dadd+0x3d8>
 8000846:	e0db      	b.n	8000a00 <__aeabi_dadd+0x590>
 8000848:	2a00      	cmp	r2, #0
 800084a:	d100      	bne.n	800084e <__aeabi_dadd+0x3de>
 800084c:	e12d      	b.n	8000aaa <__aeabi_dadd+0x63a>
 800084e:	4662      	mov	r2, ip
 8000850:	4653      	mov	r3, sl
 8000852:	431a      	orrs	r2, r3
 8000854:	d100      	bne.n	8000858 <__aeabi_dadd+0x3e8>
 8000856:	e0b6      	b.n	80009c6 <__aeabi_dadd+0x556>
 8000858:	4663      	mov	r3, ip
 800085a:	18c5      	adds	r5, r0, r3
 800085c:	4285      	cmp	r5, r0
 800085e:	4180      	sbcs	r0, r0
 8000860:	4454      	add	r4, sl
 8000862:	4240      	negs	r0, r0
 8000864:	1824      	adds	r4, r4, r0
 8000866:	0223      	lsls	r3, r4, #8
 8000868:	d502      	bpl.n	8000870 <__aeabi_dadd+0x400>
 800086a:	000f      	movs	r7, r1
 800086c:	4bb0      	ldr	r3, [pc, #704]	@ (8000b30 <__aeabi_dadd+0x6c0>)
 800086e:	401c      	ands	r4, r3
 8000870:	003a      	movs	r2, r7
 8000872:	0028      	movs	r0, r5
 8000874:	e7d8      	b.n	8000828 <__aeabi_dadd+0x3b8>
 8000876:	4662      	mov	r2, ip
 8000878:	1a85      	subs	r5, r0, r2
 800087a:	42a8      	cmp	r0, r5
 800087c:	4192      	sbcs	r2, r2
 800087e:	4653      	mov	r3, sl
 8000880:	4252      	negs	r2, r2
 8000882:	4691      	mov	r9, r2
 8000884:	1ae3      	subs	r3, r4, r3
 8000886:	001a      	movs	r2, r3
 8000888:	464b      	mov	r3, r9
 800088a:	1ad2      	subs	r2, r2, r3
 800088c:	0013      	movs	r3, r2
 800088e:	4691      	mov	r9, r2
 8000890:	021a      	lsls	r2, r3, #8
 8000892:	d454      	bmi.n	800093e <__aeabi_dadd+0x4ce>
 8000894:	464a      	mov	r2, r9
 8000896:	464c      	mov	r4, r9
 8000898:	432a      	orrs	r2, r5
 800089a:	d000      	beq.n	800089e <__aeabi_dadd+0x42e>
 800089c:	e640      	b.n	8000520 <__aeabi_dadd+0xb0>
 800089e:	2600      	movs	r6, #0
 80008a0:	2400      	movs	r4, #0
 80008a2:	2500      	movs	r5, #0
 80008a4:	e67c      	b.n	80005a0 <__aeabi_dadd+0x130>
 80008a6:	4da1      	ldr	r5, [pc, #644]	@ (8000b2c <__aeabi_dadd+0x6bc>)
 80008a8:	45a9      	cmp	r9, r5
 80008aa:	d100      	bne.n	80008ae <__aeabi_dadd+0x43e>
 80008ac:	e090      	b.n	80009d0 <__aeabi_dadd+0x560>
 80008ae:	2501      	movs	r5, #1
 80008b0:	2a38      	cmp	r2, #56	@ 0x38
 80008b2:	dd00      	ble.n	80008b6 <__aeabi_dadd+0x446>
 80008b4:	e6ab      	b.n	800060e <__aeabi_dadd+0x19e>
 80008b6:	2580      	movs	r5, #128	@ 0x80
 80008b8:	042d      	lsls	r5, r5, #16
 80008ba:	432c      	orrs	r4, r5
 80008bc:	e695      	b.n	80005ea <__aeabi_dadd+0x17a>
 80008be:	0011      	movs	r1, r2
 80008c0:	4655      	mov	r5, sl
 80008c2:	3920      	subs	r1, #32
 80008c4:	40cd      	lsrs	r5, r1
 80008c6:	46a9      	mov	r9, r5
 80008c8:	2a20      	cmp	r2, #32
 80008ca:	d006      	beq.n	80008da <__aeabi_dadd+0x46a>
 80008cc:	2140      	movs	r1, #64	@ 0x40
 80008ce:	4653      	mov	r3, sl
 80008d0:	1a8a      	subs	r2, r1, r2
 80008d2:	4093      	lsls	r3, r2
 80008d4:	4662      	mov	r2, ip
 80008d6:	431a      	orrs	r2, r3
 80008d8:	4694      	mov	ip, r2
 80008da:	4665      	mov	r5, ip
 80008dc:	1e6b      	subs	r3, r5, #1
 80008de:	419d      	sbcs	r5, r3
 80008e0:	464b      	mov	r3, r9
 80008e2:	431d      	orrs	r5, r3
 80008e4:	e612      	b.n	800050c <__aeabi_dadd+0x9c>
 80008e6:	0021      	movs	r1, r4
 80008e8:	4301      	orrs	r1, r0
 80008ea:	d100      	bne.n	80008ee <__aeabi_dadd+0x47e>
 80008ec:	e0c4      	b.n	8000a78 <__aeabi_dadd+0x608>
 80008ee:	1e51      	subs	r1, r2, #1
 80008f0:	2a01      	cmp	r2, #1
 80008f2:	d100      	bne.n	80008f6 <__aeabi_dadd+0x486>
 80008f4:	e0fb      	b.n	8000aee <__aeabi_dadd+0x67e>
 80008f6:	4d8d      	ldr	r5, [pc, #564]	@ (8000b2c <__aeabi_dadd+0x6bc>)
 80008f8:	42aa      	cmp	r2, r5
 80008fa:	d100      	bne.n	80008fe <__aeabi_dadd+0x48e>
 80008fc:	e0b5      	b.n	8000a6a <__aeabi_dadd+0x5fa>
 80008fe:	2501      	movs	r5, #1
 8000900:	2938      	cmp	r1, #56	@ 0x38
 8000902:	dd00      	ble.n	8000906 <__aeabi_dadd+0x496>
 8000904:	e741      	b.n	800078a <__aeabi_dadd+0x31a>
 8000906:	000a      	movs	r2, r1
 8000908:	e72f      	b.n	800076a <__aeabi_dadd+0x2fa>
 800090a:	4c89      	ldr	r4, [pc, #548]	@ (8000b30 <__aeabi_dadd+0x6c0>)
 800090c:	1aff      	subs	r7, r7, r3
 800090e:	4014      	ands	r4, r2
 8000910:	0762      	lsls	r2, r4, #29
 8000912:	08e4      	lsrs	r4, r4, #3
 8000914:	e76a      	b.n	80007ec <__aeabi_dadd+0x37c>
 8000916:	4a85      	ldr	r2, [pc, #532]	@ (8000b2c <__aeabi_dadd+0x6bc>)
 8000918:	4291      	cmp	r1, r2
 800091a:	d100      	bne.n	800091e <__aeabi_dadd+0x4ae>
 800091c:	e0e3      	b.n	8000ae6 <__aeabi_dadd+0x676>
 800091e:	4663      	mov	r3, ip
 8000920:	18c2      	adds	r2, r0, r3
 8000922:	4282      	cmp	r2, r0
 8000924:	4180      	sbcs	r0, r0
 8000926:	0023      	movs	r3, r4
 8000928:	4240      	negs	r0, r0
 800092a:	4453      	add	r3, sl
 800092c:	181b      	adds	r3, r3, r0
 800092e:	07dd      	lsls	r5, r3, #31
 8000930:	085c      	lsrs	r4, r3, #1
 8000932:	2307      	movs	r3, #7
 8000934:	0852      	lsrs	r2, r2, #1
 8000936:	4315      	orrs	r5, r2
 8000938:	000f      	movs	r7, r1
 800093a:	402b      	ands	r3, r5
 800093c:	e700      	b.n	8000740 <__aeabi_dadd+0x2d0>
 800093e:	4663      	mov	r3, ip
 8000940:	1a1d      	subs	r5, r3, r0
 8000942:	45ac      	cmp	ip, r5
 8000944:	4192      	sbcs	r2, r2
 8000946:	4653      	mov	r3, sl
 8000948:	4252      	negs	r2, r2
 800094a:	1b1c      	subs	r4, r3, r4
 800094c:	000e      	movs	r6, r1
 800094e:	4688      	mov	r8, r1
 8000950:	1aa4      	subs	r4, r4, r2
 8000952:	e5e5      	b.n	8000520 <__aeabi_dadd+0xb0>
 8000954:	2d00      	cmp	r5, #0
 8000956:	d000      	beq.n	800095a <__aeabi_dadd+0x4ea>
 8000958:	e091      	b.n	8000a7e <__aeabi_dadd+0x60e>
 800095a:	2a00      	cmp	r2, #0
 800095c:	d138      	bne.n	80009d0 <__aeabi_dadd+0x560>
 800095e:	2480      	movs	r4, #128	@ 0x80
 8000960:	2600      	movs	r6, #0
 8000962:	0324      	lsls	r4, r4, #12
 8000964:	e756      	b.n	8000814 <__aeabi_dadd+0x3a4>
 8000966:	4663      	mov	r3, ip
 8000968:	18c5      	adds	r5, r0, r3
 800096a:	4285      	cmp	r5, r0
 800096c:	4180      	sbcs	r0, r0
 800096e:	4454      	add	r4, sl
 8000970:	4240      	negs	r0, r0
 8000972:	1824      	adds	r4, r4, r0
 8000974:	2701      	movs	r7, #1
 8000976:	0223      	lsls	r3, r4, #8
 8000978:	d400      	bmi.n	800097c <__aeabi_dadd+0x50c>
 800097a:	e6df      	b.n	800073c <__aeabi_dadd+0x2cc>
 800097c:	2702      	movs	r7, #2
 800097e:	e687      	b.n	8000690 <__aeabi_dadd+0x220>
 8000980:	4663      	mov	r3, ip
 8000982:	1ac5      	subs	r5, r0, r3
 8000984:	42a8      	cmp	r0, r5
 8000986:	4180      	sbcs	r0, r0
 8000988:	4653      	mov	r3, sl
 800098a:	4240      	negs	r0, r0
 800098c:	1ae4      	subs	r4, r4, r3
 800098e:	2701      	movs	r7, #1
 8000990:	1a24      	subs	r4, r4, r0
 8000992:	e5c0      	b.n	8000516 <__aeabi_dadd+0xa6>
 8000994:	0762      	lsls	r2, r4, #29
 8000996:	08c0      	lsrs	r0, r0, #3
 8000998:	4302      	orrs	r2, r0
 800099a:	08e4      	lsrs	r4, r4, #3
 800099c:	e736      	b.n	800080c <__aeabi_dadd+0x39c>
 800099e:	0011      	movs	r1, r2
 80009a0:	4653      	mov	r3, sl
 80009a2:	3920      	subs	r1, #32
 80009a4:	40cb      	lsrs	r3, r1
 80009a6:	4699      	mov	r9, r3
 80009a8:	2a20      	cmp	r2, #32
 80009aa:	d006      	beq.n	80009ba <__aeabi_dadd+0x54a>
 80009ac:	2140      	movs	r1, #64	@ 0x40
 80009ae:	4653      	mov	r3, sl
 80009b0:	1a8a      	subs	r2, r1, r2
 80009b2:	4093      	lsls	r3, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	431a      	orrs	r2, r3
 80009b8:	4694      	mov	ip, r2
 80009ba:	4665      	mov	r5, ip
 80009bc:	1e6b      	subs	r3, r5, #1
 80009be:	419d      	sbcs	r5, r3
 80009c0:	464b      	mov	r3, r9
 80009c2:	431d      	orrs	r5, r3
 80009c4:	e659      	b.n	800067a <__aeabi_dadd+0x20a>
 80009c6:	0762      	lsls	r2, r4, #29
 80009c8:	08c0      	lsrs	r0, r0, #3
 80009ca:	4302      	orrs	r2, r0
 80009cc:	08e4      	lsrs	r4, r4, #3
 80009ce:	e70d      	b.n	80007ec <__aeabi_dadd+0x37c>
 80009d0:	4653      	mov	r3, sl
 80009d2:	075a      	lsls	r2, r3, #29
 80009d4:	4663      	mov	r3, ip
 80009d6:	08d8      	lsrs	r0, r3, #3
 80009d8:	4653      	mov	r3, sl
 80009da:	000e      	movs	r6, r1
 80009dc:	4302      	orrs	r2, r0
 80009de:	08dc      	lsrs	r4, r3, #3
 80009e0:	e714      	b.n	800080c <__aeabi_dadd+0x39c>
 80009e2:	0015      	movs	r5, r2
 80009e4:	0026      	movs	r6, r4
 80009e6:	3d20      	subs	r5, #32
 80009e8:	40ee      	lsrs	r6, r5
 80009ea:	2a20      	cmp	r2, #32
 80009ec:	d003      	beq.n	80009f6 <__aeabi_dadd+0x586>
 80009ee:	2540      	movs	r5, #64	@ 0x40
 80009f0:	1aaa      	subs	r2, r5, r2
 80009f2:	4094      	lsls	r4, r2
 80009f4:	4320      	orrs	r0, r4
 80009f6:	1e42      	subs	r2, r0, #1
 80009f8:	4190      	sbcs	r0, r2
 80009fa:	0005      	movs	r5, r0
 80009fc:	4335      	orrs	r5, r6
 80009fe:	e606      	b.n	800060e <__aeabi_dadd+0x19e>
 8000a00:	2a00      	cmp	r2, #0
 8000a02:	d07c      	beq.n	8000afe <__aeabi_dadd+0x68e>
 8000a04:	4662      	mov	r2, ip
 8000a06:	4653      	mov	r3, sl
 8000a08:	08c0      	lsrs	r0, r0, #3
 8000a0a:	431a      	orrs	r2, r3
 8000a0c:	d100      	bne.n	8000a10 <__aeabi_dadd+0x5a0>
 8000a0e:	e6fa      	b.n	8000806 <__aeabi_dadd+0x396>
 8000a10:	0762      	lsls	r2, r4, #29
 8000a12:	4310      	orrs	r0, r2
 8000a14:	2280      	movs	r2, #128	@ 0x80
 8000a16:	08e4      	lsrs	r4, r4, #3
 8000a18:	0312      	lsls	r2, r2, #12
 8000a1a:	4214      	tst	r4, r2
 8000a1c:	d008      	beq.n	8000a30 <__aeabi_dadd+0x5c0>
 8000a1e:	08d9      	lsrs	r1, r3, #3
 8000a20:	4211      	tst	r1, r2
 8000a22:	d105      	bne.n	8000a30 <__aeabi_dadd+0x5c0>
 8000a24:	4663      	mov	r3, ip
 8000a26:	08d8      	lsrs	r0, r3, #3
 8000a28:	4653      	mov	r3, sl
 8000a2a:	000c      	movs	r4, r1
 8000a2c:	075b      	lsls	r3, r3, #29
 8000a2e:	4318      	orrs	r0, r3
 8000a30:	0f42      	lsrs	r2, r0, #29
 8000a32:	00c0      	lsls	r0, r0, #3
 8000a34:	08c0      	lsrs	r0, r0, #3
 8000a36:	0752      	lsls	r2, r2, #29
 8000a38:	4302      	orrs	r2, r0
 8000a3a:	e6e7      	b.n	800080c <__aeabi_dadd+0x39c>
 8000a3c:	2a00      	cmp	r2, #0
 8000a3e:	d100      	bne.n	8000a42 <__aeabi_dadd+0x5d2>
 8000a40:	e72d      	b.n	800089e <__aeabi_dadd+0x42e>
 8000a42:	4663      	mov	r3, ip
 8000a44:	08d8      	lsrs	r0, r3, #3
 8000a46:	4653      	mov	r3, sl
 8000a48:	075a      	lsls	r2, r3, #29
 8000a4a:	000e      	movs	r6, r1
 8000a4c:	4302      	orrs	r2, r0
 8000a4e:	08dc      	lsrs	r4, r3, #3
 8000a50:	e6cc      	b.n	80007ec <__aeabi_dadd+0x37c>
 8000a52:	4663      	mov	r3, ip
 8000a54:	1a1d      	subs	r5, r3, r0
 8000a56:	45ac      	cmp	ip, r5
 8000a58:	4192      	sbcs	r2, r2
 8000a5a:	4653      	mov	r3, sl
 8000a5c:	4252      	negs	r2, r2
 8000a5e:	1b1c      	subs	r4, r3, r4
 8000a60:	000e      	movs	r6, r1
 8000a62:	4688      	mov	r8, r1
 8000a64:	1aa4      	subs	r4, r4, r2
 8000a66:	3701      	adds	r7, #1
 8000a68:	e555      	b.n	8000516 <__aeabi_dadd+0xa6>
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	08d9      	lsrs	r1, r3, #3
 8000a6e:	4653      	mov	r3, sl
 8000a70:	075a      	lsls	r2, r3, #29
 8000a72:	430a      	orrs	r2, r1
 8000a74:	08dc      	lsrs	r4, r3, #3
 8000a76:	e6c9      	b.n	800080c <__aeabi_dadd+0x39c>
 8000a78:	4660      	mov	r0, ip
 8000a7a:	4654      	mov	r4, sl
 8000a7c:	e6d4      	b.n	8000828 <__aeabi_dadd+0x3b8>
 8000a7e:	08c0      	lsrs	r0, r0, #3
 8000a80:	2a00      	cmp	r2, #0
 8000a82:	d100      	bne.n	8000a86 <__aeabi_dadd+0x616>
 8000a84:	e6bf      	b.n	8000806 <__aeabi_dadd+0x396>
 8000a86:	0762      	lsls	r2, r4, #29
 8000a88:	4310      	orrs	r0, r2
 8000a8a:	2280      	movs	r2, #128	@ 0x80
 8000a8c:	08e4      	lsrs	r4, r4, #3
 8000a8e:	0312      	lsls	r2, r2, #12
 8000a90:	4214      	tst	r4, r2
 8000a92:	d0cd      	beq.n	8000a30 <__aeabi_dadd+0x5c0>
 8000a94:	08dd      	lsrs	r5, r3, #3
 8000a96:	4215      	tst	r5, r2
 8000a98:	d1ca      	bne.n	8000a30 <__aeabi_dadd+0x5c0>
 8000a9a:	4663      	mov	r3, ip
 8000a9c:	08d8      	lsrs	r0, r3, #3
 8000a9e:	4653      	mov	r3, sl
 8000aa0:	075b      	lsls	r3, r3, #29
 8000aa2:	000e      	movs	r6, r1
 8000aa4:	002c      	movs	r4, r5
 8000aa6:	4318      	orrs	r0, r3
 8000aa8:	e7c2      	b.n	8000a30 <__aeabi_dadd+0x5c0>
 8000aaa:	4663      	mov	r3, ip
 8000aac:	08d9      	lsrs	r1, r3, #3
 8000aae:	4653      	mov	r3, sl
 8000ab0:	075a      	lsls	r2, r3, #29
 8000ab2:	430a      	orrs	r2, r1
 8000ab4:	08dc      	lsrs	r4, r3, #3
 8000ab6:	e699      	b.n	80007ec <__aeabi_dadd+0x37c>
 8000ab8:	4663      	mov	r3, ip
 8000aba:	08d8      	lsrs	r0, r3, #3
 8000abc:	4653      	mov	r3, sl
 8000abe:	075a      	lsls	r2, r3, #29
 8000ac0:	000e      	movs	r6, r1
 8000ac2:	4302      	orrs	r2, r0
 8000ac4:	08dc      	lsrs	r4, r3, #3
 8000ac6:	e6a1      	b.n	800080c <__aeabi_dadd+0x39c>
 8000ac8:	0011      	movs	r1, r2
 8000aca:	0027      	movs	r7, r4
 8000acc:	3920      	subs	r1, #32
 8000ace:	40cf      	lsrs	r7, r1
 8000ad0:	2a20      	cmp	r2, #32
 8000ad2:	d003      	beq.n	8000adc <__aeabi_dadd+0x66c>
 8000ad4:	2140      	movs	r1, #64	@ 0x40
 8000ad6:	1a8a      	subs	r2, r1, r2
 8000ad8:	4094      	lsls	r4, r2
 8000ada:	4320      	orrs	r0, r4
 8000adc:	1e42      	subs	r2, r0, #1
 8000ade:	4190      	sbcs	r0, r2
 8000ae0:	0005      	movs	r5, r0
 8000ae2:	433d      	orrs	r5, r7
 8000ae4:	e651      	b.n	800078a <__aeabi_dadd+0x31a>
 8000ae6:	000c      	movs	r4, r1
 8000ae8:	2500      	movs	r5, #0
 8000aea:	2200      	movs	r2, #0
 8000aec:	e558      	b.n	80005a0 <__aeabi_dadd+0x130>
 8000aee:	4460      	add	r0, ip
 8000af0:	4560      	cmp	r0, ip
 8000af2:	4192      	sbcs	r2, r2
 8000af4:	4454      	add	r4, sl
 8000af6:	4252      	negs	r2, r2
 8000af8:	0005      	movs	r5, r0
 8000afa:	18a4      	adds	r4, r4, r2
 8000afc:	e73a      	b.n	8000974 <__aeabi_dadd+0x504>
 8000afe:	4653      	mov	r3, sl
 8000b00:	075a      	lsls	r2, r3, #29
 8000b02:	4663      	mov	r3, ip
 8000b04:	08d9      	lsrs	r1, r3, #3
 8000b06:	4653      	mov	r3, sl
 8000b08:	430a      	orrs	r2, r1
 8000b0a:	08dc      	lsrs	r4, r3, #3
 8000b0c:	e67e      	b.n	800080c <__aeabi_dadd+0x39c>
 8000b0e:	001a      	movs	r2, r3
 8000b10:	001c      	movs	r4, r3
 8000b12:	432a      	orrs	r2, r5
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dadd+0x6a8>
 8000b16:	e6ab      	b.n	8000870 <__aeabi_dadd+0x400>
 8000b18:	e6c1      	b.n	800089e <__aeabi_dadd+0x42e>
 8000b1a:	2120      	movs	r1, #32
 8000b1c:	2500      	movs	r5, #0
 8000b1e:	1a09      	subs	r1, r1, r0
 8000b20:	e519      	b.n	8000556 <__aeabi_dadd+0xe6>
 8000b22:	2200      	movs	r2, #0
 8000b24:	2500      	movs	r5, #0
 8000b26:	4c01      	ldr	r4, [pc, #4]	@ (8000b2c <__aeabi_dadd+0x6bc>)
 8000b28:	e53a      	b.n	80005a0 <__aeabi_dadd+0x130>
 8000b2a:	46c0      	nop			@ (mov r8, r8)
 8000b2c:	000007ff 	.word	0x000007ff
 8000b30:	ff7fffff 	.word	0xff7fffff
 8000b34:	000007fe 	.word	0x000007fe

08000b38 <__aeabi_ddiv>:
 8000b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b3a:	46de      	mov	lr, fp
 8000b3c:	4645      	mov	r5, r8
 8000b3e:	4657      	mov	r7, sl
 8000b40:	464e      	mov	r6, r9
 8000b42:	b5e0      	push	{r5, r6, r7, lr}
 8000b44:	b087      	sub	sp, #28
 8000b46:	9200      	str	r2, [sp, #0]
 8000b48:	9301      	str	r3, [sp, #4]
 8000b4a:	030b      	lsls	r3, r1, #12
 8000b4c:	0b1b      	lsrs	r3, r3, #12
 8000b4e:	469b      	mov	fp, r3
 8000b50:	0fca      	lsrs	r2, r1, #31
 8000b52:	004b      	lsls	r3, r1, #1
 8000b54:	0004      	movs	r4, r0
 8000b56:	4680      	mov	r8, r0
 8000b58:	0d5b      	lsrs	r3, r3, #21
 8000b5a:	9202      	str	r2, [sp, #8]
 8000b5c:	d100      	bne.n	8000b60 <__aeabi_ddiv+0x28>
 8000b5e:	e16a      	b.n	8000e36 <__aeabi_ddiv+0x2fe>
 8000b60:	4ad4      	ldr	r2, [pc, #848]	@ (8000eb4 <__aeabi_ddiv+0x37c>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d100      	bne.n	8000b68 <__aeabi_ddiv+0x30>
 8000b66:	e18c      	b.n	8000e82 <__aeabi_ddiv+0x34a>
 8000b68:	4659      	mov	r1, fp
 8000b6a:	0f42      	lsrs	r2, r0, #29
 8000b6c:	00c9      	lsls	r1, r1, #3
 8000b6e:	430a      	orrs	r2, r1
 8000b70:	2180      	movs	r1, #128	@ 0x80
 8000b72:	0409      	lsls	r1, r1, #16
 8000b74:	4311      	orrs	r1, r2
 8000b76:	00c2      	lsls	r2, r0, #3
 8000b78:	4690      	mov	r8, r2
 8000b7a:	4acf      	ldr	r2, [pc, #828]	@ (8000eb8 <__aeabi_ddiv+0x380>)
 8000b7c:	4689      	mov	r9, r1
 8000b7e:	4692      	mov	sl, r2
 8000b80:	449a      	add	sl, r3
 8000b82:	2300      	movs	r3, #0
 8000b84:	2400      	movs	r4, #0
 8000b86:	9303      	str	r3, [sp, #12]
 8000b88:	9e00      	ldr	r6, [sp, #0]
 8000b8a:	9f01      	ldr	r7, [sp, #4]
 8000b8c:	033b      	lsls	r3, r7, #12
 8000b8e:	0b1b      	lsrs	r3, r3, #12
 8000b90:	469b      	mov	fp, r3
 8000b92:	007b      	lsls	r3, r7, #1
 8000b94:	0030      	movs	r0, r6
 8000b96:	0d5b      	lsrs	r3, r3, #21
 8000b98:	0ffd      	lsrs	r5, r7, #31
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d100      	bne.n	8000ba0 <__aeabi_ddiv+0x68>
 8000b9e:	e128      	b.n	8000df2 <__aeabi_ddiv+0x2ba>
 8000ba0:	4ac4      	ldr	r2, [pc, #784]	@ (8000eb4 <__aeabi_ddiv+0x37c>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d100      	bne.n	8000ba8 <__aeabi_ddiv+0x70>
 8000ba6:	e177      	b.n	8000e98 <__aeabi_ddiv+0x360>
 8000ba8:	4659      	mov	r1, fp
 8000baa:	0f72      	lsrs	r2, r6, #29
 8000bac:	00c9      	lsls	r1, r1, #3
 8000bae:	430a      	orrs	r2, r1
 8000bb0:	2180      	movs	r1, #128	@ 0x80
 8000bb2:	0409      	lsls	r1, r1, #16
 8000bb4:	4311      	orrs	r1, r2
 8000bb6:	468b      	mov	fp, r1
 8000bb8:	49bf      	ldr	r1, [pc, #764]	@ (8000eb8 <__aeabi_ddiv+0x380>)
 8000bba:	00f2      	lsls	r2, r6, #3
 8000bbc:	468c      	mov	ip, r1
 8000bbe:	4651      	mov	r1, sl
 8000bc0:	4463      	add	r3, ip
 8000bc2:	1acb      	subs	r3, r1, r3
 8000bc4:	469a      	mov	sl, r3
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	9e02      	ldr	r6, [sp, #8]
 8000bca:	406e      	eors	r6, r5
 8000bcc:	2c0f      	cmp	r4, #15
 8000bce:	d827      	bhi.n	8000c20 <__aeabi_ddiv+0xe8>
 8000bd0:	49ba      	ldr	r1, [pc, #744]	@ (8000ebc <__aeabi_ddiv+0x384>)
 8000bd2:	00a4      	lsls	r4, r4, #2
 8000bd4:	5909      	ldr	r1, [r1, r4]
 8000bd6:	468f      	mov	pc, r1
 8000bd8:	46cb      	mov	fp, r9
 8000bda:	4642      	mov	r2, r8
 8000bdc:	9e02      	ldr	r6, [sp, #8]
 8000bde:	9b03      	ldr	r3, [sp, #12]
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	d016      	beq.n	8000c12 <__aeabi_ddiv+0xda>
 8000be4:	2b03      	cmp	r3, #3
 8000be6:	d100      	bne.n	8000bea <__aeabi_ddiv+0xb2>
 8000be8:	e2a6      	b.n	8001138 <__aeabi_ddiv+0x600>
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d000      	beq.n	8000bf0 <__aeabi_ddiv+0xb8>
 8000bee:	e0df      	b.n	8000db0 <__aeabi_ddiv+0x278>
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2400      	movs	r4, #0
 8000bf6:	4690      	mov	r8, r2
 8000bf8:	051b      	lsls	r3, r3, #20
 8000bfa:	4323      	orrs	r3, r4
 8000bfc:	07f6      	lsls	r6, r6, #31
 8000bfe:	4333      	orrs	r3, r6
 8000c00:	4640      	mov	r0, r8
 8000c02:	0019      	movs	r1, r3
 8000c04:	b007      	add	sp, #28
 8000c06:	bcf0      	pop	{r4, r5, r6, r7}
 8000c08:	46bb      	mov	fp, r7
 8000c0a:	46b2      	mov	sl, r6
 8000c0c:	46a9      	mov	r9, r5
 8000c0e:	46a0      	mov	r8, r4
 8000c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c12:	2200      	movs	r2, #0
 8000c14:	2400      	movs	r4, #0
 8000c16:	4690      	mov	r8, r2
 8000c18:	4ba6      	ldr	r3, [pc, #664]	@ (8000eb4 <__aeabi_ddiv+0x37c>)
 8000c1a:	e7ed      	b.n	8000bf8 <__aeabi_ddiv+0xc0>
 8000c1c:	002e      	movs	r6, r5
 8000c1e:	e7df      	b.n	8000be0 <__aeabi_ddiv+0xa8>
 8000c20:	45cb      	cmp	fp, r9
 8000c22:	d200      	bcs.n	8000c26 <__aeabi_ddiv+0xee>
 8000c24:	e1d4      	b.n	8000fd0 <__aeabi_ddiv+0x498>
 8000c26:	d100      	bne.n	8000c2a <__aeabi_ddiv+0xf2>
 8000c28:	e1cf      	b.n	8000fca <__aeabi_ddiv+0x492>
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	425b      	negs	r3, r3
 8000c2e:	469c      	mov	ip, r3
 8000c30:	4644      	mov	r4, r8
 8000c32:	4648      	mov	r0, r9
 8000c34:	2700      	movs	r7, #0
 8000c36:	44e2      	add	sl, ip
 8000c38:	465b      	mov	r3, fp
 8000c3a:	0e15      	lsrs	r5, r2, #24
 8000c3c:	021b      	lsls	r3, r3, #8
 8000c3e:	431d      	orrs	r5, r3
 8000c40:	0c19      	lsrs	r1, r3, #16
 8000c42:	042b      	lsls	r3, r5, #16
 8000c44:	0212      	lsls	r2, r2, #8
 8000c46:	9500      	str	r5, [sp, #0]
 8000c48:	0c1d      	lsrs	r5, r3, #16
 8000c4a:	4691      	mov	r9, r2
 8000c4c:	9102      	str	r1, [sp, #8]
 8000c4e:	9503      	str	r5, [sp, #12]
 8000c50:	f7ff fae0 	bl	8000214 <__aeabi_uidivmod>
 8000c54:	0002      	movs	r2, r0
 8000c56:	436a      	muls	r2, r5
 8000c58:	040b      	lsls	r3, r1, #16
 8000c5a:	0c21      	lsrs	r1, r4, #16
 8000c5c:	4680      	mov	r8, r0
 8000c5e:	4319      	orrs	r1, r3
 8000c60:	428a      	cmp	r2, r1
 8000c62:	d909      	bls.n	8000c78 <__aeabi_ddiv+0x140>
 8000c64:	9d00      	ldr	r5, [sp, #0]
 8000c66:	2301      	movs	r3, #1
 8000c68:	46ac      	mov	ip, r5
 8000c6a:	425b      	negs	r3, r3
 8000c6c:	4461      	add	r1, ip
 8000c6e:	469c      	mov	ip, r3
 8000c70:	44e0      	add	r8, ip
 8000c72:	428d      	cmp	r5, r1
 8000c74:	d800      	bhi.n	8000c78 <__aeabi_ddiv+0x140>
 8000c76:	e1fb      	b.n	8001070 <__aeabi_ddiv+0x538>
 8000c78:	1a88      	subs	r0, r1, r2
 8000c7a:	9902      	ldr	r1, [sp, #8]
 8000c7c:	f7ff faca 	bl	8000214 <__aeabi_uidivmod>
 8000c80:	9a03      	ldr	r2, [sp, #12]
 8000c82:	0424      	lsls	r4, r4, #16
 8000c84:	4342      	muls	r2, r0
 8000c86:	0409      	lsls	r1, r1, #16
 8000c88:	0c24      	lsrs	r4, r4, #16
 8000c8a:	0003      	movs	r3, r0
 8000c8c:	430c      	orrs	r4, r1
 8000c8e:	42a2      	cmp	r2, r4
 8000c90:	d906      	bls.n	8000ca0 <__aeabi_ddiv+0x168>
 8000c92:	9900      	ldr	r1, [sp, #0]
 8000c94:	3b01      	subs	r3, #1
 8000c96:	468c      	mov	ip, r1
 8000c98:	4464      	add	r4, ip
 8000c9a:	42a1      	cmp	r1, r4
 8000c9c:	d800      	bhi.n	8000ca0 <__aeabi_ddiv+0x168>
 8000c9e:	e1e1      	b.n	8001064 <__aeabi_ddiv+0x52c>
 8000ca0:	1aa0      	subs	r0, r4, r2
 8000ca2:	4642      	mov	r2, r8
 8000ca4:	0412      	lsls	r2, r2, #16
 8000ca6:	431a      	orrs	r2, r3
 8000ca8:	4693      	mov	fp, r2
 8000caa:	464b      	mov	r3, r9
 8000cac:	4659      	mov	r1, fp
 8000cae:	0c1b      	lsrs	r3, r3, #16
 8000cb0:	001d      	movs	r5, r3
 8000cb2:	9304      	str	r3, [sp, #16]
 8000cb4:	040b      	lsls	r3, r1, #16
 8000cb6:	4649      	mov	r1, r9
 8000cb8:	0409      	lsls	r1, r1, #16
 8000cba:	0c09      	lsrs	r1, r1, #16
 8000cbc:	000c      	movs	r4, r1
 8000cbe:	0c1b      	lsrs	r3, r3, #16
 8000cc0:	435c      	muls	r4, r3
 8000cc2:	0c12      	lsrs	r2, r2, #16
 8000cc4:	436b      	muls	r3, r5
 8000cc6:	4688      	mov	r8, r1
 8000cc8:	4351      	muls	r1, r2
 8000cca:	436a      	muls	r2, r5
 8000ccc:	0c25      	lsrs	r5, r4, #16
 8000cce:	46ac      	mov	ip, r5
 8000cd0:	185b      	adds	r3, r3, r1
 8000cd2:	4463      	add	r3, ip
 8000cd4:	4299      	cmp	r1, r3
 8000cd6:	d903      	bls.n	8000ce0 <__aeabi_ddiv+0x1a8>
 8000cd8:	2180      	movs	r1, #128	@ 0x80
 8000cda:	0249      	lsls	r1, r1, #9
 8000cdc:	468c      	mov	ip, r1
 8000cde:	4462      	add	r2, ip
 8000ce0:	0c19      	lsrs	r1, r3, #16
 8000ce2:	0424      	lsls	r4, r4, #16
 8000ce4:	041b      	lsls	r3, r3, #16
 8000ce6:	0c24      	lsrs	r4, r4, #16
 8000ce8:	188a      	adds	r2, r1, r2
 8000cea:	191c      	adds	r4, r3, r4
 8000cec:	4290      	cmp	r0, r2
 8000cee:	d302      	bcc.n	8000cf6 <__aeabi_ddiv+0x1be>
 8000cf0:	d116      	bne.n	8000d20 <__aeabi_ddiv+0x1e8>
 8000cf2:	42a7      	cmp	r7, r4
 8000cf4:	d214      	bcs.n	8000d20 <__aeabi_ddiv+0x1e8>
 8000cf6:	465b      	mov	r3, fp
 8000cf8:	9d00      	ldr	r5, [sp, #0]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	444f      	add	r7, r9
 8000cfe:	9305      	str	r3, [sp, #20]
 8000d00:	454f      	cmp	r7, r9
 8000d02:	419b      	sbcs	r3, r3
 8000d04:	46ac      	mov	ip, r5
 8000d06:	425b      	negs	r3, r3
 8000d08:	4463      	add	r3, ip
 8000d0a:	18c0      	adds	r0, r0, r3
 8000d0c:	4285      	cmp	r5, r0
 8000d0e:	d300      	bcc.n	8000d12 <__aeabi_ddiv+0x1da>
 8000d10:	e1a1      	b.n	8001056 <__aeabi_ddiv+0x51e>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	d900      	bls.n	8000d18 <__aeabi_ddiv+0x1e0>
 8000d16:	e1f6      	b.n	8001106 <__aeabi_ddiv+0x5ce>
 8000d18:	d100      	bne.n	8000d1c <__aeabi_ddiv+0x1e4>
 8000d1a:	e1f1      	b.n	8001100 <__aeabi_ddiv+0x5c8>
 8000d1c:	9b05      	ldr	r3, [sp, #20]
 8000d1e:	469b      	mov	fp, r3
 8000d20:	1b3c      	subs	r4, r7, r4
 8000d22:	42a7      	cmp	r7, r4
 8000d24:	41bf      	sbcs	r7, r7
 8000d26:	9d00      	ldr	r5, [sp, #0]
 8000d28:	1a80      	subs	r0, r0, r2
 8000d2a:	427f      	negs	r7, r7
 8000d2c:	1bc0      	subs	r0, r0, r7
 8000d2e:	4285      	cmp	r5, r0
 8000d30:	d100      	bne.n	8000d34 <__aeabi_ddiv+0x1fc>
 8000d32:	e1d0      	b.n	80010d6 <__aeabi_ddiv+0x59e>
 8000d34:	9902      	ldr	r1, [sp, #8]
 8000d36:	f7ff fa6d 	bl	8000214 <__aeabi_uidivmod>
 8000d3a:	9a03      	ldr	r2, [sp, #12]
 8000d3c:	040b      	lsls	r3, r1, #16
 8000d3e:	4342      	muls	r2, r0
 8000d40:	0c21      	lsrs	r1, r4, #16
 8000d42:	0007      	movs	r7, r0
 8000d44:	4319      	orrs	r1, r3
 8000d46:	428a      	cmp	r2, r1
 8000d48:	d900      	bls.n	8000d4c <__aeabi_ddiv+0x214>
 8000d4a:	e178      	b.n	800103e <__aeabi_ddiv+0x506>
 8000d4c:	1a88      	subs	r0, r1, r2
 8000d4e:	9902      	ldr	r1, [sp, #8]
 8000d50:	f7ff fa60 	bl	8000214 <__aeabi_uidivmod>
 8000d54:	9a03      	ldr	r2, [sp, #12]
 8000d56:	0424      	lsls	r4, r4, #16
 8000d58:	4342      	muls	r2, r0
 8000d5a:	0409      	lsls	r1, r1, #16
 8000d5c:	0c24      	lsrs	r4, r4, #16
 8000d5e:	0003      	movs	r3, r0
 8000d60:	430c      	orrs	r4, r1
 8000d62:	42a2      	cmp	r2, r4
 8000d64:	d900      	bls.n	8000d68 <__aeabi_ddiv+0x230>
 8000d66:	e15d      	b.n	8001024 <__aeabi_ddiv+0x4ec>
 8000d68:	4641      	mov	r1, r8
 8000d6a:	1aa4      	subs	r4, r4, r2
 8000d6c:	043a      	lsls	r2, r7, #16
 8000d6e:	431a      	orrs	r2, r3
 8000d70:	9d04      	ldr	r5, [sp, #16]
 8000d72:	0413      	lsls	r3, r2, #16
 8000d74:	0c1b      	lsrs	r3, r3, #16
 8000d76:	4359      	muls	r1, r3
 8000d78:	4647      	mov	r7, r8
 8000d7a:	436b      	muls	r3, r5
 8000d7c:	469c      	mov	ip, r3
 8000d7e:	0c10      	lsrs	r0, r2, #16
 8000d80:	4347      	muls	r7, r0
 8000d82:	0c0b      	lsrs	r3, r1, #16
 8000d84:	44bc      	add	ip, r7
 8000d86:	4463      	add	r3, ip
 8000d88:	4368      	muls	r0, r5
 8000d8a:	429f      	cmp	r7, r3
 8000d8c:	d903      	bls.n	8000d96 <__aeabi_ddiv+0x25e>
 8000d8e:	2580      	movs	r5, #128	@ 0x80
 8000d90:	026d      	lsls	r5, r5, #9
 8000d92:	46ac      	mov	ip, r5
 8000d94:	4460      	add	r0, ip
 8000d96:	0c1f      	lsrs	r7, r3, #16
 8000d98:	0409      	lsls	r1, r1, #16
 8000d9a:	041b      	lsls	r3, r3, #16
 8000d9c:	0c09      	lsrs	r1, r1, #16
 8000d9e:	183f      	adds	r7, r7, r0
 8000da0:	185b      	adds	r3, r3, r1
 8000da2:	42bc      	cmp	r4, r7
 8000da4:	d200      	bcs.n	8000da8 <__aeabi_ddiv+0x270>
 8000da6:	e102      	b.n	8000fae <__aeabi_ddiv+0x476>
 8000da8:	d100      	bne.n	8000dac <__aeabi_ddiv+0x274>
 8000daa:	e0fd      	b.n	8000fa8 <__aeabi_ddiv+0x470>
 8000dac:	2301      	movs	r3, #1
 8000dae:	431a      	orrs	r2, r3
 8000db0:	4b43      	ldr	r3, [pc, #268]	@ (8000ec0 <__aeabi_ddiv+0x388>)
 8000db2:	4453      	add	r3, sl
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	dc00      	bgt.n	8000dba <__aeabi_ddiv+0x282>
 8000db8:	e0ae      	b.n	8000f18 <__aeabi_ddiv+0x3e0>
 8000dba:	0751      	lsls	r1, r2, #29
 8000dbc:	d000      	beq.n	8000dc0 <__aeabi_ddiv+0x288>
 8000dbe:	e198      	b.n	80010f2 <__aeabi_ddiv+0x5ba>
 8000dc0:	4659      	mov	r1, fp
 8000dc2:	01c9      	lsls	r1, r1, #7
 8000dc4:	d506      	bpl.n	8000dd4 <__aeabi_ddiv+0x29c>
 8000dc6:	4659      	mov	r1, fp
 8000dc8:	4b3e      	ldr	r3, [pc, #248]	@ (8000ec4 <__aeabi_ddiv+0x38c>)
 8000dca:	4019      	ands	r1, r3
 8000dcc:	2380      	movs	r3, #128	@ 0x80
 8000dce:	468b      	mov	fp, r1
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	4453      	add	r3, sl
 8000dd4:	493c      	ldr	r1, [pc, #240]	@ (8000ec8 <__aeabi_ddiv+0x390>)
 8000dd6:	428b      	cmp	r3, r1
 8000dd8:	dd00      	ble.n	8000ddc <__aeabi_ddiv+0x2a4>
 8000dda:	e71a      	b.n	8000c12 <__aeabi_ddiv+0xda>
 8000ddc:	4659      	mov	r1, fp
 8000dde:	08d2      	lsrs	r2, r2, #3
 8000de0:	0749      	lsls	r1, r1, #29
 8000de2:	4311      	orrs	r1, r2
 8000de4:	465a      	mov	r2, fp
 8000de6:	055b      	lsls	r3, r3, #21
 8000de8:	0254      	lsls	r4, r2, #9
 8000dea:	4688      	mov	r8, r1
 8000dec:	0b24      	lsrs	r4, r4, #12
 8000dee:	0d5b      	lsrs	r3, r3, #21
 8000df0:	e702      	b.n	8000bf8 <__aeabi_ddiv+0xc0>
 8000df2:	465a      	mov	r2, fp
 8000df4:	9b00      	ldr	r3, [sp, #0]
 8000df6:	431a      	orrs	r2, r3
 8000df8:	d100      	bne.n	8000dfc <__aeabi_ddiv+0x2c4>
 8000dfa:	e07e      	b.n	8000efa <__aeabi_ddiv+0x3c2>
 8000dfc:	465b      	mov	r3, fp
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d100      	bne.n	8000e04 <__aeabi_ddiv+0x2cc>
 8000e02:	e100      	b.n	8001006 <__aeabi_ddiv+0x4ce>
 8000e04:	4658      	mov	r0, fp
 8000e06:	f001 f9cd 	bl	80021a4 <__clzsi2>
 8000e0a:	0002      	movs	r2, r0
 8000e0c:	0003      	movs	r3, r0
 8000e0e:	3a0b      	subs	r2, #11
 8000e10:	271d      	movs	r7, #29
 8000e12:	9e00      	ldr	r6, [sp, #0]
 8000e14:	1aba      	subs	r2, r7, r2
 8000e16:	0019      	movs	r1, r3
 8000e18:	4658      	mov	r0, fp
 8000e1a:	40d6      	lsrs	r6, r2
 8000e1c:	3908      	subs	r1, #8
 8000e1e:	4088      	lsls	r0, r1
 8000e20:	0032      	movs	r2, r6
 8000e22:	4302      	orrs	r2, r0
 8000e24:	4693      	mov	fp, r2
 8000e26:	9a00      	ldr	r2, [sp, #0]
 8000e28:	408a      	lsls	r2, r1
 8000e2a:	4928      	ldr	r1, [pc, #160]	@ (8000ecc <__aeabi_ddiv+0x394>)
 8000e2c:	4453      	add	r3, sl
 8000e2e:	468a      	mov	sl, r1
 8000e30:	449a      	add	sl, r3
 8000e32:	2300      	movs	r3, #0
 8000e34:	e6c8      	b.n	8000bc8 <__aeabi_ddiv+0x90>
 8000e36:	465b      	mov	r3, fp
 8000e38:	4303      	orrs	r3, r0
 8000e3a:	4699      	mov	r9, r3
 8000e3c:	d056      	beq.n	8000eec <__aeabi_ddiv+0x3b4>
 8000e3e:	465b      	mov	r3, fp
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d100      	bne.n	8000e46 <__aeabi_ddiv+0x30e>
 8000e44:	e0cd      	b.n	8000fe2 <__aeabi_ddiv+0x4aa>
 8000e46:	4658      	mov	r0, fp
 8000e48:	f001 f9ac 	bl	80021a4 <__clzsi2>
 8000e4c:	230b      	movs	r3, #11
 8000e4e:	425b      	negs	r3, r3
 8000e50:	469c      	mov	ip, r3
 8000e52:	0002      	movs	r2, r0
 8000e54:	4484      	add	ip, r0
 8000e56:	4666      	mov	r6, ip
 8000e58:	231d      	movs	r3, #29
 8000e5a:	1b9b      	subs	r3, r3, r6
 8000e5c:	0026      	movs	r6, r4
 8000e5e:	0011      	movs	r1, r2
 8000e60:	4658      	mov	r0, fp
 8000e62:	40de      	lsrs	r6, r3
 8000e64:	3908      	subs	r1, #8
 8000e66:	4088      	lsls	r0, r1
 8000e68:	0033      	movs	r3, r6
 8000e6a:	4303      	orrs	r3, r0
 8000e6c:	4699      	mov	r9, r3
 8000e6e:	0023      	movs	r3, r4
 8000e70:	408b      	lsls	r3, r1
 8000e72:	4698      	mov	r8, r3
 8000e74:	4b16      	ldr	r3, [pc, #88]	@ (8000ed0 <__aeabi_ddiv+0x398>)
 8000e76:	2400      	movs	r4, #0
 8000e78:	1a9b      	subs	r3, r3, r2
 8000e7a:	469a      	mov	sl, r3
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	9303      	str	r3, [sp, #12]
 8000e80:	e682      	b.n	8000b88 <__aeabi_ddiv+0x50>
 8000e82:	465a      	mov	r2, fp
 8000e84:	4302      	orrs	r2, r0
 8000e86:	4691      	mov	r9, r2
 8000e88:	d12a      	bne.n	8000ee0 <__aeabi_ddiv+0x3a8>
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	469a      	mov	sl, r3
 8000e8e:	2302      	movs	r3, #2
 8000e90:	4690      	mov	r8, r2
 8000e92:	2408      	movs	r4, #8
 8000e94:	9303      	str	r3, [sp, #12]
 8000e96:	e677      	b.n	8000b88 <__aeabi_ddiv+0x50>
 8000e98:	465a      	mov	r2, fp
 8000e9a:	9b00      	ldr	r3, [sp, #0]
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed4 <__aeabi_ddiv+0x39c>)
 8000ea0:	469c      	mov	ip, r3
 8000ea2:	44e2      	add	sl, ip
 8000ea4:	2a00      	cmp	r2, #0
 8000ea6:	d117      	bne.n	8000ed8 <__aeabi_ddiv+0x3a0>
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	2300      	movs	r3, #0
 8000eae:	469b      	mov	fp, r3
 8000eb0:	3302      	adds	r3, #2
 8000eb2:	e689      	b.n	8000bc8 <__aeabi_ddiv+0x90>
 8000eb4:	000007ff 	.word	0x000007ff
 8000eb8:	fffffc01 	.word	0xfffffc01
 8000ebc:	08005cc0 	.word	0x08005cc0
 8000ec0:	000003ff 	.word	0x000003ff
 8000ec4:	feffffff 	.word	0xfeffffff
 8000ec8:	000007fe 	.word	0x000007fe
 8000ecc:	000003f3 	.word	0x000003f3
 8000ed0:	fffffc0d 	.word	0xfffffc0d
 8000ed4:	fffff801 	.word	0xfffff801
 8000ed8:	2303      	movs	r3, #3
 8000eda:	0032      	movs	r2, r6
 8000edc:	431c      	orrs	r4, r3
 8000ede:	e673      	b.n	8000bc8 <__aeabi_ddiv+0x90>
 8000ee0:	469a      	mov	sl, r3
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	46d9      	mov	r9, fp
 8000ee6:	240c      	movs	r4, #12
 8000ee8:	9303      	str	r3, [sp, #12]
 8000eea:	e64d      	b.n	8000b88 <__aeabi_ddiv+0x50>
 8000eec:	2300      	movs	r3, #0
 8000eee:	4698      	mov	r8, r3
 8000ef0:	469a      	mov	sl, r3
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	2404      	movs	r4, #4
 8000ef6:	9303      	str	r3, [sp, #12]
 8000ef8:	e646      	b.n	8000b88 <__aeabi_ddiv+0x50>
 8000efa:	2301      	movs	r3, #1
 8000efc:	431c      	orrs	r4, r3
 8000efe:	2300      	movs	r3, #0
 8000f00:	469b      	mov	fp, r3
 8000f02:	3301      	adds	r3, #1
 8000f04:	e660      	b.n	8000bc8 <__aeabi_ddiv+0x90>
 8000f06:	2300      	movs	r3, #0
 8000f08:	2480      	movs	r4, #128	@ 0x80
 8000f0a:	4698      	mov	r8, r3
 8000f0c:	2600      	movs	r6, #0
 8000f0e:	4b92      	ldr	r3, [pc, #584]	@ (8001158 <__aeabi_ddiv+0x620>)
 8000f10:	0324      	lsls	r4, r4, #12
 8000f12:	e671      	b.n	8000bf8 <__aeabi_ddiv+0xc0>
 8000f14:	2201      	movs	r2, #1
 8000f16:	4252      	negs	r2, r2
 8000f18:	2101      	movs	r1, #1
 8000f1a:	1ac9      	subs	r1, r1, r3
 8000f1c:	2938      	cmp	r1, #56	@ 0x38
 8000f1e:	dd00      	ble.n	8000f22 <__aeabi_ddiv+0x3ea>
 8000f20:	e666      	b.n	8000bf0 <__aeabi_ddiv+0xb8>
 8000f22:	291f      	cmp	r1, #31
 8000f24:	dc00      	bgt.n	8000f28 <__aeabi_ddiv+0x3f0>
 8000f26:	e0ab      	b.n	8001080 <__aeabi_ddiv+0x548>
 8000f28:	201f      	movs	r0, #31
 8000f2a:	4240      	negs	r0, r0
 8000f2c:	1ac3      	subs	r3, r0, r3
 8000f2e:	4658      	mov	r0, fp
 8000f30:	40d8      	lsrs	r0, r3
 8000f32:	0003      	movs	r3, r0
 8000f34:	2920      	cmp	r1, #32
 8000f36:	d004      	beq.n	8000f42 <__aeabi_ddiv+0x40a>
 8000f38:	4658      	mov	r0, fp
 8000f3a:	4988      	ldr	r1, [pc, #544]	@ (800115c <__aeabi_ddiv+0x624>)
 8000f3c:	4451      	add	r1, sl
 8000f3e:	4088      	lsls	r0, r1
 8000f40:	4302      	orrs	r2, r0
 8000f42:	1e51      	subs	r1, r2, #1
 8000f44:	418a      	sbcs	r2, r1
 8000f46:	431a      	orrs	r2, r3
 8000f48:	2307      	movs	r3, #7
 8000f4a:	0019      	movs	r1, r3
 8000f4c:	2400      	movs	r4, #0
 8000f4e:	4011      	ands	r1, r2
 8000f50:	4213      	tst	r3, r2
 8000f52:	d00c      	beq.n	8000f6e <__aeabi_ddiv+0x436>
 8000f54:	230f      	movs	r3, #15
 8000f56:	4013      	ands	r3, r2
 8000f58:	2b04      	cmp	r3, #4
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_ddiv+0x426>
 8000f5c:	e0f9      	b.n	8001152 <__aeabi_ddiv+0x61a>
 8000f5e:	1d11      	adds	r1, r2, #4
 8000f60:	4291      	cmp	r1, r2
 8000f62:	419b      	sbcs	r3, r3
 8000f64:	000a      	movs	r2, r1
 8000f66:	425b      	negs	r3, r3
 8000f68:	0759      	lsls	r1, r3, #29
 8000f6a:	025b      	lsls	r3, r3, #9
 8000f6c:	0b1c      	lsrs	r4, r3, #12
 8000f6e:	08d2      	lsrs	r2, r2, #3
 8000f70:	430a      	orrs	r2, r1
 8000f72:	4690      	mov	r8, r2
 8000f74:	2300      	movs	r3, #0
 8000f76:	e63f      	b.n	8000bf8 <__aeabi_ddiv+0xc0>
 8000f78:	2480      	movs	r4, #128	@ 0x80
 8000f7a:	464b      	mov	r3, r9
 8000f7c:	0324      	lsls	r4, r4, #12
 8000f7e:	4223      	tst	r3, r4
 8000f80:	d009      	beq.n	8000f96 <__aeabi_ddiv+0x45e>
 8000f82:	465b      	mov	r3, fp
 8000f84:	4223      	tst	r3, r4
 8000f86:	d106      	bne.n	8000f96 <__aeabi_ddiv+0x45e>
 8000f88:	431c      	orrs	r4, r3
 8000f8a:	0324      	lsls	r4, r4, #12
 8000f8c:	002e      	movs	r6, r5
 8000f8e:	4690      	mov	r8, r2
 8000f90:	4b71      	ldr	r3, [pc, #452]	@ (8001158 <__aeabi_ddiv+0x620>)
 8000f92:	0b24      	lsrs	r4, r4, #12
 8000f94:	e630      	b.n	8000bf8 <__aeabi_ddiv+0xc0>
 8000f96:	2480      	movs	r4, #128	@ 0x80
 8000f98:	464b      	mov	r3, r9
 8000f9a:	0324      	lsls	r4, r4, #12
 8000f9c:	431c      	orrs	r4, r3
 8000f9e:	0324      	lsls	r4, r4, #12
 8000fa0:	9e02      	ldr	r6, [sp, #8]
 8000fa2:	4b6d      	ldr	r3, [pc, #436]	@ (8001158 <__aeabi_ddiv+0x620>)
 8000fa4:	0b24      	lsrs	r4, r4, #12
 8000fa6:	e627      	b.n	8000bf8 <__aeabi_ddiv+0xc0>
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d100      	bne.n	8000fae <__aeabi_ddiv+0x476>
 8000fac:	e700      	b.n	8000db0 <__aeabi_ddiv+0x278>
 8000fae:	9800      	ldr	r0, [sp, #0]
 8000fb0:	1e51      	subs	r1, r2, #1
 8000fb2:	4684      	mov	ip, r0
 8000fb4:	4464      	add	r4, ip
 8000fb6:	4284      	cmp	r4, r0
 8000fb8:	d200      	bcs.n	8000fbc <__aeabi_ddiv+0x484>
 8000fba:	e084      	b.n	80010c6 <__aeabi_ddiv+0x58e>
 8000fbc:	42bc      	cmp	r4, r7
 8000fbe:	d200      	bcs.n	8000fc2 <__aeabi_ddiv+0x48a>
 8000fc0:	e0ae      	b.n	8001120 <__aeabi_ddiv+0x5e8>
 8000fc2:	d100      	bne.n	8000fc6 <__aeabi_ddiv+0x48e>
 8000fc4:	e0c1      	b.n	800114a <__aeabi_ddiv+0x612>
 8000fc6:	000a      	movs	r2, r1
 8000fc8:	e6f0      	b.n	8000dac <__aeabi_ddiv+0x274>
 8000fca:	4542      	cmp	r2, r8
 8000fcc:	d900      	bls.n	8000fd0 <__aeabi_ddiv+0x498>
 8000fce:	e62c      	b.n	8000c2a <__aeabi_ddiv+0xf2>
 8000fd0:	464b      	mov	r3, r9
 8000fd2:	07dc      	lsls	r4, r3, #31
 8000fd4:	0858      	lsrs	r0, r3, #1
 8000fd6:	4643      	mov	r3, r8
 8000fd8:	085b      	lsrs	r3, r3, #1
 8000fda:	431c      	orrs	r4, r3
 8000fdc:	4643      	mov	r3, r8
 8000fde:	07df      	lsls	r7, r3, #31
 8000fe0:	e62a      	b.n	8000c38 <__aeabi_ddiv+0x100>
 8000fe2:	f001 f8df 	bl	80021a4 <__clzsi2>
 8000fe6:	2315      	movs	r3, #21
 8000fe8:	469c      	mov	ip, r3
 8000fea:	4484      	add	ip, r0
 8000fec:	0002      	movs	r2, r0
 8000fee:	4663      	mov	r3, ip
 8000ff0:	3220      	adds	r2, #32
 8000ff2:	2b1c      	cmp	r3, #28
 8000ff4:	dc00      	bgt.n	8000ff8 <__aeabi_ddiv+0x4c0>
 8000ff6:	e72e      	b.n	8000e56 <__aeabi_ddiv+0x31e>
 8000ff8:	0023      	movs	r3, r4
 8000ffa:	3808      	subs	r0, #8
 8000ffc:	4083      	lsls	r3, r0
 8000ffe:	4699      	mov	r9, r3
 8001000:	2300      	movs	r3, #0
 8001002:	4698      	mov	r8, r3
 8001004:	e736      	b.n	8000e74 <__aeabi_ddiv+0x33c>
 8001006:	f001 f8cd 	bl	80021a4 <__clzsi2>
 800100a:	0002      	movs	r2, r0
 800100c:	0003      	movs	r3, r0
 800100e:	3215      	adds	r2, #21
 8001010:	3320      	adds	r3, #32
 8001012:	2a1c      	cmp	r2, #28
 8001014:	dc00      	bgt.n	8001018 <__aeabi_ddiv+0x4e0>
 8001016:	e6fb      	b.n	8000e10 <__aeabi_ddiv+0x2d8>
 8001018:	9900      	ldr	r1, [sp, #0]
 800101a:	3808      	subs	r0, #8
 800101c:	4081      	lsls	r1, r0
 800101e:	2200      	movs	r2, #0
 8001020:	468b      	mov	fp, r1
 8001022:	e702      	b.n	8000e2a <__aeabi_ddiv+0x2f2>
 8001024:	9900      	ldr	r1, [sp, #0]
 8001026:	3b01      	subs	r3, #1
 8001028:	468c      	mov	ip, r1
 800102a:	4464      	add	r4, ip
 800102c:	42a1      	cmp	r1, r4
 800102e:	d900      	bls.n	8001032 <__aeabi_ddiv+0x4fa>
 8001030:	e69a      	b.n	8000d68 <__aeabi_ddiv+0x230>
 8001032:	42a2      	cmp	r2, r4
 8001034:	d800      	bhi.n	8001038 <__aeabi_ddiv+0x500>
 8001036:	e697      	b.n	8000d68 <__aeabi_ddiv+0x230>
 8001038:	1e83      	subs	r3, r0, #2
 800103a:	4464      	add	r4, ip
 800103c:	e694      	b.n	8000d68 <__aeabi_ddiv+0x230>
 800103e:	46ac      	mov	ip, r5
 8001040:	4461      	add	r1, ip
 8001042:	3f01      	subs	r7, #1
 8001044:	428d      	cmp	r5, r1
 8001046:	d900      	bls.n	800104a <__aeabi_ddiv+0x512>
 8001048:	e680      	b.n	8000d4c <__aeabi_ddiv+0x214>
 800104a:	428a      	cmp	r2, r1
 800104c:	d800      	bhi.n	8001050 <__aeabi_ddiv+0x518>
 800104e:	e67d      	b.n	8000d4c <__aeabi_ddiv+0x214>
 8001050:	1e87      	subs	r7, r0, #2
 8001052:	4461      	add	r1, ip
 8001054:	e67a      	b.n	8000d4c <__aeabi_ddiv+0x214>
 8001056:	4285      	cmp	r5, r0
 8001058:	d000      	beq.n	800105c <__aeabi_ddiv+0x524>
 800105a:	e65f      	b.n	8000d1c <__aeabi_ddiv+0x1e4>
 800105c:	45b9      	cmp	r9, r7
 800105e:	d900      	bls.n	8001062 <__aeabi_ddiv+0x52a>
 8001060:	e65c      	b.n	8000d1c <__aeabi_ddiv+0x1e4>
 8001062:	e656      	b.n	8000d12 <__aeabi_ddiv+0x1da>
 8001064:	42a2      	cmp	r2, r4
 8001066:	d800      	bhi.n	800106a <__aeabi_ddiv+0x532>
 8001068:	e61a      	b.n	8000ca0 <__aeabi_ddiv+0x168>
 800106a:	1e83      	subs	r3, r0, #2
 800106c:	4464      	add	r4, ip
 800106e:	e617      	b.n	8000ca0 <__aeabi_ddiv+0x168>
 8001070:	428a      	cmp	r2, r1
 8001072:	d800      	bhi.n	8001076 <__aeabi_ddiv+0x53e>
 8001074:	e600      	b.n	8000c78 <__aeabi_ddiv+0x140>
 8001076:	46ac      	mov	ip, r5
 8001078:	1e83      	subs	r3, r0, #2
 800107a:	4698      	mov	r8, r3
 800107c:	4461      	add	r1, ip
 800107e:	e5fb      	b.n	8000c78 <__aeabi_ddiv+0x140>
 8001080:	4837      	ldr	r0, [pc, #220]	@ (8001160 <__aeabi_ddiv+0x628>)
 8001082:	0014      	movs	r4, r2
 8001084:	4450      	add	r0, sl
 8001086:	4082      	lsls	r2, r0
 8001088:	465b      	mov	r3, fp
 800108a:	0017      	movs	r7, r2
 800108c:	4083      	lsls	r3, r0
 800108e:	40cc      	lsrs	r4, r1
 8001090:	1e7a      	subs	r2, r7, #1
 8001092:	4197      	sbcs	r7, r2
 8001094:	4323      	orrs	r3, r4
 8001096:	433b      	orrs	r3, r7
 8001098:	001a      	movs	r2, r3
 800109a:	465b      	mov	r3, fp
 800109c:	40cb      	lsrs	r3, r1
 800109e:	0751      	lsls	r1, r2, #29
 80010a0:	d009      	beq.n	80010b6 <__aeabi_ddiv+0x57e>
 80010a2:	210f      	movs	r1, #15
 80010a4:	4011      	ands	r1, r2
 80010a6:	2904      	cmp	r1, #4
 80010a8:	d005      	beq.n	80010b6 <__aeabi_ddiv+0x57e>
 80010aa:	1d11      	adds	r1, r2, #4
 80010ac:	4291      	cmp	r1, r2
 80010ae:	4192      	sbcs	r2, r2
 80010b0:	4252      	negs	r2, r2
 80010b2:	189b      	adds	r3, r3, r2
 80010b4:	000a      	movs	r2, r1
 80010b6:	0219      	lsls	r1, r3, #8
 80010b8:	d400      	bmi.n	80010bc <__aeabi_ddiv+0x584>
 80010ba:	e755      	b.n	8000f68 <__aeabi_ddiv+0x430>
 80010bc:	2200      	movs	r2, #0
 80010be:	2301      	movs	r3, #1
 80010c0:	2400      	movs	r4, #0
 80010c2:	4690      	mov	r8, r2
 80010c4:	e598      	b.n	8000bf8 <__aeabi_ddiv+0xc0>
 80010c6:	000a      	movs	r2, r1
 80010c8:	42bc      	cmp	r4, r7
 80010ca:	d000      	beq.n	80010ce <__aeabi_ddiv+0x596>
 80010cc:	e66e      	b.n	8000dac <__aeabi_ddiv+0x274>
 80010ce:	454b      	cmp	r3, r9
 80010d0:	d000      	beq.n	80010d4 <__aeabi_ddiv+0x59c>
 80010d2:	e66b      	b.n	8000dac <__aeabi_ddiv+0x274>
 80010d4:	e66c      	b.n	8000db0 <__aeabi_ddiv+0x278>
 80010d6:	4b23      	ldr	r3, [pc, #140]	@ (8001164 <__aeabi_ddiv+0x62c>)
 80010d8:	4a23      	ldr	r2, [pc, #140]	@ (8001168 <__aeabi_ddiv+0x630>)
 80010da:	4453      	add	r3, sl
 80010dc:	4592      	cmp	sl, r2
 80010de:	da00      	bge.n	80010e2 <__aeabi_ddiv+0x5aa>
 80010e0:	e718      	b.n	8000f14 <__aeabi_ddiv+0x3dc>
 80010e2:	2101      	movs	r1, #1
 80010e4:	4249      	negs	r1, r1
 80010e6:	1d0a      	adds	r2, r1, #4
 80010e8:	428a      	cmp	r2, r1
 80010ea:	4189      	sbcs	r1, r1
 80010ec:	4249      	negs	r1, r1
 80010ee:	448b      	add	fp, r1
 80010f0:	e666      	b.n	8000dc0 <__aeabi_ddiv+0x288>
 80010f2:	210f      	movs	r1, #15
 80010f4:	4011      	ands	r1, r2
 80010f6:	2904      	cmp	r1, #4
 80010f8:	d100      	bne.n	80010fc <__aeabi_ddiv+0x5c4>
 80010fa:	e661      	b.n	8000dc0 <__aeabi_ddiv+0x288>
 80010fc:	0011      	movs	r1, r2
 80010fe:	e7f2      	b.n	80010e6 <__aeabi_ddiv+0x5ae>
 8001100:	42bc      	cmp	r4, r7
 8001102:	d800      	bhi.n	8001106 <__aeabi_ddiv+0x5ce>
 8001104:	e60a      	b.n	8000d1c <__aeabi_ddiv+0x1e4>
 8001106:	2302      	movs	r3, #2
 8001108:	425b      	negs	r3, r3
 800110a:	469c      	mov	ip, r3
 800110c:	9900      	ldr	r1, [sp, #0]
 800110e:	444f      	add	r7, r9
 8001110:	454f      	cmp	r7, r9
 8001112:	419b      	sbcs	r3, r3
 8001114:	44e3      	add	fp, ip
 8001116:	468c      	mov	ip, r1
 8001118:	425b      	negs	r3, r3
 800111a:	4463      	add	r3, ip
 800111c:	18c0      	adds	r0, r0, r3
 800111e:	e5ff      	b.n	8000d20 <__aeabi_ddiv+0x1e8>
 8001120:	4649      	mov	r1, r9
 8001122:	9d00      	ldr	r5, [sp, #0]
 8001124:	0048      	lsls	r0, r1, #1
 8001126:	4548      	cmp	r0, r9
 8001128:	4189      	sbcs	r1, r1
 800112a:	46ac      	mov	ip, r5
 800112c:	4249      	negs	r1, r1
 800112e:	4461      	add	r1, ip
 8001130:	4681      	mov	r9, r0
 8001132:	3a02      	subs	r2, #2
 8001134:	1864      	adds	r4, r4, r1
 8001136:	e7c7      	b.n	80010c8 <__aeabi_ddiv+0x590>
 8001138:	2480      	movs	r4, #128	@ 0x80
 800113a:	465b      	mov	r3, fp
 800113c:	0324      	lsls	r4, r4, #12
 800113e:	431c      	orrs	r4, r3
 8001140:	0324      	lsls	r4, r4, #12
 8001142:	4690      	mov	r8, r2
 8001144:	4b04      	ldr	r3, [pc, #16]	@ (8001158 <__aeabi_ddiv+0x620>)
 8001146:	0b24      	lsrs	r4, r4, #12
 8001148:	e556      	b.n	8000bf8 <__aeabi_ddiv+0xc0>
 800114a:	4599      	cmp	r9, r3
 800114c:	d3e8      	bcc.n	8001120 <__aeabi_ddiv+0x5e8>
 800114e:	000a      	movs	r2, r1
 8001150:	e7bd      	b.n	80010ce <__aeabi_ddiv+0x596>
 8001152:	2300      	movs	r3, #0
 8001154:	e708      	b.n	8000f68 <__aeabi_ddiv+0x430>
 8001156:	46c0      	nop			@ (mov r8, r8)
 8001158:	000007ff 	.word	0x000007ff
 800115c:	0000043e 	.word	0x0000043e
 8001160:	0000041e 	.word	0x0000041e
 8001164:	000003ff 	.word	0x000003ff
 8001168:	fffffc02 	.word	0xfffffc02

0800116c <__eqdf2>:
 800116c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800116e:	4657      	mov	r7, sl
 8001170:	46de      	mov	lr, fp
 8001172:	464e      	mov	r6, r9
 8001174:	4645      	mov	r5, r8
 8001176:	b5e0      	push	{r5, r6, r7, lr}
 8001178:	000d      	movs	r5, r1
 800117a:	0004      	movs	r4, r0
 800117c:	0fe8      	lsrs	r0, r5, #31
 800117e:	4683      	mov	fp, r0
 8001180:	0309      	lsls	r1, r1, #12
 8001182:	0fd8      	lsrs	r0, r3, #31
 8001184:	0b09      	lsrs	r1, r1, #12
 8001186:	4682      	mov	sl, r0
 8001188:	4819      	ldr	r0, [pc, #100]	@ (80011f0 <__eqdf2+0x84>)
 800118a:	468c      	mov	ip, r1
 800118c:	031f      	lsls	r7, r3, #12
 800118e:	0069      	lsls	r1, r5, #1
 8001190:	005e      	lsls	r6, r3, #1
 8001192:	0d49      	lsrs	r1, r1, #21
 8001194:	0b3f      	lsrs	r7, r7, #12
 8001196:	0d76      	lsrs	r6, r6, #21
 8001198:	4281      	cmp	r1, r0
 800119a:	d018      	beq.n	80011ce <__eqdf2+0x62>
 800119c:	4286      	cmp	r6, r0
 800119e:	d00f      	beq.n	80011c0 <__eqdf2+0x54>
 80011a0:	2001      	movs	r0, #1
 80011a2:	42b1      	cmp	r1, r6
 80011a4:	d10d      	bne.n	80011c2 <__eqdf2+0x56>
 80011a6:	45bc      	cmp	ip, r7
 80011a8:	d10b      	bne.n	80011c2 <__eqdf2+0x56>
 80011aa:	4294      	cmp	r4, r2
 80011ac:	d109      	bne.n	80011c2 <__eqdf2+0x56>
 80011ae:	45d3      	cmp	fp, sl
 80011b0:	d01c      	beq.n	80011ec <__eqdf2+0x80>
 80011b2:	2900      	cmp	r1, #0
 80011b4:	d105      	bne.n	80011c2 <__eqdf2+0x56>
 80011b6:	4660      	mov	r0, ip
 80011b8:	4320      	orrs	r0, r4
 80011ba:	1e43      	subs	r3, r0, #1
 80011bc:	4198      	sbcs	r0, r3
 80011be:	e000      	b.n	80011c2 <__eqdf2+0x56>
 80011c0:	2001      	movs	r0, #1
 80011c2:	bcf0      	pop	{r4, r5, r6, r7}
 80011c4:	46bb      	mov	fp, r7
 80011c6:	46b2      	mov	sl, r6
 80011c8:	46a9      	mov	r9, r5
 80011ca:	46a0      	mov	r8, r4
 80011cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ce:	2001      	movs	r0, #1
 80011d0:	428e      	cmp	r6, r1
 80011d2:	d1f6      	bne.n	80011c2 <__eqdf2+0x56>
 80011d4:	4661      	mov	r1, ip
 80011d6:	4339      	orrs	r1, r7
 80011d8:	000f      	movs	r7, r1
 80011da:	4317      	orrs	r7, r2
 80011dc:	4327      	orrs	r7, r4
 80011de:	d1f0      	bne.n	80011c2 <__eqdf2+0x56>
 80011e0:	465b      	mov	r3, fp
 80011e2:	4652      	mov	r2, sl
 80011e4:	1a98      	subs	r0, r3, r2
 80011e6:	1e43      	subs	r3, r0, #1
 80011e8:	4198      	sbcs	r0, r3
 80011ea:	e7ea      	b.n	80011c2 <__eqdf2+0x56>
 80011ec:	2000      	movs	r0, #0
 80011ee:	e7e8      	b.n	80011c2 <__eqdf2+0x56>
 80011f0:	000007ff 	.word	0x000007ff

080011f4 <__gedf2>:
 80011f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011f6:	4657      	mov	r7, sl
 80011f8:	464e      	mov	r6, r9
 80011fa:	4645      	mov	r5, r8
 80011fc:	46de      	mov	lr, fp
 80011fe:	b5e0      	push	{r5, r6, r7, lr}
 8001200:	000d      	movs	r5, r1
 8001202:	030f      	lsls	r7, r1, #12
 8001204:	0b39      	lsrs	r1, r7, #12
 8001206:	b083      	sub	sp, #12
 8001208:	0004      	movs	r4, r0
 800120a:	4680      	mov	r8, r0
 800120c:	9101      	str	r1, [sp, #4]
 800120e:	0058      	lsls	r0, r3, #1
 8001210:	0fe9      	lsrs	r1, r5, #31
 8001212:	4f31      	ldr	r7, [pc, #196]	@ (80012d8 <__gedf2+0xe4>)
 8001214:	0d40      	lsrs	r0, r0, #21
 8001216:	468c      	mov	ip, r1
 8001218:	006e      	lsls	r6, r5, #1
 800121a:	0319      	lsls	r1, r3, #12
 800121c:	4682      	mov	sl, r0
 800121e:	4691      	mov	r9, r2
 8001220:	0d76      	lsrs	r6, r6, #21
 8001222:	0b09      	lsrs	r1, r1, #12
 8001224:	0fd8      	lsrs	r0, r3, #31
 8001226:	42be      	cmp	r6, r7
 8001228:	d01f      	beq.n	800126a <__gedf2+0x76>
 800122a:	45ba      	cmp	sl, r7
 800122c:	d00f      	beq.n	800124e <__gedf2+0x5a>
 800122e:	2e00      	cmp	r6, #0
 8001230:	d12f      	bne.n	8001292 <__gedf2+0x9e>
 8001232:	4655      	mov	r5, sl
 8001234:	9e01      	ldr	r6, [sp, #4]
 8001236:	4334      	orrs	r4, r6
 8001238:	2d00      	cmp	r5, #0
 800123a:	d127      	bne.n	800128c <__gedf2+0x98>
 800123c:	430a      	orrs	r2, r1
 800123e:	d03a      	beq.n	80012b6 <__gedf2+0xc2>
 8001240:	2c00      	cmp	r4, #0
 8001242:	d145      	bne.n	80012d0 <__gedf2+0xdc>
 8001244:	2800      	cmp	r0, #0
 8001246:	d11a      	bne.n	800127e <__gedf2+0x8a>
 8001248:	2001      	movs	r0, #1
 800124a:	4240      	negs	r0, r0
 800124c:	e017      	b.n	800127e <__gedf2+0x8a>
 800124e:	4311      	orrs	r1, r2
 8001250:	d13b      	bne.n	80012ca <__gedf2+0xd6>
 8001252:	2e00      	cmp	r6, #0
 8001254:	d102      	bne.n	800125c <__gedf2+0x68>
 8001256:	9f01      	ldr	r7, [sp, #4]
 8001258:	4327      	orrs	r7, r4
 800125a:	d0f3      	beq.n	8001244 <__gedf2+0x50>
 800125c:	4584      	cmp	ip, r0
 800125e:	d109      	bne.n	8001274 <__gedf2+0x80>
 8001260:	4663      	mov	r3, ip
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0f0      	beq.n	8001248 <__gedf2+0x54>
 8001266:	4660      	mov	r0, ip
 8001268:	e009      	b.n	800127e <__gedf2+0x8a>
 800126a:	9f01      	ldr	r7, [sp, #4]
 800126c:	4327      	orrs	r7, r4
 800126e:	d12c      	bne.n	80012ca <__gedf2+0xd6>
 8001270:	45b2      	cmp	sl, r6
 8001272:	d024      	beq.n	80012be <__gedf2+0xca>
 8001274:	4663      	mov	r3, ip
 8001276:	2002      	movs	r0, #2
 8001278:	3b01      	subs	r3, #1
 800127a:	4018      	ands	r0, r3
 800127c:	3801      	subs	r0, #1
 800127e:	b003      	add	sp, #12
 8001280:	bcf0      	pop	{r4, r5, r6, r7}
 8001282:	46bb      	mov	fp, r7
 8001284:	46b2      	mov	sl, r6
 8001286:	46a9      	mov	r9, r5
 8001288:	46a0      	mov	r8, r4
 800128a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800128c:	2c00      	cmp	r4, #0
 800128e:	d0d9      	beq.n	8001244 <__gedf2+0x50>
 8001290:	e7e4      	b.n	800125c <__gedf2+0x68>
 8001292:	4654      	mov	r4, sl
 8001294:	2c00      	cmp	r4, #0
 8001296:	d0ed      	beq.n	8001274 <__gedf2+0x80>
 8001298:	4584      	cmp	ip, r0
 800129a:	d1eb      	bne.n	8001274 <__gedf2+0x80>
 800129c:	4556      	cmp	r6, sl
 800129e:	dce9      	bgt.n	8001274 <__gedf2+0x80>
 80012a0:	dbde      	blt.n	8001260 <__gedf2+0x6c>
 80012a2:	9b01      	ldr	r3, [sp, #4]
 80012a4:	428b      	cmp	r3, r1
 80012a6:	d8e5      	bhi.n	8001274 <__gedf2+0x80>
 80012a8:	d1da      	bne.n	8001260 <__gedf2+0x6c>
 80012aa:	45c8      	cmp	r8, r9
 80012ac:	d8e2      	bhi.n	8001274 <__gedf2+0x80>
 80012ae:	2000      	movs	r0, #0
 80012b0:	45c8      	cmp	r8, r9
 80012b2:	d2e4      	bcs.n	800127e <__gedf2+0x8a>
 80012b4:	e7d4      	b.n	8001260 <__gedf2+0x6c>
 80012b6:	2000      	movs	r0, #0
 80012b8:	2c00      	cmp	r4, #0
 80012ba:	d0e0      	beq.n	800127e <__gedf2+0x8a>
 80012bc:	e7da      	b.n	8001274 <__gedf2+0x80>
 80012be:	4311      	orrs	r1, r2
 80012c0:	d103      	bne.n	80012ca <__gedf2+0xd6>
 80012c2:	4584      	cmp	ip, r0
 80012c4:	d1d6      	bne.n	8001274 <__gedf2+0x80>
 80012c6:	2000      	movs	r0, #0
 80012c8:	e7d9      	b.n	800127e <__gedf2+0x8a>
 80012ca:	2002      	movs	r0, #2
 80012cc:	4240      	negs	r0, r0
 80012ce:	e7d6      	b.n	800127e <__gedf2+0x8a>
 80012d0:	4584      	cmp	ip, r0
 80012d2:	d0e6      	beq.n	80012a2 <__gedf2+0xae>
 80012d4:	e7ce      	b.n	8001274 <__gedf2+0x80>
 80012d6:	46c0      	nop			@ (mov r8, r8)
 80012d8:	000007ff 	.word	0x000007ff

080012dc <__ledf2>:
 80012dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012de:	4657      	mov	r7, sl
 80012e0:	464e      	mov	r6, r9
 80012e2:	4645      	mov	r5, r8
 80012e4:	46de      	mov	lr, fp
 80012e6:	b5e0      	push	{r5, r6, r7, lr}
 80012e8:	000d      	movs	r5, r1
 80012ea:	030f      	lsls	r7, r1, #12
 80012ec:	0004      	movs	r4, r0
 80012ee:	4680      	mov	r8, r0
 80012f0:	0fe8      	lsrs	r0, r5, #31
 80012f2:	0b39      	lsrs	r1, r7, #12
 80012f4:	4684      	mov	ip, r0
 80012f6:	b083      	sub	sp, #12
 80012f8:	0058      	lsls	r0, r3, #1
 80012fa:	4f30      	ldr	r7, [pc, #192]	@ (80013bc <__ledf2+0xe0>)
 80012fc:	0d40      	lsrs	r0, r0, #21
 80012fe:	9101      	str	r1, [sp, #4]
 8001300:	031e      	lsls	r6, r3, #12
 8001302:	0069      	lsls	r1, r5, #1
 8001304:	4682      	mov	sl, r0
 8001306:	4691      	mov	r9, r2
 8001308:	0d49      	lsrs	r1, r1, #21
 800130a:	0b36      	lsrs	r6, r6, #12
 800130c:	0fd8      	lsrs	r0, r3, #31
 800130e:	42b9      	cmp	r1, r7
 8001310:	d020      	beq.n	8001354 <__ledf2+0x78>
 8001312:	45ba      	cmp	sl, r7
 8001314:	d00f      	beq.n	8001336 <__ledf2+0x5a>
 8001316:	2900      	cmp	r1, #0
 8001318:	d12b      	bne.n	8001372 <__ledf2+0x96>
 800131a:	9901      	ldr	r1, [sp, #4]
 800131c:	430c      	orrs	r4, r1
 800131e:	4651      	mov	r1, sl
 8001320:	2900      	cmp	r1, #0
 8001322:	d137      	bne.n	8001394 <__ledf2+0xb8>
 8001324:	4332      	orrs	r2, r6
 8001326:	d038      	beq.n	800139a <__ledf2+0xbe>
 8001328:	2c00      	cmp	r4, #0
 800132a:	d144      	bne.n	80013b6 <__ledf2+0xda>
 800132c:	2800      	cmp	r0, #0
 800132e:	d119      	bne.n	8001364 <__ledf2+0x88>
 8001330:	2001      	movs	r0, #1
 8001332:	4240      	negs	r0, r0
 8001334:	e016      	b.n	8001364 <__ledf2+0x88>
 8001336:	4316      	orrs	r6, r2
 8001338:	d113      	bne.n	8001362 <__ledf2+0x86>
 800133a:	2900      	cmp	r1, #0
 800133c:	d102      	bne.n	8001344 <__ledf2+0x68>
 800133e:	9f01      	ldr	r7, [sp, #4]
 8001340:	4327      	orrs	r7, r4
 8001342:	d0f3      	beq.n	800132c <__ledf2+0x50>
 8001344:	4584      	cmp	ip, r0
 8001346:	d020      	beq.n	800138a <__ledf2+0xae>
 8001348:	4663      	mov	r3, ip
 800134a:	2002      	movs	r0, #2
 800134c:	3b01      	subs	r3, #1
 800134e:	4018      	ands	r0, r3
 8001350:	3801      	subs	r0, #1
 8001352:	e007      	b.n	8001364 <__ledf2+0x88>
 8001354:	9f01      	ldr	r7, [sp, #4]
 8001356:	4327      	orrs	r7, r4
 8001358:	d103      	bne.n	8001362 <__ledf2+0x86>
 800135a:	458a      	cmp	sl, r1
 800135c:	d1f4      	bne.n	8001348 <__ledf2+0x6c>
 800135e:	4316      	orrs	r6, r2
 8001360:	d01f      	beq.n	80013a2 <__ledf2+0xc6>
 8001362:	2002      	movs	r0, #2
 8001364:	b003      	add	sp, #12
 8001366:	bcf0      	pop	{r4, r5, r6, r7}
 8001368:	46bb      	mov	fp, r7
 800136a:	46b2      	mov	sl, r6
 800136c:	46a9      	mov	r9, r5
 800136e:	46a0      	mov	r8, r4
 8001370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001372:	4654      	mov	r4, sl
 8001374:	2c00      	cmp	r4, #0
 8001376:	d0e7      	beq.n	8001348 <__ledf2+0x6c>
 8001378:	4584      	cmp	ip, r0
 800137a:	d1e5      	bne.n	8001348 <__ledf2+0x6c>
 800137c:	4551      	cmp	r1, sl
 800137e:	dce3      	bgt.n	8001348 <__ledf2+0x6c>
 8001380:	db03      	blt.n	800138a <__ledf2+0xae>
 8001382:	9b01      	ldr	r3, [sp, #4]
 8001384:	42b3      	cmp	r3, r6
 8001386:	d8df      	bhi.n	8001348 <__ledf2+0x6c>
 8001388:	d00f      	beq.n	80013aa <__ledf2+0xce>
 800138a:	4663      	mov	r3, ip
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0cf      	beq.n	8001330 <__ledf2+0x54>
 8001390:	4660      	mov	r0, ip
 8001392:	e7e7      	b.n	8001364 <__ledf2+0x88>
 8001394:	2c00      	cmp	r4, #0
 8001396:	d0c9      	beq.n	800132c <__ledf2+0x50>
 8001398:	e7d4      	b.n	8001344 <__ledf2+0x68>
 800139a:	2000      	movs	r0, #0
 800139c:	2c00      	cmp	r4, #0
 800139e:	d0e1      	beq.n	8001364 <__ledf2+0x88>
 80013a0:	e7d2      	b.n	8001348 <__ledf2+0x6c>
 80013a2:	4584      	cmp	ip, r0
 80013a4:	d1d0      	bne.n	8001348 <__ledf2+0x6c>
 80013a6:	2000      	movs	r0, #0
 80013a8:	e7dc      	b.n	8001364 <__ledf2+0x88>
 80013aa:	45c8      	cmp	r8, r9
 80013ac:	d8cc      	bhi.n	8001348 <__ledf2+0x6c>
 80013ae:	2000      	movs	r0, #0
 80013b0:	45c8      	cmp	r8, r9
 80013b2:	d2d7      	bcs.n	8001364 <__ledf2+0x88>
 80013b4:	e7e9      	b.n	800138a <__ledf2+0xae>
 80013b6:	4584      	cmp	ip, r0
 80013b8:	d0e3      	beq.n	8001382 <__ledf2+0xa6>
 80013ba:	e7c5      	b.n	8001348 <__ledf2+0x6c>
 80013bc:	000007ff 	.word	0x000007ff

080013c0 <__aeabi_dmul>:
 80013c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c2:	4657      	mov	r7, sl
 80013c4:	46de      	mov	lr, fp
 80013c6:	464e      	mov	r6, r9
 80013c8:	4645      	mov	r5, r8
 80013ca:	b5e0      	push	{r5, r6, r7, lr}
 80013cc:	001f      	movs	r7, r3
 80013ce:	030b      	lsls	r3, r1, #12
 80013d0:	0b1b      	lsrs	r3, r3, #12
 80013d2:	0016      	movs	r6, r2
 80013d4:	469a      	mov	sl, r3
 80013d6:	0fca      	lsrs	r2, r1, #31
 80013d8:	004b      	lsls	r3, r1, #1
 80013da:	0004      	movs	r4, r0
 80013dc:	4693      	mov	fp, r2
 80013de:	b087      	sub	sp, #28
 80013e0:	0d5b      	lsrs	r3, r3, #21
 80013e2:	d100      	bne.n	80013e6 <__aeabi_dmul+0x26>
 80013e4:	e0d5      	b.n	8001592 <__aeabi_dmul+0x1d2>
 80013e6:	4abb      	ldr	r2, [pc, #748]	@ (80016d4 <__aeabi_dmul+0x314>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d100      	bne.n	80013ee <__aeabi_dmul+0x2e>
 80013ec:	e0f8      	b.n	80015e0 <__aeabi_dmul+0x220>
 80013ee:	4651      	mov	r1, sl
 80013f0:	0f42      	lsrs	r2, r0, #29
 80013f2:	00c9      	lsls	r1, r1, #3
 80013f4:	430a      	orrs	r2, r1
 80013f6:	2180      	movs	r1, #128	@ 0x80
 80013f8:	0409      	lsls	r1, r1, #16
 80013fa:	4311      	orrs	r1, r2
 80013fc:	00c2      	lsls	r2, r0, #3
 80013fe:	4691      	mov	r9, r2
 8001400:	4ab5      	ldr	r2, [pc, #724]	@ (80016d8 <__aeabi_dmul+0x318>)
 8001402:	468a      	mov	sl, r1
 8001404:	189d      	adds	r5, r3, r2
 8001406:	2300      	movs	r3, #0
 8001408:	4698      	mov	r8, r3
 800140a:	9302      	str	r3, [sp, #8]
 800140c:	033c      	lsls	r4, r7, #12
 800140e:	007b      	lsls	r3, r7, #1
 8001410:	0ffa      	lsrs	r2, r7, #31
 8001412:	0030      	movs	r0, r6
 8001414:	0b24      	lsrs	r4, r4, #12
 8001416:	0d5b      	lsrs	r3, r3, #21
 8001418:	9200      	str	r2, [sp, #0]
 800141a:	d100      	bne.n	800141e <__aeabi_dmul+0x5e>
 800141c:	e096      	b.n	800154c <__aeabi_dmul+0x18c>
 800141e:	4aad      	ldr	r2, [pc, #692]	@ (80016d4 <__aeabi_dmul+0x314>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d031      	beq.n	8001488 <__aeabi_dmul+0xc8>
 8001424:	0f72      	lsrs	r2, r6, #29
 8001426:	00e4      	lsls	r4, r4, #3
 8001428:	4322      	orrs	r2, r4
 800142a:	2480      	movs	r4, #128	@ 0x80
 800142c:	0424      	lsls	r4, r4, #16
 800142e:	4314      	orrs	r4, r2
 8001430:	4aa9      	ldr	r2, [pc, #676]	@ (80016d8 <__aeabi_dmul+0x318>)
 8001432:	00f0      	lsls	r0, r6, #3
 8001434:	4694      	mov	ip, r2
 8001436:	4463      	add	r3, ip
 8001438:	195b      	adds	r3, r3, r5
 800143a:	1c5a      	adds	r2, r3, #1
 800143c:	9201      	str	r2, [sp, #4]
 800143e:	4642      	mov	r2, r8
 8001440:	2600      	movs	r6, #0
 8001442:	2a0a      	cmp	r2, #10
 8001444:	dc42      	bgt.n	80014cc <__aeabi_dmul+0x10c>
 8001446:	465a      	mov	r2, fp
 8001448:	9900      	ldr	r1, [sp, #0]
 800144a:	404a      	eors	r2, r1
 800144c:	4693      	mov	fp, r2
 800144e:	4642      	mov	r2, r8
 8001450:	2a02      	cmp	r2, #2
 8001452:	dc32      	bgt.n	80014ba <__aeabi_dmul+0xfa>
 8001454:	3a01      	subs	r2, #1
 8001456:	2a01      	cmp	r2, #1
 8001458:	d900      	bls.n	800145c <__aeabi_dmul+0x9c>
 800145a:	e149      	b.n	80016f0 <__aeabi_dmul+0x330>
 800145c:	2e02      	cmp	r6, #2
 800145e:	d100      	bne.n	8001462 <__aeabi_dmul+0xa2>
 8001460:	e0ca      	b.n	80015f8 <__aeabi_dmul+0x238>
 8001462:	2e01      	cmp	r6, #1
 8001464:	d13d      	bne.n	80014e2 <__aeabi_dmul+0x122>
 8001466:	2300      	movs	r3, #0
 8001468:	2400      	movs	r4, #0
 800146a:	2200      	movs	r2, #0
 800146c:	0010      	movs	r0, r2
 800146e:	465a      	mov	r2, fp
 8001470:	051b      	lsls	r3, r3, #20
 8001472:	4323      	orrs	r3, r4
 8001474:	07d2      	lsls	r2, r2, #31
 8001476:	4313      	orrs	r3, r2
 8001478:	0019      	movs	r1, r3
 800147a:	b007      	add	sp, #28
 800147c:	bcf0      	pop	{r4, r5, r6, r7}
 800147e:	46bb      	mov	fp, r7
 8001480:	46b2      	mov	sl, r6
 8001482:	46a9      	mov	r9, r5
 8001484:	46a0      	mov	r8, r4
 8001486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001488:	4b92      	ldr	r3, [pc, #584]	@ (80016d4 <__aeabi_dmul+0x314>)
 800148a:	4326      	orrs	r6, r4
 800148c:	18eb      	adds	r3, r5, r3
 800148e:	2e00      	cmp	r6, #0
 8001490:	d100      	bne.n	8001494 <__aeabi_dmul+0xd4>
 8001492:	e0bb      	b.n	800160c <__aeabi_dmul+0x24c>
 8001494:	2203      	movs	r2, #3
 8001496:	4641      	mov	r1, r8
 8001498:	4311      	orrs	r1, r2
 800149a:	465a      	mov	r2, fp
 800149c:	4688      	mov	r8, r1
 800149e:	9900      	ldr	r1, [sp, #0]
 80014a0:	404a      	eors	r2, r1
 80014a2:	2180      	movs	r1, #128	@ 0x80
 80014a4:	0109      	lsls	r1, r1, #4
 80014a6:	468c      	mov	ip, r1
 80014a8:	0029      	movs	r1, r5
 80014aa:	4461      	add	r1, ip
 80014ac:	9101      	str	r1, [sp, #4]
 80014ae:	4641      	mov	r1, r8
 80014b0:	290a      	cmp	r1, #10
 80014b2:	dd00      	ble.n	80014b6 <__aeabi_dmul+0xf6>
 80014b4:	e233      	b.n	800191e <__aeabi_dmul+0x55e>
 80014b6:	4693      	mov	fp, r2
 80014b8:	2603      	movs	r6, #3
 80014ba:	4642      	mov	r2, r8
 80014bc:	2701      	movs	r7, #1
 80014be:	4097      	lsls	r7, r2
 80014c0:	21a6      	movs	r1, #166	@ 0xa6
 80014c2:	003a      	movs	r2, r7
 80014c4:	00c9      	lsls	r1, r1, #3
 80014c6:	400a      	ands	r2, r1
 80014c8:	420f      	tst	r7, r1
 80014ca:	d031      	beq.n	8001530 <__aeabi_dmul+0x170>
 80014cc:	9e02      	ldr	r6, [sp, #8]
 80014ce:	2e02      	cmp	r6, #2
 80014d0:	d100      	bne.n	80014d4 <__aeabi_dmul+0x114>
 80014d2:	e235      	b.n	8001940 <__aeabi_dmul+0x580>
 80014d4:	2e03      	cmp	r6, #3
 80014d6:	d100      	bne.n	80014da <__aeabi_dmul+0x11a>
 80014d8:	e1d2      	b.n	8001880 <__aeabi_dmul+0x4c0>
 80014da:	4654      	mov	r4, sl
 80014dc:	4648      	mov	r0, r9
 80014de:	2e01      	cmp	r6, #1
 80014e0:	d0c1      	beq.n	8001466 <__aeabi_dmul+0xa6>
 80014e2:	9a01      	ldr	r2, [sp, #4]
 80014e4:	4b7d      	ldr	r3, [pc, #500]	@ (80016dc <__aeabi_dmul+0x31c>)
 80014e6:	4694      	mov	ip, r2
 80014e8:	4463      	add	r3, ip
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	dc00      	bgt.n	80014f0 <__aeabi_dmul+0x130>
 80014ee:	e0c0      	b.n	8001672 <__aeabi_dmul+0x2b2>
 80014f0:	0742      	lsls	r2, r0, #29
 80014f2:	d009      	beq.n	8001508 <__aeabi_dmul+0x148>
 80014f4:	220f      	movs	r2, #15
 80014f6:	4002      	ands	r2, r0
 80014f8:	2a04      	cmp	r2, #4
 80014fa:	d005      	beq.n	8001508 <__aeabi_dmul+0x148>
 80014fc:	1d02      	adds	r2, r0, #4
 80014fe:	4282      	cmp	r2, r0
 8001500:	4180      	sbcs	r0, r0
 8001502:	4240      	negs	r0, r0
 8001504:	1824      	adds	r4, r4, r0
 8001506:	0010      	movs	r0, r2
 8001508:	01e2      	lsls	r2, r4, #7
 800150a:	d506      	bpl.n	800151a <__aeabi_dmul+0x15a>
 800150c:	4b74      	ldr	r3, [pc, #464]	@ (80016e0 <__aeabi_dmul+0x320>)
 800150e:	9a01      	ldr	r2, [sp, #4]
 8001510:	401c      	ands	r4, r3
 8001512:	2380      	movs	r3, #128	@ 0x80
 8001514:	4694      	mov	ip, r2
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	4463      	add	r3, ip
 800151a:	4a72      	ldr	r2, [pc, #456]	@ (80016e4 <__aeabi_dmul+0x324>)
 800151c:	4293      	cmp	r3, r2
 800151e:	dc6b      	bgt.n	80015f8 <__aeabi_dmul+0x238>
 8001520:	0762      	lsls	r2, r4, #29
 8001522:	08c0      	lsrs	r0, r0, #3
 8001524:	0264      	lsls	r4, r4, #9
 8001526:	055b      	lsls	r3, r3, #21
 8001528:	4302      	orrs	r2, r0
 800152a:	0b24      	lsrs	r4, r4, #12
 800152c:	0d5b      	lsrs	r3, r3, #21
 800152e:	e79d      	b.n	800146c <__aeabi_dmul+0xac>
 8001530:	2190      	movs	r1, #144	@ 0x90
 8001532:	0089      	lsls	r1, r1, #2
 8001534:	420f      	tst	r7, r1
 8001536:	d163      	bne.n	8001600 <__aeabi_dmul+0x240>
 8001538:	2288      	movs	r2, #136	@ 0x88
 800153a:	423a      	tst	r2, r7
 800153c:	d100      	bne.n	8001540 <__aeabi_dmul+0x180>
 800153e:	e0d7      	b.n	80016f0 <__aeabi_dmul+0x330>
 8001540:	9b00      	ldr	r3, [sp, #0]
 8001542:	46a2      	mov	sl, r4
 8001544:	469b      	mov	fp, r3
 8001546:	4681      	mov	r9, r0
 8001548:	9602      	str	r6, [sp, #8]
 800154a:	e7bf      	b.n	80014cc <__aeabi_dmul+0x10c>
 800154c:	0023      	movs	r3, r4
 800154e:	4333      	orrs	r3, r6
 8001550:	d100      	bne.n	8001554 <__aeabi_dmul+0x194>
 8001552:	e07f      	b.n	8001654 <__aeabi_dmul+0x294>
 8001554:	2c00      	cmp	r4, #0
 8001556:	d100      	bne.n	800155a <__aeabi_dmul+0x19a>
 8001558:	e1ad      	b.n	80018b6 <__aeabi_dmul+0x4f6>
 800155a:	0020      	movs	r0, r4
 800155c:	f000 fe22 	bl	80021a4 <__clzsi2>
 8001560:	0002      	movs	r2, r0
 8001562:	0003      	movs	r3, r0
 8001564:	3a0b      	subs	r2, #11
 8001566:	201d      	movs	r0, #29
 8001568:	0019      	movs	r1, r3
 800156a:	1a82      	subs	r2, r0, r2
 800156c:	0030      	movs	r0, r6
 800156e:	3908      	subs	r1, #8
 8001570:	40d0      	lsrs	r0, r2
 8001572:	408c      	lsls	r4, r1
 8001574:	4304      	orrs	r4, r0
 8001576:	0030      	movs	r0, r6
 8001578:	4088      	lsls	r0, r1
 800157a:	4a5b      	ldr	r2, [pc, #364]	@ (80016e8 <__aeabi_dmul+0x328>)
 800157c:	1aeb      	subs	r3, r5, r3
 800157e:	4694      	mov	ip, r2
 8001580:	4463      	add	r3, ip
 8001582:	1c5a      	adds	r2, r3, #1
 8001584:	9201      	str	r2, [sp, #4]
 8001586:	4642      	mov	r2, r8
 8001588:	2600      	movs	r6, #0
 800158a:	2a0a      	cmp	r2, #10
 800158c:	dc00      	bgt.n	8001590 <__aeabi_dmul+0x1d0>
 800158e:	e75a      	b.n	8001446 <__aeabi_dmul+0x86>
 8001590:	e79c      	b.n	80014cc <__aeabi_dmul+0x10c>
 8001592:	4653      	mov	r3, sl
 8001594:	4303      	orrs	r3, r0
 8001596:	4699      	mov	r9, r3
 8001598:	d054      	beq.n	8001644 <__aeabi_dmul+0x284>
 800159a:	4653      	mov	r3, sl
 800159c:	2b00      	cmp	r3, #0
 800159e:	d100      	bne.n	80015a2 <__aeabi_dmul+0x1e2>
 80015a0:	e177      	b.n	8001892 <__aeabi_dmul+0x4d2>
 80015a2:	4650      	mov	r0, sl
 80015a4:	f000 fdfe 	bl	80021a4 <__clzsi2>
 80015a8:	230b      	movs	r3, #11
 80015aa:	425b      	negs	r3, r3
 80015ac:	469c      	mov	ip, r3
 80015ae:	0002      	movs	r2, r0
 80015b0:	4484      	add	ip, r0
 80015b2:	0011      	movs	r1, r2
 80015b4:	4650      	mov	r0, sl
 80015b6:	3908      	subs	r1, #8
 80015b8:	4088      	lsls	r0, r1
 80015ba:	231d      	movs	r3, #29
 80015bc:	4680      	mov	r8, r0
 80015be:	4660      	mov	r0, ip
 80015c0:	1a1b      	subs	r3, r3, r0
 80015c2:	0020      	movs	r0, r4
 80015c4:	40d8      	lsrs	r0, r3
 80015c6:	0003      	movs	r3, r0
 80015c8:	4640      	mov	r0, r8
 80015ca:	4303      	orrs	r3, r0
 80015cc:	469a      	mov	sl, r3
 80015ce:	0023      	movs	r3, r4
 80015d0:	408b      	lsls	r3, r1
 80015d2:	4699      	mov	r9, r3
 80015d4:	2300      	movs	r3, #0
 80015d6:	4d44      	ldr	r5, [pc, #272]	@ (80016e8 <__aeabi_dmul+0x328>)
 80015d8:	4698      	mov	r8, r3
 80015da:	1aad      	subs	r5, r5, r2
 80015dc:	9302      	str	r3, [sp, #8]
 80015de:	e715      	b.n	800140c <__aeabi_dmul+0x4c>
 80015e0:	4652      	mov	r2, sl
 80015e2:	4302      	orrs	r2, r0
 80015e4:	4691      	mov	r9, r2
 80015e6:	d126      	bne.n	8001636 <__aeabi_dmul+0x276>
 80015e8:	2200      	movs	r2, #0
 80015ea:	001d      	movs	r5, r3
 80015ec:	2302      	movs	r3, #2
 80015ee:	4692      	mov	sl, r2
 80015f0:	3208      	adds	r2, #8
 80015f2:	4690      	mov	r8, r2
 80015f4:	9302      	str	r3, [sp, #8]
 80015f6:	e709      	b.n	800140c <__aeabi_dmul+0x4c>
 80015f8:	2400      	movs	r4, #0
 80015fa:	2200      	movs	r2, #0
 80015fc:	4b35      	ldr	r3, [pc, #212]	@ (80016d4 <__aeabi_dmul+0x314>)
 80015fe:	e735      	b.n	800146c <__aeabi_dmul+0xac>
 8001600:	2300      	movs	r3, #0
 8001602:	2480      	movs	r4, #128	@ 0x80
 8001604:	469b      	mov	fp, r3
 8001606:	0324      	lsls	r4, r4, #12
 8001608:	4b32      	ldr	r3, [pc, #200]	@ (80016d4 <__aeabi_dmul+0x314>)
 800160a:	e72f      	b.n	800146c <__aeabi_dmul+0xac>
 800160c:	2202      	movs	r2, #2
 800160e:	4641      	mov	r1, r8
 8001610:	4311      	orrs	r1, r2
 8001612:	2280      	movs	r2, #128	@ 0x80
 8001614:	0112      	lsls	r2, r2, #4
 8001616:	4694      	mov	ip, r2
 8001618:	002a      	movs	r2, r5
 800161a:	4462      	add	r2, ip
 800161c:	4688      	mov	r8, r1
 800161e:	9201      	str	r2, [sp, #4]
 8001620:	290a      	cmp	r1, #10
 8001622:	dd00      	ble.n	8001626 <__aeabi_dmul+0x266>
 8001624:	e752      	b.n	80014cc <__aeabi_dmul+0x10c>
 8001626:	465a      	mov	r2, fp
 8001628:	2000      	movs	r0, #0
 800162a:	9900      	ldr	r1, [sp, #0]
 800162c:	0004      	movs	r4, r0
 800162e:	404a      	eors	r2, r1
 8001630:	4693      	mov	fp, r2
 8001632:	2602      	movs	r6, #2
 8001634:	e70b      	b.n	800144e <__aeabi_dmul+0x8e>
 8001636:	220c      	movs	r2, #12
 8001638:	001d      	movs	r5, r3
 800163a:	2303      	movs	r3, #3
 800163c:	4681      	mov	r9, r0
 800163e:	4690      	mov	r8, r2
 8001640:	9302      	str	r3, [sp, #8]
 8001642:	e6e3      	b.n	800140c <__aeabi_dmul+0x4c>
 8001644:	2300      	movs	r3, #0
 8001646:	469a      	mov	sl, r3
 8001648:	3304      	adds	r3, #4
 800164a:	4698      	mov	r8, r3
 800164c:	3b03      	subs	r3, #3
 800164e:	2500      	movs	r5, #0
 8001650:	9302      	str	r3, [sp, #8]
 8001652:	e6db      	b.n	800140c <__aeabi_dmul+0x4c>
 8001654:	4642      	mov	r2, r8
 8001656:	3301      	adds	r3, #1
 8001658:	431a      	orrs	r2, r3
 800165a:	002b      	movs	r3, r5
 800165c:	4690      	mov	r8, r2
 800165e:	1c5a      	adds	r2, r3, #1
 8001660:	9201      	str	r2, [sp, #4]
 8001662:	4642      	mov	r2, r8
 8001664:	2400      	movs	r4, #0
 8001666:	2000      	movs	r0, #0
 8001668:	2601      	movs	r6, #1
 800166a:	2a0a      	cmp	r2, #10
 800166c:	dc00      	bgt.n	8001670 <__aeabi_dmul+0x2b0>
 800166e:	e6ea      	b.n	8001446 <__aeabi_dmul+0x86>
 8001670:	e72c      	b.n	80014cc <__aeabi_dmul+0x10c>
 8001672:	2201      	movs	r2, #1
 8001674:	1ad2      	subs	r2, r2, r3
 8001676:	2a38      	cmp	r2, #56	@ 0x38
 8001678:	dd00      	ble.n	800167c <__aeabi_dmul+0x2bc>
 800167a:	e6f4      	b.n	8001466 <__aeabi_dmul+0xa6>
 800167c:	2a1f      	cmp	r2, #31
 800167e:	dc00      	bgt.n	8001682 <__aeabi_dmul+0x2c2>
 8001680:	e12a      	b.n	80018d8 <__aeabi_dmul+0x518>
 8001682:	211f      	movs	r1, #31
 8001684:	4249      	negs	r1, r1
 8001686:	1acb      	subs	r3, r1, r3
 8001688:	0021      	movs	r1, r4
 800168a:	40d9      	lsrs	r1, r3
 800168c:	000b      	movs	r3, r1
 800168e:	2a20      	cmp	r2, #32
 8001690:	d005      	beq.n	800169e <__aeabi_dmul+0x2de>
 8001692:	4a16      	ldr	r2, [pc, #88]	@ (80016ec <__aeabi_dmul+0x32c>)
 8001694:	9d01      	ldr	r5, [sp, #4]
 8001696:	4694      	mov	ip, r2
 8001698:	4465      	add	r5, ip
 800169a:	40ac      	lsls	r4, r5
 800169c:	4320      	orrs	r0, r4
 800169e:	1e42      	subs	r2, r0, #1
 80016a0:	4190      	sbcs	r0, r2
 80016a2:	4318      	orrs	r0, r3
 80016a4:	2307      	movs	r3, #7
 80016a6:	0019      	movs	r1, r3
 80016a8:	2400      	movs	r4, #0
 80016aa:	4001      	ands	r1, r0
 80016ac:	4203      	tst	r3, r0
 80016ae:	d00c      	beq.n	80016ca <__aeabi_dmul+0x30a>
 80016b0:	230f      	movs	r3, #15
 80016b2:	4003      	ands	r3, r0
 80016b4:	2b04      	cmp	r3, #4
 80016b6:	d100      	bne.n	80016ba <__aeabi_dmul+0x2fa>
 80016b8:	e140      	b.n	800193c <__aeabi_dmul+0x57c>
 80016ba:	1d03      	adds	r3, r0, #4
 80016bc:	4283      	cmp	r3, r0
 80016be:	41a4      	sbcs	r4, r4
 80016c0:	0018      	movs	r0, r3
 80016c2:	4264      	negs	r4, r4
 80016c4:	0761      	lsls	r1, r4, #29
 80016c6:	0264      	lsls	r4, r4, #9
 80016c8:	0b24      	lsrs	r4, r4, #12
 80016ca:	08c2      	lsrs	r2, r0, #3
 80016cc:	2300      	movs	r3, #0
 80016ce:	430a      	orrs	r2, r1
 80016d0:	e6cc      	b.n	800146c <__aeabi_dmul+0xac>
 80016d2:	46c0      	nop			@ (mov r8, r8)
 80016d4:	000007ff 	.word	0x000007ff
 80016d8:	fffffc01 	.word	0xfffffc01
 80016dc:	000003ff 	.word	0x000003ff
 80016e0:	feffffff 	.word	0xfeffffff
 80016e4:	000007fe 	.word	0x000007fe
 80016e8:	fffffc0d 	.word	0xfffffc0d
 80016ec:	0000043e 	.word	0x0000043e
 80016f0:	4649      	mov	r1, r9
 80016f2:	464a      	mov	r2, r9
 80016f4:	0409      	lsls	r1, r1, #16
 80016f6:	0c09      	lsrs	r1, r1, #16
 80016f8:	000d      	movs	r5, r1
 80016fa:	0c16      	lsrs	r6, r2, #16
 80016fc:	0c02      	lsrs	r2, r0, #16
 80016fe:	0400      	lsls	r0, r0, #16
 8001700:	0c00      	lsrs	r0, r0, #16
 8001702:	4345      	muls	r5, r0
 8001704:	46ac      	mov	ip, r5
 8001706:	0005      	movs	r5, r0
 8001708:	4375      	muls	r5, r6
 800170a:	46a8      	mov	r8, r5
 800170c:	0015      	movs	r5, r2
 800170e:	000f      	movs	r7, r1
 8001710:	4375      	muls	r5, r6
 8001712:	9200      	str	r2, [sp, #0]
 8001714:	9502      	str	r5, [sp, #8]
 8001716:	002a      	movs	r2, r5
 8001718:	9d00      	ldr	r5, [sp, #0]
 800171a:	436f      	muls	r7, r5
 800171c:	4665      	mov	r5, ip
 800171e:	0c2d      	lsrs	r5, r5, #16
 8001720:	46a9      	mov	r9, r5
 8001722:	4447      	add	r7, r8
 8001724:	444f      	add	r7, r9
 8001726:	45b8      	cmp	r8, r7
 8001728:	d905      	bls.n	8001736 <__aeabi_dmul+0x376>
 800172a:	0015      	movs	r5, r2
 800172c:	2280      	movs	r2, #128	@ 0x80
 800172e:	0252      	lsls	r2, r2, #9
 8001730:	4690      	mov	r8, r2
 8001732:	4445      	add	r5, r8
 8001734:	9502      	str	r5, [sp, #8]
 8001736:	0c3d      	lsrs	r5, r7, #16
 8001738:	9503      	str	r5, [sp, #12]
 800173a:	4665      	mov	r5, ip
 800173c:	042d      	lsls	r5, r5, #16
 800173e:	043f      	lsls	r7, r7, #16
 8001740:	0c2d      	lsrs	r5, r5, #16
 8001742:	46ac      	mov	ip, r5
 8001744:	003d      	movs	r5, r7
 8001746:	4465      	add	r5, ip
 8001748:	9504      	str	r5, [sp, #16]
 800174a:	0c25      	lsrs	r5, r4, #16
 800174c:	0424      	lsls	r4, r4, #16
 800174e:	0c24      	lsrs	r4, r4, #16
 8001750:	46ac      	mov	ip, r5
 8001752:	0025      	movs	r5, r4
 8001754:	4375      	muls	r5, r6
 8001756:	46a8      	mov	r8, r5
 8001758:	4665      	mov	r5, ip
 800175a:	000f      	movs	r7, r1
 800175c:	4369      	muls	r1, r5
 800175e:	4441      	add	r1, r8
 8001760:	4689      	mov	r9, r1
 8001762:	4367      	muls	r7, r4
 8001764:	0c39      	lsrs	r1, r7, #16
 8001766:	4449      	add	r1, r9
 8001768:	436e      	muls	r6, r5
 800176a:	4588      	cmp	r8, r1
 800176c:	d903      	bls.n	8001776 <__aeabi_dmul+0x3b6>
 800176e:	2280      	movs	r2, #128	@ 0x80
 8001770:	0252      	lsls	r2, r2, #9
 8001772:	4690      	mov	r8, r2
 8001774:	4446      	add	r6, r8
 8001776:	0c0d      	lsrs	r5, r1, #16
 8001778:	46a8      	mov	r8, r5
 800177a:	0035      	movs	r5, r6
 800177c:	4445      	add	r5, r8
 800177e:	9505      	str	r5, [sp, #20]
 8001780:	9d03      	ldr	r5, [sp, #12]
 8001782:	043f      	lsls	r7, r7, #16
 8001784:	46a8      	mov	r8, r5
 8001786:	0c3f      	lsrs	r7, r7, #16
 8001788:	0409      	lsls	r1, r1, #16
 800178a:	19c9      	adds	r1, r1, r7
 800178c:	4488      	add	r8, r1
 800178e:	4645      	mov	r5, r8
 8001790:	9503      	str	r5, [sp, #12]
 8001792:	4655      	mov	r5, sl
 8001794:	042e      	lsls	r6, r5, #16
 8001796:	0c36      	lsrs	r6, r6, #16
 8001798:	0c2f      	lsrs	r7, r5, #16
 800179a:	0035      	movs	r5, r6
 800179c:	4345      	muls	r5, r0
 800179e:	4378      	muls	r0, r7
 80017a0:	4681      	mov	r9, r0
 80017a2:	0038      	movs	r0, r7
 80017a4:	46a8      	mov	r8, r5
 80017a6:	0c2d      	lsrs	r5, r5, #16
 80017a8:	46aa      	mov	sl, r5
 80017aa:	9a00      	ldr	r2, [sp, #0]
 80017ac:	4350      	muls	r0, r2
 80017ae:	4372      	muls	r2, r6
 80017b0:	444a      	add	r2, r9
 80017b2:	4452      	add	r2, sl
 80017b4:	4591      	cmp	r9, r2
 80017b6:	d903      	bls.n	80017c0 <__aeabi_dmul+0x400>
 80017b8:	2580      	movs	r5, #128	@ 0x80
 80017ba:	026d      	lsls	r5, r5, #9
 80017bc:	46a9      	mov	r9, r5
 80017be:	4448      	add	r0, r9
 80017c0:	0c15      	lsrs	r5, r2, #16
 80017c2:	46a9      	mov	r9, r5
 80017c4:	4645      	mov	r5, r8
 80017c6:	042d      	lsls	r5, r5, #16
 80017c8:	0c2d      	lsrs	r5, r5, #16
 80017ca:	46a8      	mov	r8, r5
 80017cc:	4665      	mov	r5, ip
 80017ce:	437d      	muls	r5, r7
 80017d0:	0412      	lsls	r2, r2, #16
 80017d2:	4448      	add	r0, r9
 80017d4:	4490      	add	r8, r2
 80017d6:	46a9      	mov	r9, r5
 80017d8:	0032      	movs	r2, r6
 80017da:	4665      	mov	r5, ip
 80017dc:	4362      	muls	r2, r4
 80017de:	436e      	muls	r6, r5
 80017e0:	437c      	muls	r4, r7
 80017e2:	0c17      	lsrs	r7, r2, #16
 80017e4:	1936      	adds	r6, r6, r4
 80017e6:	19bf      	adds	r7, r7, r6
 80017e8:	42bc      	cmp	r4, r7
 80017ea:	d903      	bls.n	80017f4 <__aeabi_dmul+0x434>
 80017ec:	2480      	movs	r4, #128	@ 0x80
 80017ee:	0264      	lsls	r4, r4, #9
 80017f0:	46a4      	mov	ip, r4
 80017f2:	44e1      	add	r9, ip
 80017f4:	9c02      	ldr	r4, [sp, #8]
 80017f6:	9e03      	ldr	r6, [sp, #12]
 80017f8:	46a4      	mov	ip, r4
 80017fa:	9d05      	ldr	r5, [sp, #20]
 80017fc:	4466      	add	r6, ip
 80017fe:	428e      	cmp	r6, r1
 8001800:	4189      	sbcs	r1, r1
 8001802:	46ac      	mov	ip, r5
 8001804:	0412      	lsls	r2, r2, #16
 8001806:	043c      	lsls	r4, r7, #16
 8001808:	0c12      	lsrs	r2, r2, #16
 800180a:	18a2      	adds	r2, r4, r2
 800180c:	4462      	add	r2, ip
 800180e:	4249      	negs	r1, r1
 8001810:	1854      	adds	r4, r2, r1
 8001812:	4446      	add	r6, r8
 8001814:	46a4      	mov	ip, r4
 8001816:	4546      	cmp	r6, r8
 8001818:	41a4      	sbcs	r4, r4
 800181a:	4682      	mov	sl, r0
 800181c:	4264      	negs	r4, r4
 800181e:	46a0      	mov	r8, r4
 8001820:	42aa      	cmp	r2, r5
 8001822:	4192      	sbcs	r2, r2
 8001824:	458c      	cmp	ip, r1
 8001826:	4189      	sbcs	r1, r1
 8001828:	44e2      	add	sl, ip
 800182a:	44d0      	add	r8, sl
 800182c:	4249      	negs	r1, r1
 800182e:	4252      	negs	r2, r2
 8001830:	430a      	orrs	r2, r1
 8001832:	45a0      	cmp	r8, r4
 8001834:	41a4      	sbcs	r4, r4
 8001836:	4582      	cmp	sl, r0
 8001838:	4189      	sbcs	r1, r1
 800183a:	4264      	negs	r4, r4
 800183c:	4249      	negs	r1, r1
 800183e:	430c      	orrs	r4, r1
 8001840:	4641      	mov	r1, r8
 8001842:	0c3f      	lsrs	r7, r7, #16
 8001844:	19d2      	adds	r2, r2, r7
 8001846:	1912      	adds	r2, r2, r4
 8001848:	0dcc      	lsrs	r4, r1, #23
 800184a:	9904      	ldr	r1, [sp, #16]
 800184c:	0270      	lsls	r0, r6, #9
 800184e:	4308      	orrs	r0, r1
 8001850:	1e41      	subs	r1, r0, #1
 8001852:	4188      	sbcs	r0, r1
 8001854:	4641      	mov	r1, r8
 8001856:	444a      	add	r2, r9
 8001858:	0df6      	lsrs	r6, r6, #23
 800185a:	0252      	lsls	r2, r2, #9
 800185c:	4330      	orrs	r0, r6
 800185e:	0249      	lsls	r1, r1, #9
 8001860:	4314      	orrs	r4, r2
 8001862:	4308      	orrs	r0, r1
 8001864:	01d2      	lsls	r2, r2, #7
 8001866:	d535      	bpl.n	80018d4 <__aeabi_dmul+0x514>
 8001868:	2201      	movs	r2, #1
 800186a:	0843      	lsrs	r3, r0, #1
 800186c:	4002      	ands	r2, r0
 800186e:	4313      	orrs	r3, r2
 8001870:	07e0      	lsls	r0, r4, #31
 8001872:	4318      	orrs	r0, r3
 8001874:	0864      	lsrs	r4, r4, #1
 8001876:	e634      	b.n	80014e2 <__aeabi_dmul+0x122>
 8001878:	9b00      	ldr	r3, [sp, #0]
 800187a:	46a2      	mov	sl, r4
 800187c:	469b      	mov	fp, r3
 800187e:	4681      	mov	r9, r0
 8001880:	2480      	movs	r4, #128	@ 0x80
 8001882:	4653      	mov	r3, sl
 8001884:	0324      	lsls	r4, r4, #12
 8001886:	431c      	orrs	r4, r3
 8001888:	0324      	lsls	r4, r4, #12
 800188a:	464a      	mov	r2, r9
 800188c:	4b2e      	ldr	r3, [pc, #184]	@ (8001948 <__aeabi_dmul+0x588>)
 800188e:	0b24      	lsrs	r4, r4, #12
 8001890:	e5ec      	b.n	800146c <__aeabi_dmul+0xac>
 8001892:	f000 fc87 	bl	80021a4 <__clzsi2>
 8001896:	2315      	movs	r3, #21
 8001898:	469c      	mov	ip, r3
 800189a:	4484      	add	ip, r0
 800189c:	0002      	movs	r2, r0
 800189e:	4663      	mov	r3, ip
 80018a0:	3220      	adds	r2, #32
 80018a2:	2b1c      	cmp	r3, #28
 80018a4:	dc00      	bgt.n	80018a8 <__aeabi_dmul+0x4e8>
 80018a6:	e684      	b.n	80015b2 <__aeabi_dmul+0x1f2>
 80018a8:	2300      	movs	r3, #0
 80018aa:	4699      	mov	r9, r3
 80018ac:	0023      	movs	r3, r4
 80018ae:	3808      	subs	r0, #8
 80018b0:	4083      	lsls	r3, r0
 80018b2:	469a      	mov	sl, r3
 80018b4:	e68e      	b.n	80015d4 <__aeabi_dmul+0x214>
 80018b6:	f000 fc75 	bl	80021a4 <__clzsi2>
 80018ba:	0002      	movs	r2, r0
 80018bc:	0003      	movs	r3, r0
 80018be:	3215      	adds	r2, #21
 80018c0:	3320      	adds	r3, #32
 80018c2:	2a1c      	cmp	r2, #28
 80018c4:	dc00      	bgt.n	80018c8 <__aeabi_dmul+0x508>
 80018c6:	e64e      	b.n	8001566 <__aeabi_dmul+0x1a6>
 80018c8:	0002      	movs	r2, r0
 80018ca:	0034      	movs	r4, r6
 80018cc:	3a08      	subs	r2, #8
 80018ce:	2000      	movs	r0, #0
 80018d0:	4094      	lsls	r4, r2
 80018d2:	e652      	b.n	800157a <__aeabi_dmul+0x1ba>
 80018d4:	9301      	str	r3, [sp, #4]
 80018d6:	e604      	b.n	80014e2 <__aeabi_dmul+0x122>
 80018d8:	4b1c      	ldr	r3, [pc, #112]	@ (800194c <__aeabi_dmul+0x58c>)
 80018da:	0021      	movs	r1, r4
 80018dc:	469c      	mov	ip, r3
 80018de:	0003      	movs	r3, r0
 80018e0:	9d01      	ldr	r5, [sp, #4]
 80018e2:	40d3      	lsrs	r3, r2
 80018e4:	4465      	add	r5, ip
 80018e6:	40a9      	lsls	r1, r5
 80018e8:	4319      	orrs	r1, r3
 80018ea:	0003      	movs	r3, r0
 80018ec:	40ab      	lsls	r3, r5
 80018ee:	1e58      	subs	r0, r3, #1
 80018f0:	4183      	sbcs	r3, r0
 80018f2:	4319      	orrs	r1, r3
 80018f4:	0008      	movs	r0, r1
 80018f6:	40d4      	lsrs	r4, r2
 80018f8:	074b      	lsls	r3, r1, #29
 80018fa:	d009      	beq.n	8001910 <__aeabi_dmul+0x550>
 80018fc:	230f      	movs	r3, #15
 80018fe:	400b      	ands	r3, r1
 8001900:	2b04      	cmp	r3, #4
 8001902:	d005      	beq.n	8001910 <__aeabi_dmul+0x550>
 8001904:	1d0b      	adds	r3, r1, #4
 8001906:	428b      	cmp	r3, r1
 8001908:	4180      	sbcs	r0, r0
 800190a:	4240      	negs	r0, r0
 800190c:	1824      	adds	r4, r4, r0
 800190e:	0018      	movs	r0, r3
 8001910:	0223      	lsls	r3, r4, #8
 8001912:	d400      	bmi.n	8001916 <__aeabi_dmul+0x556>
 8001914:	e6d6      	b.n	80016c4 <__aeabi_dmul+0x304>
 8001916:	2301      	movs	r3, #1
 8001918:	2400      	movs	r4, #0
 800191a:	2200      	movs	r2, #0
 800191c:	e5a6      	b.n	800146c <__aeabi_dmul+0xac>
 800191e:	290f      	cmp	r1, #15
 8001920:	d1aa      	bne.n	8001878 <__aeabi_dmul+0x4b8>
 8001922:	2380      	movs	r3, #128	@ 0x80
 8001924:	4652      	mov	r2, sl
 8001926:	031b      	lsls	r3, r3, #12
 8001928:	421a      	tst	r2, r3
 800192a:	d0a9      	beq.n	8001880 <__aeabi_dmul+0x4c0>
 800192c:	421c      	tst	r4, r3
 800192e:	d1a7      	bne.n	8001880 <__aeabi_dmul+0x4c0>
 8001930:	431c      	orrs	r4, r3
 8001932:	9b00      	ldr	r3, [sp, #0]
 8001934:	0002      	movs	r2, r0
 8001936:	469b      	mov	fp, r3
 8001938:	4b03      	ldr	r3, [pc, #12]	@ (8001948 <__aeabi_dmul+0x588>)
 800193a:	e597      	b.n	800146c <__aeabi_dmul+0xac>
 800193c:	2400      	movs	r4, #0
 800193e:	e6c1      	b.n	80016c4 <__aeabi_dmul+0x304>
 8001940:	2400      	movs	r4, #0
 8001942:	4b01      	ldr	r3, [pc, #4]	@ (8001948 <__aeabi_dmul+0x588>)
 8001944:	0022      	movs	r2, r4
 8001946:	e591      	b.n	800146c <__aeabi_dmul+0xac>
 8001948:	000007ff 	.word	0x000007ff
 800194c:	0000041e 	.word	0x0000041e

08001950 <__aeabi_dsub>:
 8001950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001952:	464e      	mov	r6, r9
 8001954:	4645      	mov	r5, r8
 8001956:	46de      	mov	lr, fp
 8001958:	4657      	mov	r7, sl
 800195a:	b5e0      	push	{r5, r6, r7, lr}
 800195c:	b085      	sub	sp, #20
 800195e:	9000      	str	r0, [sp, #0]
 8001960:	9101      	str	r1, [sp, #4]
 8001962:	030c      	lsls	r4, r1, #12
 8001964:	004f      	lsls	r7, r1, #1
 8001966:	0fce      	lsrs	r6, r1, #31
 8001968:	0a61      	lsrs	r1, r4, #9
 800196a:	9c00      	ldr	r4, [sp, #0]
 800196c:	46b0      	mov	r8, r6
 800196e:	0f64      	lsrs	r4, r4, #29
 8001970:	430c      	orrs	r4, r1
 8001972:	9900      	ldr	r1, [sp, #0]
 8001974:	0d7f      	lsrs	r7, r7, #21
 8001976:	00c8      	lsls	r0, r1, #3
 8001978:	0011      	movs	r1, r2
 800197a:	001a      	movs	r2, r3
 800197c:	031b      	lsls	r3, r3, #12
 800197e:	469c      	mov	ip, r3
 8001980:	9100      	str	r1, [sp, #0]
 8001982:	9201      	str	r2, [sp, #4]
 8001984:	0051      	lsls	r1, r2, #1
 8001986:	0d4b      	lsrs	r3, r1, #21
 8001988:	4699      	mov	r9, r3
 800198a:	9b01      	ldr	r3, [sp, #4]
 800198c:	9d00      	ldr	r5, [sp, #0]
 800198e:	0fd9      	lsrs	r1, r3, #31
 8001990:	4663      	mov	r3, ip
 8001992:	0f6a      	lsrs	r2, r5, #29
 8001994:	0a5b      	lsrs	r3, r3, #9
 8001996:	4313      	orrs	r3, r2
 8001998:	00ea      	lsls	r2, r5, #3
 800199a:	4694      	mov	ip, r2
 800199c:	4693      	mov	fp, r2
 800199e:	4ac1      	ldr	r2, [pc, #772]	@ (8001ca4 <__aeabi_dsub+0x354>)
 80019a0:	9003      	str	r0, [sp, #12]
 80019a2:	9302      	str	r3, [sp, #8]
 80019a4:	4591      	cmp	r9, r2
 80019a6:	d100      	bne.n	80019aa <__aeabi_dsub+0x5a>
 80019a8:	e0cd      	b.n	8001b46 <__aeabi_dsub+0x1f6>
 80019aa:	2501      	movs	r5, #1
 80019ac:	4069      	eors	r1, r5
 80019ae:	464d      	mov	r5, r9
 80019b0:	1b7d      	subs	r5, r7, r5
 80019b2:	46aa      	mov	sl, r5
 80019b4:	428e      	cmp	r6, r1
 80019b6:	d100      	bne.n	80019ba <__aeabi_dsub+0x6a>
 80019b8:	e080      	b.n	8001abc <__aeabi_dsub+0x16c>
 80019ba:	2d00      	cmp	r5, #0
 80019bc:	dc00      	bgt.n	80019c0 <__aeabi_dsub+0x70>
 80019be:	e335      	b.n	800202c <__aeabi_dsub+0x6dc>
 80019c0:	4649      	mov	r1, r9
 80019c2:	2900      	cmp	r1, #0
 80019c4:	d100      	bne.n	80019c8 <__aeabi_dsub+0x78>
 80019c6:	e0df      	b.n	8001b88 <__aeabi_dsub+0x238>
 80019c8:	4297      	cmp	r7, r2
 80019ca:	d100      	bne.n	80019ce <__aeabi_dsub+0x7e>
 80019cc:	e194      	b.n	8001cf8 <__aeabi_dsub+0x3a8>
 80019ce:	4652      	mov	r2, sl
 80019d0:	2501      	movs	r5, #1
 80019d2:	2a38      	cmp	r2, #56	@ 0x38
 80019d4:	dc19      	bgt.n	8001a0a <__aeabi_dsub+0xba>
 80019d6:	2280      	movs	r2, #128	@ 0x80
 80019d8:	9b02      	ldr	r3, [sp, #8]
 80019da:	0412      	lsls	r2, r2, #16
 80019dc:	4313      	orrs	r3, r2
 80019de:	9302      	str	r3, [sp, #8]
 80019e0:	4652      	mov	r2, sl
 80019e2:	2a1f      	cmp	r2, #31
 80019e4:	dd00      	ble.n	80019e8 <__aeabi_dsub+0x98>
 80019e6:	e1e3      	b.n	8001db0 <__aeabi_dsub+0x460>
 80019e8:	4653      	mov	r3, sl
 80019ea:	2220      	movs	r2, #32
 80019ec:	4661      	mov	r1, ip
 80019ee:	9d02      	ldr	r5, [sp, #8]
 80019f0:	1ad2      	subs	r2, r2, r3
 80019f2:	4095      	lsls	r5, r2
 80019f4:	40d9      	lsrs	r1, r3
 80019f6:	430d      	orrs	r5, r1
 80019f8:	4661      	mov	r1, ip
 80019fa:	4091      	lsls	r1, r2
 80019fc:	000a      	movs	r2, r1
 80019fe:	1e51      	subs	r1, r2, #1
 8001a00:	418a      	sbcs	r2, r1
 8001a02:	4315      	orrs	r5, r2
 8001a04:	9a02      	ldr	r2, [sp, #8]
 8001a06:	40da      	lsrs	r2, r3
 8001a08:	1aa4      	subs	r4, r4, r2
 8001a0a:	1b45      	subs	r5, r0, r5
 8001a0c:	42a8      	cmp	r0, r5
 8001a0e:	4180      	sbcs	r0, r0
 8001a10:	4240      	negs	r0, r0
 8001a12:	1a24      	subs	r4, r4, r0
 8001a14:	0223      	lsls	r3, r4, #8
 8001a16:	d400      	bmi.n	8001a1a <__aeabi_dsub+0xca>
 8001a18:	e13d      	b.n	8001c96 <__aeabi_dsub+0x346>
 8001a1a:	0264      	lsls	r4, r4, #9
 8001a1c:	0a64      	lsrs	r4, r4, #9
 8001a1e:	2c00      	cmp	r4, #0
 8001a20:	d100      	bne.n	8001a24 <__aeabi_dsub+0xd4>
 8001a22:	e147      	b.n	8001cb4 <__aeabi_dsub+0x364>
 8001a24:	0020      	movs	r0, r4
 8001a26:	f000 fbbd 	bl	80021a4 <__clzsi2>
 8001a2a:	0003      	movs	r3, r0
 8001a2c:	3b08      	subs	r3, #8
 8001a2e:	2120      	movs	r1, #32
 8001a30:	0028      	movs	r0, r5
 8001a32:	1aca      	subs	r2, r1, r3
 8001a34:	40d0      	lsrs	r0, r2
 8001a36:	409c      	lsls	r4, r3
 8001a38:	0002      	movs	r2, r0
 8001a3a:	409d      	lsls	r5, r3
 8001a3c:	4322      	orrs	r2, r4
 8001a3e:	429f      	cmp	r7, r3
 8001a40:	dd00      	ble.n	8001a44 <__aeabi_dsub+0xf4>
 8001a42:	e177      	b.n	8001d34 <__aeabi_dsub+0x3e4>
 8001a44:	1bd8      	subs	r0, r3, r7
 8001a46:	3001      	adds	r0, #1
 8001a48:	1a09      	subs	r1, r1, r0
 8001a4a:	002c      	movs	r4, r5
 8001a4c:	408d      	lsls	r5, r1
 8001a4e:	40c4      	lsrs	r4, r0
 8001a50:	1e6b      	subs	r3, r5, #1
 8001a52:	419d      	sbcs	r5, r3
 8001a54:	0013      	movs	r3, r2
 8001a56:	40c2      	lsrs	r2, r0
 8001a58:	408b      	lsls	r3, r1
 8001a5a:	4325      	orrs	r5, r4
 8001a5c:	2700      	movs	r7, #0
 8001a5e:	0014      	movs	r4, r2
 8001a60:	431d      	orrs	r5, r3
 8001a62:	076b      	lsls	r3, r5, #29
 8001a64:	d009      	beq.n	8001a7a <__aeabi_dsub+0x12a>
 8001a66:	230f      	movs	r3, #15
 8001a68:	402b      	ands	r3, r5
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	d005      	beq.n	8001a7a <__aeabi_dsub+0x12a>
 8001a6e:	1d2b      	adds	r3, r5, #4
 8001a70:	42ab      	cmp	r3, r5
 8001a72:	41ad      	sbcs	r5, r5
 8001a74:	426d      	negs	r5, r5
 8001a76:	1964      	adds	r4, r4, r5
 8001a78:	001d      	movs	r5, r3
 8001a7a:	0223      	lsls	r3, r4, #8
 8001a7c:	d400      	bmi.n	8001a80 <__aeabi_dsub+0x130>
 8001a7e:	e140      	b.n	8001d02 <__aeabi_dsub+0x3b2>
 8001a80:	4a88      	ldr	r2, [pc, #544]	@ (8001ca4 <__aeabi_dsub+0x354>)
 8001a82:	3701      	adds	r7, #1
 8001a84:	4297      	cmp	r7, r2
 8001a86:	d100      	bne.n	8001a8a <__aeabi_dsub+0x13a>
 8001a88:	e101      	b.n	8001c8e <__aeabi_dsub+0x33e>
 8001a8a:	2601      	movs	r6, #1
 8001a8c:	4643      	mov	r3, r8
 8001a8e:	4986      	ldr	r1, [pc, #536]	@ (8001ca8 <__aeabi_dsub+0x358>)
 8001a90:	08ed      	lsrs	r5, r5, #3
 8001a92:	4021      	ands	r1, r4
 8001a94:	074a      	lsls	r2, r1, #29
 8001a96:	432a      	orrs	r2, r5
 8001a98:	057c      	lsls	r4, r7, #21
 8001a9a:	024d      	lsls	r5, r1, #9
 8001a9c:	0b2d      	lsrs	r5, r5, #12
 8001a9e:	0d64      	lsrs	r4, r4, #21
 8001aa0:	401e      	ands	r6, r3
 8001aa2:	0524      	lsls	r4, r4, #20
 8001aa4:	432c      	orrs	r4, r5
 8001aa6:	07f6      	lsls	r6, r6, #31
 8001aa8:	4334      	orrs	r4, r6
 8001aaa:	0010      	movs	r0, r2
 8001aac:	0021      	movs	r1, r4
 8001aae:	b005      	add	sp, #20
 8001ab0:	bcf0      	pop	{r4, r5, r6, r7}
 8001ab2:	46bb      	mov	fp, r7
 8001ab4:	46b2      	mov	sl, r6
 8001ab6:	46a9      	mov	r9, r5
 8001ab8:	46a0      	mov	r8, r4
 8001aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001abc:	2d00      	cmp	r5, #0
 8001abe:	dc00      	bgt.n	8001ac2 <__aeabi_dsub+0x172>
 8001ac0:	e2d0      	b.n	8002064 <__aeabi_dsub+0x714>
 8001ac2:	4649      	mov	r1, r9
 8001ac4:	2900      	cmp	r1, #0
 8001ac6:	d000      	beq.n	8001aca <__aeabi_dsub+0x17a>
 8001ac8:	e0d4      	b.n	8001c74 <__aeabi_dsub+0x324>
 8001aca:	4661      	mov	r1, ip
 8001acc:	9b02      	ldr	r3, [sp, #8]
 8001ace:	4319      	orrs	r1, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dsub+0x184>
 8001ad2:	e12b      	b.n	8001d2c <__aeabi_dsub+0x3dc>
 8001ad4:	1e69      	subs	r1, r5, #1
 8001ad6:	2d01      	cmp	r5, #1
 8001ad8:	d100      	bne.n	8001adc <__aeabi_dsub+0x18c>
 8001ada:	e1d9      	b.n	8001e90 <__aeabi_dsub+0x540>
 8001adc:	4295      	cmp	r5, r2
 8001ade:	d100      	bne.n	8001ae2 <__aeabi_dsub+0x192>
 8001ae0:	e10a      	b.n	8001cf8 <__aeabi_dsub+0x3a8>
 8001ae2:	2501      	movs	r5, #1
 8001ae4:	2938      	cmp	r1, #56	@ 0x38
 8001ae6:	dc17      	bgt.n	8001b18 <__aeabi_dsub+0x1c8>
 8001ae8:	468a      	mov	sl, r1
 8001aea:	4653      	mov	r3, sl
 8001aec:	2b1f      	cmp	r3, #31
 8001aee:	dd00      	ble.n	8001af2 <__aeabi_dsub+0x1a2>
 8001af0:	e1e7      	b.n	8001ec2 <__aeabi_dsub+0x572>
 8001af2:	2220      	movs	r2, #32
 8001af4:	1ad2      	subs	r2, r2, r3
 8001af6:	9b02      	ldr	r3, [sp, #8]
 8001af8:	4661      	mov	r1, ip
 8001afa:	4093      	lsls	r3, r2
 8001afc:	001d      	movs	r5, r3
 8001afe:	4653      	mov	r3, sl
 8001b00:	40d9      	lsrs	r1, r3
 8001b02:	4663      	mov	r3, ip
 8001b04:	4093      	lsls	r3, r2
 8001b06:	001a      	movs	r2, r3
 8001b08:	430d      	orrs	r5, r1
 8001b0a:	1e51      	subs	r1, r2, #1
 8001b0c:	418a      	sbcs	r2, r1
 8001b0e:	4653      	mov	r3, sl
 8001b10:	4315      	orrs	r5, r2
 8001b12:	9a02      	ldr	r2, [sp, #8]
 8001b14:	40da      	lsrs	r2, r3
 8001b16:	18a4      	adds	r4, r4, r2
 8001b18:	182d      	adds	r5, r5, r0
 8001b1a:	4285      	cmp	r5, r0
 8001b1c:	4180      	sbcs	r0, r0
 8001b1e:	4240      	negs	r0, r0
 8001b20:	1824      	adds	r4, r4, r0
 8001b22:	0223      	lsls	r3, r4, #8
 8001b24:	d400      	bmi.n	8001b28 <__aeabi_dsub+0x1d8>
 8001b26:	e0b6      	b.n	8001c96 <__aeabi_dsub+0x346>
 8001b28:	4b5e      	ldr	r3, [pc, #376]	@ (8001ca4 <__aeabi_dsub+0x354>)
 8001b2a:	3701      	adds	r7, #1
 8001b2c:	429f      	cmp	r7, r3
 8001b2e:	d100      	bne.n	8001b32 <__aeabi_dsub+0x1e2>
 8001b30:	e0ad      	b.n	8001c8e <__aeabi_dsub+0x33e>
 8001b32:	2101      	movs	r1, #1
 8001b34:	4b5c      	ldr	r3, [pc, #368]	@ (8001ca8 <__aeabi_dsub+0x358>)
 8001b36:	086a      	lsrs	r2, r5, #1
 8001b38:	401c      	ands	r4, r3
 8001b3a:	4029      	ands	r1, r5
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	07e5      	lsls	r5, r4, #31
 8001b40:	4315      	orrs	r5, r2
 8001b42:	0864      	lsrs	r4, r4, #1
 8001b44:	e78d      	b.n	8001a62 <__aeabi_dsub+0x112>
 8001b46:	4a59      	ldr	r2, [pc, #356]	@ (8001cac <__aeabi_dsub+0x35c>)
 8001b48:	9b02      	ldr	r3, [sp, #8]
 8001b4a:	4692      	mov	sl, r2
 8001b4c:	4662      	mov	r2, ip
 8001b4e:	44ba      	add	sl, r7
 8001b50:	431a      	orrs	r2, r3
 8001b52:	d02c      	beq.n	8001bae <__aeabi_dsub+0x25e>
 8001b54:	428e      	cmp	r6, r1
 8001b56:	d02e      	beq.n	8001bb6 <__aeabi_dsub+0x266>
 8001b58:	4652      	mov	r2, sl
 8001b5a:	2a00      	cmp	r2, #0
 8001b5c:	d060      	beq.n	8001c20 <__aeabi_dsub+0x2d0>
 8001b5e:	2f00      	cmp	r7, #0
 8001b60:	d100      	bne.n	8001b64 <__aeabi_dsub+0x214>
 8001b62:	e0db      	b.n	8001d1c <__aeabi_dsub+0x3cc>
 8001b64:	4663      	mov	r3, ip
 8001b66:	000e      	movs	r6, r1
 8001b68:	9c02      	ldr	r4, [sp, #8]
 8001b6a:	08d8      	lsrs	r0, r3, #3
 8001b6c:	0762      	lsls	r2, r4, #29
 8001b6e:	4302      	orrs	r2, r0
 8001b70:	08e4      	lsrs	r4, r4, #3
 8001b72:	0013      	movs	r3, r2
 8001b74:	4323      	orrs	r3, r4
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dsub+0x22a>
 8001b78:	e254      	b.n	8002024 <__aeabi_dsub+0x6d4>
 8001b7a:	2580      	movs	r5, #128	@ 0x80
 8001b7c:	032d      	lsls	r5, r5, #12
 8001b7e:	4325      	orrs	r5, r4
 8001b80:	032d      	lsls	r5, r5, #12
 8001b82:	4c48      	ldr	r4, [pc, #288]	@ (8001ca4 <__aeabi_dsub+0x354>)
 8001b84:	0b2d      	lsrs	r5, r5, #12
 8001b86:	e78c      	b.n	8001aa2 <__aeabi_dsub+0x152>
 8001b88:	4661      	mov	r1, ip
 8001b8a:	9b02      	ldr	r3, [sp, #8]
 8001b8c:	4319      	orrs	r1, r3
 8001b8e:	d100      	bne.n	8001b92 <__aeabi_dsub+0x242>
 8001b90:	e0cc      	b.n	8001d2c <__aeabi_dsub+0x3dc>
 8001b92:	0029      	movs	r1, r5
 8001b94:	3901      	subs	r1, #1
 8001b96:	2d01      	cmp	r5, #1
 8001b98:	d100      	bne.n	8001b9c <__aeabi_dsub+0x24c>
 8001b9a:	e188      	b.n	8001eae <__aeabi_dsub+0x55e>
 8001b9c:	4295      	cmp	r5, r2
 8001b9e:	d100      	bne.n	8001ba2 <__aeabi_dsub+0x252>
 8001ba0:	e0aa      	b.n	8001cf8 <__aeabi_dsub+0x3a8>
 8001ba2:	2501      	movs	r5, #1
 8001ba4:	2938      	cmp	r1, #56	@ 0x38
 8001ba6:	dd00      	ble.n	8001baa <__aeabi_dsub+0x25a>
 8001ba8:	e72f      	b.n	8001a0a <__aeabi_dsub+0xba>
 8001baa:	468a      	mov	sl, r1
 8001bac:	e718      	b.n	80019e0 <__aeabi_dsub+0x90>
 8001bae:	2201      	movs	r2, #1
 8001bb0:	4051      	eors	r1, r2
 8001bb2:	428e      	cmp	r6, r1
 8001bb4:	d1d0      	bne.n	8001b58 <__aeabi_dsub+0x208>
 8001bb6:	4653      	mov	r3, sl
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d100      	bne.n	8001bbe <__aeabi_dsub+0x26e>
 8001bbc:	e0be      	b.n	8001d3c <__aeabi_dsub+0x3ec>
 8001bbe:	2f00      	cmp	r7, #0
 8001bc0:	d000      	beq.n	8001bc4 <__aeabi_dsub+0x274>
 8001bc2:	e138      	b.n	8001e36 <__aeabi_dsub+0x4e6>
 8001bc4:	46ca      	mov	sl, r9
 8001bc6:	0022      	movs	r2, r4
 8001bc8:	4302      	orrs	r2, r0
 8001bca:	d100      	bne.n	8001bce <__aeabi_dsub+0x27e>
 8001bcc:	e1e2      	b.n	8001f94 <__aeabi_dsub+0x644>
 8001bce:	4653      	mov	r3, sl
 8001bd0:	1e59      	subs	r1, r3, #1
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d100      	bne.n	8001bd8 <__aeabi_dsub+0x288>
 8001bd6:	e20d      	b.n	8001ff4 <__aeabi_dsub+0x6a4>
 8001bd8:	4a32      	ldr	r2, [pc, #200]	@ (8001ca4 <__aeabi_dsub+0x354>)
 8001bda:	4592      	cmp	sl, r2
 8001bdc:	d100      	bne.n	8001be0 <__aeabi_dsub+0x290>
 8001bde:	e1d2      	b.n	8001f86 <__aeabi_dsub+0x636>
 8001be0:	2701      	movs	r7, #1
 8001be2:	2938      	cmp	r1, #56	@ 0x38
 8001be4:	dc13      	bgt.n	8001c0e <__aeabi_dsub+0x2be>
 8001be6:	291f      	cmp	r1, #31
 8001be8:	dd00      	ble.n	8001bec <__aeabi_dsub+0x29c>
 8001bea:	e1ee      	b.n	8001fca <__aeabi_dsub+0x67a>
 8001bec:	2220      	movs	r2, #32
 8001bee:	9b02      	ldr	r3, [sp, #8]
 8001bf0:	1a52      	subs	r2, r2, r1
 8001bf2:	0025      	movs	r5, r4
 8001bf4:	0007      	movs	r7, r0
 8001bf6:	469a      	mov	sl, r3
 8001bf8:	40cc      	lsrs	r4, r1
 8001bfa:	4090      	lsls	r0, r2
 8001bfc:	4095      	lsls	r5, r2
 8001bfe:	40cf      	lsrs	r7, r1
 8001c00:	44a2      	add	sl, r4
 8001c02:	1e42      	subs	r2, r0, #1
 8001c04:	4190      	sbcs	r0, r2
 8001c06:	4653      	mov	r3, sl
 8001c08:	432f      	orrs	r7, r5
 8001c0a:	4307      	orrs	r7, r0
 8001c0c:	9302      	str	r3, [sp, #8]
 8001c0e:	003d      	movs	r5, r7
 8001c10:	4465      	add	r5, ip
 8001c12:	4565      	cmp	r5, ip
 8001c14:	4192      	sbcs	r2, r2
 8001c16:	9b02      	ldr	r3, [sp, #8]
 8001c18:	4252      	negs	r2, r2
 8001c1a:	464f      	mov	r7, r9
 8001c1c:	18d4      	adds	r4, r2, r3
 8001c1e:	e780      	b.n	8001b22 <__aeabi_dsub+0x1d2>
 8001c20:	4a23      	ldr	r2, [pc, #140]	@ (8001cb0 <__aeabi_dsub+0x360>)
 8001c22:	1c7d      	adds	r5, r7, #1
 8001c24:	4215      	tst	r5, r2
 8001c26:	d000      	beq.n	8001c2a <__aeabi_dsub+0x2da>
 8001c28:	e0aa      	b.n	8001d80 <__aeabi_dsub+0x430>
 8001c2a:	4662      	mov	r2, ip
 8001c2c:	0025      	movs	r5, r4
 8001c2e:	9b02      	ldr	r3, [sp, #8]
 8001c30:	4305      	orrs	r5, r0
 8001c32:	431a      	orrs	r2, r3
 8001c34:	2f00      	cmp	r7, #0
 8001c36:	d000      	beq.n	8001c3a <__aeabi_dsub+0x2ea>
 8001c38:	e0f5      	b.n	8001e26 <__aeabi_dsub+0x4d6>
 8001c3a:	2d00      	cmp	r5, #0
 8001c3c:	d100      	bne.n	8001c40 <__aeabi_dsub+0x2f0>
 8001c3e:	e16b      	b.n	8001f18 <__aeabi_dsub+0x5c8>
 8001c40:	2a00      	cmp	r2, #0
 8001c42:	d100      	bne.n	8001c46 <__aeabi_dsub+0x2f6>
 8001c44:	e152      	b.n	8001eec <__aeabi_dsub+0x59c>
 8001c46:	4663      	mov	r3, ip
 8001c48:	1ac5      	subs	r5, r0, r3
 8001c4a:	9b02      	ldr	r3, [sp, #8]
 8001c4c:	1ae2      	subs	r2, r4, r3
 8001c4e:	42a8      	cmp	r0, r5
 8001c50:	419b      	sbcs	r3, r3
 8001c52:	425b      	negs	r3, r3
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	021a      	lsls	r2, r3, #8
 8001c58:	d400      	bmi.n	8001c5c <__aeabi_dsub+0x30c>
 8001c5a:	e1d5      	b.n	8002008 <__aeabi_dsub+0x6b8>
 8001c5c:	4663      	mov	r3, ip
 8001c5e:	1a1d      	subs	r5, r3, r0
 8001c60:	45ac      	cmp	ip, r5
 8001c62:	4192      	sbcs	r2, r2
 8001c64:	2601      	movs	r6, #1
 8001c66:	9b02      	ldr	r3, [sp, #8]
 8001c68:	4252      	negs	r2, r2
 8001c6a:	1b1c      	subs	r4, r3, r4
 8001c6c:	4688      	mov	r8, r1
 8001c6e:	1aa4      	subs	r4, r4, r2
 8001c70:	400e      	ands	r6, r1
 8001c72:	e6f6      	b.n	8001a62 <__aeabi_dsub+0x112>
 8001c74:	4297      	cmp	r7, r2
 8001c76:	d03f      	beq.n	8001cf8 <__aeabi_dsub+0x3a8>
 8001c78:	4652      	mov	r2, sl
 8001c7a:	2501      	movs	r5, #1
 8001c7c:	2a38      	cmp	r2, #56	@ 0x38
 8001c7e:	dd00      	ble.n	8001c82 <__aeabi_dsub+0x332>
 8001c80:	e74a      	b.n	8001b18 <__aeabi_dsub+0x1c8>
 8001c82:	2280      	movs	r2, #128	@ 0x80
 8001c84:	9b02      	ldr	r3, [sp, #8]
 8001c86:	0412      	lsls	r2, r2, #16
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	9302      	str	r3, [sp, #8]
 8001c8c:	e72d      	b.n	8001aea <__aeabi_dsub+0x19a>
 8001c8e:	003c      	movs	r4, r7
 8001c90:	2500      	movs	r5, #0
 8001c92:	2200      	movs	r2, #0
 8001c94:	e705      	b.n	8001aa2 <__aeabi_dsub+0x152>
 8001c96:	2307      	movs	r3, #7
 8001c98:	402b      	ands	r3, r5
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d000      	beq.n	8001ca0 <__aeabi_dsub+0x350>
 8001c9e:	e6e2      	b.n	8001a66 <__aeabi_dsub+0x116>
 8001ca0:	e06b      	b.n	8001d7a <__aeabi_dsub+0x42a>
 8001ca2:	46c0      	nop			@ (mov r8, r8)
 8001ca4:	000007ff 	.word	0x000007ff
 8001ca8:	ff7fffff 	.word	0xff7fffff
 8001cac:	fffff801 	.word	0xfffff801
 8001cb0:	000007fe 	.word	0x000007fe
 8001cb4:	0028      	movs	r0, r5
 8001cb6:	f000 fa75 	bl	80021a4 <__clzsi2>
 8001cba:	0003      	movs	r3, r0
 8001cbc:	3318      	adds	r3, #24
 8001cbe:	2b1f      	cmp	r3, #31
 8001cc0:	dc00      	bgt.n	8001cc4 <__aeabi_dsub+0x374>
 8001cc2:	e6b4      	b.n	8001a2e <__aeabi_dsub+0xde>
 8001cc4:	002a      	movs	r2, r5
 8001cc6:	3808      	subs	r0, #8
 8001cc8:	4082      	lsls	r2, r0
 8001cca:	429f      	cmp	r7, r3
 8001ccc:	dd00      	ble.n	8001cd0 <__aeabi_dsub+0x380>
 8001cce:	e0b9      	b.n	8001e44 <__aeabi_dsub+0x4f4>
 8001cd0:	1bdb      	subs	r3, r3, r7
 8001cd2:	1c58      	adds	r0, r3, #1
 8001cd4:	281f      	cmp	r0, #31
 8001cd6:	dc00      	bgt.n	8001cda <__aeabi_dsub+0x38a>
 8001cd8:	e1a0      	b.n	800201c <__aeabi_dsub+0x6cc>
 8001cda:	0015      	movs	r5, r2
 8001cdc:	3b1f      	subs	r3, #31
 8001cde:	40dd      	lsrs	r5, r3
 8001ce0:	2820      	cmp	r0, #32
 8001ce2:	d005      	beq.n	8001cf0 <__aeabi_dsub+0x3a0>
 8001ce4:	2340      	movs	r3, #64	@ 0x40
 8001ce6:	1a1b      	subs	r3, r3, r0
 8001ce8:	409a      	lsls	r2, r3
 8001cea:	1e53      	subs	r3, r2, #1
 8001cec:	419a      	sbcs	r2, r3
 8001cee:	4315      	orrs	r5, r2
 8001cf0:	2307      	movs	r3, #7
 8001cf2:	2700      	movs	r7, #0
 8001cf4:	402b      	ands	r3, r5
 8001cf6:	e7d0      	b.n	8001c9a <__aeabi_dsub+0x34a>
 8001cf8:	08c0      	lsrs	r0, r0, #3
 8001cfa:	0762      	lsls	r2, r4, #29
 8001cfc:	4302      	orrs	r2, r0
 8001cfe:	08e4      	lsrs	r4, r4, #3
 8001d00:	e737      	b.n	8001b72 <__aeabi_dsub+0x222>
 8001d02:	08ea      	lsrs	r2, r5, #3
 8001d04:	0763      	lsls	r3, r4, #29
 8001d06:	431a      	orrs	r2, r3
 8001d08:	4bd3      	ldr	r3, [pc, #844]	@ (8002058 <__aeabi_dsub+0x708>)
 8001d0a:	08e4      	lsrs	r4, r4, #3
 8001d0c:	429f      	cmp	r7, r3
 8001d0e:	d100      	bne.n	8001d12 <__aeabi_dsub+0x3c2>
 8001d10:	e72f      	b.n	8001b72 <__aeabi_dsub+0x222>
 8001d12:	0324      	lsls	r4, r4, #12
 8001d14:	0b25      	lsrs	r5, r4, #12
 8001d16:	057c      	lsls	r4, r7, #21
 8001d18:	0d64      	lsrs	r4, r4, #21
 8001d1a:	e6c2      	b.n	8001aa2 <__aeabi_dsub+0x152>
 8001d1c:	46ca      	mov	sl, r9
 8001d1e:	0022      	movs	r2, r4
 8001d20:	4302      	orrs	r2, r0
 8001d22:	d158      	bne.n	8001dd6 <__aeabi_dsub+0x486>
 8001d24:	4663      	mov	r3, ip
 8001d26:	000e      	movs	r6, r1
 8001d28:	9c02      	ldr	r4, [sp, #8]
 8001d2a:	9303      	str	r3, [sp, #12]
 8001d2c:	9b03      	ldr	r3, [sp, #12]
 8001d2e:	4657      	mov	r7, sl
 8001d30:	08da      	lsrs	r2, r3, #3
 8001d32:	e7e7      	b.n	8001d04 <__aeabi_dsub+0x3b4>
 8001d34:	4cc9      	ldr	r4, [pc, #804]	@ (800205c <__aeabi_dsub+0x70c>)
 8001d36:	1aff      	subs	r7, r7, r3
 8001d38:	4014      	ands	r4, r2
 8001d3a:	e692      	b.n	8001a62 <__aeabi_dsub+0x112>
 8001d3c:	4dc8      	ldr	r5, [pc, #800]	@ (8002060 <__aeabi_dsub+0x710>)
 8001d3e:	1c7a      	adds	r2, r7, #1
 8001d40:	422a      	tst	r2, r5
 8001d42:	d000      	beq.n	8001d46 <__aeabi_dsub+0x3f6>
 8001d44:	e084      	b.n	8001e50 <__aeabi_dsub+0x500>
 8001d46:	0022      	movs	r2, r4
 8001d48:	4302      	orrs	r2, r0
 8001d4a:	2f00      	cmp	r7, #0
 8001d4c:	d000      	beq.n	8001d50 <__aeabi_dsub+0x400>
 8001d4e:	e0ef      	b.n	8001f30 <__aeabi_dsub+0x5e0>
 8001d50:	2a00      	cmp	r2, #0
 8001d52:	d100      	bne.n	8001d56 <__aeabi_dsub+0x406>
 8001d54:	e0e5      	b.n	8001f22 <__aeabi_dsub+0x5d2>
 8001d56:	4662      	mov	r2, ip
 8001d58:	9902      	ldr	r1, [sp, #8]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	d100      	bne.n	8001d60 <__aeabi_dsub+0x410>
 8001d5e:	e0c5      	b.n	8001eec <__aeabi_dsub+0x59c>
 8001d60:	4663      	mov	r3, ip
 8001d62:	18c5      	adds	r5, r0, r3
 8001d64:	468c      	mov	ip, r1
 8001d66:	4285      	cmp	r5, r0
 8001d68:	4180      	sbcs	r0, r0
 8001d6a:	4464      	add	r4, ip
 8001d6c:	4240      	negs	r0, r0
 8001d6e:	1824      	adds	r4, r4, r0
 8001d70:	0223      	lsls	r3, r4, #8
 8001d72:	d502      	bpl.n	8001d7a <__aeabi_dsub+0x42a>
 8001d74:	4bb9      	ldr	r3, [pc, #740]	@ (800205c <__aeabi_dsub+0x70c>)
 8001d76:	3701      	adds	r7, #1
 8001d78:	401c      	ands	r4, r3
 8001d7a:	46ba      	mov	sl, r7
 8001d7c:	9503      	str	r5, [sp, #12]
 8001d7e:	e7d5      	b.n	8001d2c <__aeabi_dsub+0x3dc>
 8001d80:	4662      	mov	r2, ip
 8001d82:	1a85      	subs	r5, r0, r2
 8001d84:	42a8      	cmp	r0, r5
 8001d86:	4192      	sbcs	r2, r2
 8001d88:	4252      	negs	r2, r2
 8001d8a:	4691      	mov	r9, r2
 8001d8c:	9b02      	ldr	r3, [sp, #8]
 8001d8e:	1ae3      	subs	r3, r4, r3
 8001d90:	001a      	movs	r2, r3
 8001d92:	464b      	mov	r3, r9
 8001d94:	1ad2      	subs	r2, r2, r3
 8001d96:	0013      	movs	r3, r2
 8001d98:	4691      	mov	r9, r2
 8001d9a:	021a      	lsls	r2, r3, #8
 8001d9c:	d46c      	bmi.n	8001e78 <__aeabi_dsub+0x528>
 8001d9e:	464a      	mov	r2, r9
 8001da0:	464c      	mov	r4, r9
 8001da2:	432a      	orrs	r2, r5
 8001da4:	d000      	beq.n	8001da8 <__aeabi_dsub+0x458>
 8001da6:	e63a      	b.n	8001a1e <__aeabi_dsub+0xce>
 8001da8:	2600      	movs	r6, #0
 8001daa:	2400      	movs	r4, #0
 8001dac:	2500      	movs	r5, #0
 8001dae:	e678      	b.n	8001aa2 <__aeabi_dsub+0x152>
 8001db0:	9902      	ldr	r1, [sp, #8]
 8001db2:	4653      	mov	r3, sl
 8001db4:	000d      	movs	r5, r1
 8001db6:	3a20      	subs	r2, #32
 8001db8:	40d5      	lsrs	r5, r2
 8001dba:	2b20      	cmp	r3, #32
 8001dbc:	d006      	beq.n	8001dcc <__aeabi_dsub+0x47c>
 8001dbe:	2240      	movs	r2, #64	@ 0x40
 8001dc0:	1ad2      	subs	r2, r2, r3
 8001dc2:	000b      	movs	r3, r1
 8001dc4:	4093      	lsls	r3, r2
 8001dc6:	4662      	mov	r2, ip
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	4693      	mov	fp, r2
 8001dcc:	465b      	mov	r3, fp
 8001dce:	1e5a      	subs	r2, r3, #1
 8001dd0:	4193      	sbcs	r3, r2
 8001dd2:	431d      	orrs	r5, r3
 8001dd4:	e619      	b.n	8001a0a <__aeabi_dsub+0xba>
 8001dd6:	4653      	mov	r3, sl
 8001dd8:	1e5a      	subs	r2, r3, #1
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d100      	bne.n	8001de0 <__aeabi_dsub+0x490>
 8001dde:	e0c6      	b.n	8001f6e <__aeabi_dsub+0x61e>
 8001de0:	4e9d      	ldr	r6, [pc, #628]	@ (8002058 <__aeabi_dsub+0x708>)
 8001de2:	45b2      	cmp	sl, r6
 8001de4:	d100      	bne.n	8001de8 <__aeabi_dsub+0x498>
 8001de6:	e6bd      	b.n	8001b64 <__aeabi_dsub+0x214>
 8001de8:	4688      	mov	r8, r1
 8001dea:	000e      	movs	r6, r1
 8001dec:	2501      	movs	r5, #1
 8001dee:	2a38      	cmp	r2, #56	@ 0x38
 8001df0:	dc10      	bgt.n	8001e14 <__aeabi_dsub+0x4c4>
 8001df2:	2a1f      	cmp	r2, #31
 8001df4:	dc7f      	bgt.n	8001ef6 <__aeabi_dsub+0x5a6>
 8001df6:	2120      	movs	r1, #32
 8001df8:	0025      	movs	r5, r4
 8001dfa:	1a89      	subs	r1, r1, r2
 8001dfc:	0007      	movs	r7, r0
 8001dfe:	4088      	lsls	r0, r1
 8001e00:	408d      	lsls	r5, r1
 8001e02:	40d7      	lsrs	r7, r2
 8001e04:	40d4      	lsrs	r4, r2
 8001e06:	1e41      	subs	r1, r0, #1
 8001e08:	4188      	sbcs	r0, r1
 8001e0a:	9b02      	ldr	r3, [sp, #8]
 8001e0c:	433d      	orrs	r5, r7
 8001e0e:	1b1b      	subs	r3, r3, r4
 8001e10:	4305      	orrs	r5, r0
 8001e12:	9302      	str	r3, [sp, #8]
 8001e14:	4662      	mov	r2, ip
 8001e16:	1b55      	subs	r5, r2, r5
 8001e18:	45ac      	cmp	ip, r5
 8001e1a:	4192      	sbcs	r2, r2
 8001e1c:	9b02      	ldr	r3, [sp, #8]
 8001e1e:	4252      	negs	r2, r2
 8001e20:	464f      	mov	r7, r9
 8001e22:	1a9c      	subs	r4, r3, r2
 8001e24:	e5f6      	b.n	8001a14 <__aeabi_dsub+0xc4>
 8001e26:	2d00      	cmp	r5, #0
 8001e28:	d000      	beq.n	8001e2c <__aeabi_dsub+0x4dc>
 8001e2a:	e0b7      	b.n	8001f9c <__aeabi_dsub+0x64c>
 8001e2c:	2a00      	cmp	r2, #0
 8001e2e:	d100      	bne.n	8001e32 <__aeabi_dsub+0x4e2>
 8001e30:	e0f0      	b.n	8002014 <__aeabi_dsub+0x6c4>
 8001e32:	2601      	movs	r6, #1
 8001e34:	400e      	ands	r6, r1
 8001e36:	4663      	mov	r3, ip
 8001e38:	9802      	ldr	r0, [sp, #8]
 8001e3a:	08d9      	lsrs	r1, r3, #3
 8001e3c:	0742      	lsls	r2, r0, #29
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	08c4      	lsrs	r4, r0, #3
 8001e42:	e696      	b.n	8001b72 <__aeabi_dsub+0x222>
 8001e44:	4c85      	ldr	r4, [pc, #532]	@ (800205c <__aeabi_dsub+0x70c>)
 8001e46:	1aff      	subs	r7, r7, r3
 8001e48:	4014      	ands	r4, r2
 8001e4a:	0762      	lsls	r2, r4, #29
 8001e4c:	08e4      	lsrs	r4, r4, #3
 8001e4e:	e760      	b.n	8001d12 <__aeabi_dsub+0x3c2>
 8001e50:	4981      	ldr	r1, [pc, #516]	@ (8002058 <__aeabi_dsub+0x708>)
 8001e52:	428a      	cmp	r2, r1
 8001e54:	d100      	bne.n	8001e58 <__aeabi_dsub+0x508>
 8001e56:	e0c9      	b.n	8001fec <__aeabi_dsub+0x69c>
 8001e58:	4663      	mov	r3, ip
 8001e5a:	18c1      	adds	r1, r0, r3
 8001e5c:	4281      	cmp	r1, r0
 8001e5e:	4180      	sbcs	r0, r0
 8001e60:	9b02      	ldr	r3, [sp, #8]
 8001e62:	4240      	negs	r0, r0
 8001e64:	18e3      	adds	r3, r4, r3
 8001e66:	181b      	adds	r3, r3, r0
 8001e68:	07dd      	lsls	r5, r3, #31
 8001e6a:	085c      	lsrs	r4, r3, #1
 8001e6c:	2307      	movs	r3, #7
 8001e6e:	0849      	lsrs	r1, r1, #1
 8001e70:	430d      	orrs	r5, r1
 8001e72:	0017      	movs	r7, r2
 8001e74:	402b      	ands	r3, r5
 8001e76:	e710      	b.n	8001c9a <__aeabi_dsub+0x34a>
 8001e78:	4663      	mov	r3, ip
 8001e7a:	1a1d      	subs	r5, r3, r0
 8001e7c:	45ac      	cmp	ip, r5
 8001e7e:	4192      	sbcs	r2, r2
 8001e80:	2601      	movs	r6, #1
 8001e82:	9b02      	ldr	r3, [sp, #8]
 8001e84:	4252      	negs	r2, r2
 8001e86:	1b1c      	subs	r4, r3, r4
 8001e88:	4688      	mov	r8, r1
 8001e8a:	1aa4      	subs	r4, r4, r2
 8001e8c:	400e      	ands	r6, r1
 8001e8e:	e5c6      	b.n	8001a1e <__aeabi_dsub+0xce>
 8001e90:	4663      	mov	r3, ip
 8001e92:	18c5      	adds	r5, r0, r3
 8001e94:	9b02      	ldr	r3, [sp, #8]
 8001e96:	4285      	cmp	r5, r0
 8001e98:	4180      	sbcs	r0, r0
 8001e9a:	469c      	mov	ip, r3
 8001e9c:	4240      	negs	r0, r0
 8001e9e:	4464      	add	r4, ip
 8001ea0:	1824      	adds	r4, r4, r0
 8001ea2:	2701      	movs	r7, #1
 8001ea4:	0223      	lsls	r3, r4, #8
 8001ea6:	d400      	bmi.n	8001eaa <__aeabi_dsub+0x55a>
 8001ea8:	e6f5      	b.n	8001c96 <__aeabi_dsub+0x346>
 8001eaa:	2702      	movs	r7, #2
 8001eac:	e641      	b.n	8001b32 <__aeabi_dsub+0x1e2>
 8001eae:	4663      	mov	r3, ip
 8001eb0:	1ac5      	subs	r5, r0, r3
 8001eb2:	42a8      	cmp	r0, r5
 8001eb4:	4180      	sbcs	r0, r0
 8001eb6:	9b02      	ldr	r3, [sp, #8]
 8001eb8:	4240      	negs	r0, r0
 8001eba:	1ae4      	subs	r4, r4, r3
 8001ebc:	2701      	movs	r7, #1
 8001ebe:	1a24      	subs	r4, r4, r0
 8001ec0:	e5a8      	b.n	8001a14 <__aeabi_dsub+0xc4>
 8001ec2:	9d02      	ldr	r5, [sp, #8]
 8001ec4:	4652      	mov	r2, sl
 8001ec6:	002b      	movs	r3, r5
 8001ec8:	3a20      	subs	r2, #32
 8001eca:	40d3      	lsrs	r3, r2
 8001ecc:	0019      	movs	r1, r3
 8001ece:	4653      	mov	r3, sl
 8001ed0:	2b20      	cmp	r3, #32
 8001ed2:	d006      	beq.n	8001ee2 <__aeabi_dsub+0x592>
 8001ed4:	2240      	movs	r2, #64	@ 0x40
 8001ed6:	1ad2      	subs	r2, r2, r3
 8001ed8:	002b      	movs	r3, r5
 8001eda:	4093      	lsls	r3, r2
 8001edc:	4662      	mov	r2, ip
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	4693      	mov	fp, r2
 8001ee2:	465d      	mov	r5, fp
 8001ee4:	1e6b      	subs	r3, r5, #1
 8001ee6:	419d      	sbcs	r5, r3
 8001ee8:	430d      	orrs	r5, r1
 8001eea:	e615      	b.n	8001b18 <__aeabi_dsub+0x1c8>
 8001eec:	0762      	lsls	r2, r4, #29
 8001eee:	08c0      	lsrs	r0, r0, #3
 8001ef0:	4302      	orrs	r2, r0
 8001ef2:	08e4      	lsrs	r4, r4, #3
 8001ef4:	e70d      	b.n	8001d12 <__aeabi_dsub+0x3c2>
 8001ef6:	0011      	movs	r1, r2
 8001ef8:	0027      	movs	r7, r4
 8001efa:	3920      	subs	r1, #32
 8001efc:	40cf      	lsrs	r7, r1
 8001efe:	2a20      	cmp	r2, #32
 8001f00:	d005      	beq.n	8001f0e <__aeabi_dsub+0x5be>
 8001f02:	2140      	movs	r1, #64	@ 0x40
 8001f04:	1a8a      	subs	r2, r1, r2
 8001f06:	4094      	lsls	r4, r2
 8001f08:	0025      	movs	r5, r4
 8001f0a:	4305      	orrs	r5, r0
 8001f0c:	9503      	str	r5, [sp, #12]
 8001f0e:	9d03      	ldr	r5, [sp, #12]
 8001f10:	1e6a      	subs	r2, r5, #1
 8001f12:	4195      	sbcs	r5, r2
 8001f14:	433d      	orrs	r5, r7
 8001f16:	e77d      	b.n	8001e14 <__aeabi_dsub+0x4c4>
 8001f18:	2a00      	cmp	r2, #0
 8001f1a:	d100      	bne.n	8001f1e <__aeabi_dsub+0x5ce>
 8001f1c:	e744      	b.n	8001da8 <__aeabi_dsub+0x458>
 8001f1e:	2601      	movs	r6, #1
 8001f20:	400e      	ands	r6, r1
 8001f22:	4663      	mov	r3, ip
 8001f24:	08d9      	lsrs	r1, r3, #3
 8001f26:	9b02      	ldr	r3, [sp, #8]
 8001f28:	075a      	lsls	r2, r3, #29
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	08dc      	lsrs	r4, r3, #3
 8001f2e:	e6f0      	b.n	8001d12 <__aeabi_dsub+0x3c2>
 8001f30:	2a00      	cmp	r2, #0
 8001f32:	d028      	beq.n	8001f86 <__aeabi_dsub+0x636>
 8001f34:	4662      	mov	r2, ip
 8001f36:	9f02      	ldr	r7, [sp, #8]
 8001f38:	08c0      	lsrs	r0, r0, #3
 8001f3a:	433a      	orrs	r2, r7
 8001f3c:	d100      	bne.n	8001f40 <__aeabi_dsub+0x5f0>
 8001f3e:	e6dc      	b.n	8001cfa <__aeabi_dsub+0x3aa>
 8001f40:	0762      	lsls	r2, r4, #29
 8001f42:	4310      	orrs	r0, r2
 8001f44:	2280      	movs	r2, #128	@ 0x80
 8001f46:	08e4      	lsrs	r4, r4, #3
 8001f48:	0312      	lsls	r2, r2, #12
 8001f4a:	4214      	tst	r4, r2
 8001f4c:	d009      	beq.n	8001f62 <__aeabi_dsub+0x612>
 8001f4e:	08fd      	lsrs	r5, r7, #3
 8001f50:	4215      	tst	r5, r2
 8001f52:	d106      	bne.n	8001f62 <__aeabi_dsub+0x612>
 8001f54:	4663      	mov	r3, ip
 8001f56:	2601      	movs	r6, #1
 8001f58:	002c      	movs	r4, r5
 8001f5a:	08d8      	lsrs	r0, r3, #3
 8001f5c:	077b      	lsls	r3, r7, #29
 8001f5e:	4318      	orrs	r0, r3
 8001f60:	400e      	ands	r6, r1
 8001f62:	0f42      	lsrs	r2, r0, #29
 8001f64:	00c0      	lsls	r0, r0, #3
 8001f66:	08c0      	lsrs	r0, r0, #3
 8001f68:	0752      	lsls	r2, r2, #29
 8001f6a:	4302      	orrs	r2, r0
 8001f6c:	e601      	b.n	8001b72 <__aeabi_dsub+0x222>
 8001f6e:	4663      	mov	r3, ip
 8001f70:	1a1d      	subs	r5, r3, r0
 8001f72:	45ac      	cmp	ip, r5
 8001f74:	4192      	sbcs	r2, r2
 8001f76:	9b02      	ldr	r3, [sp, #8]
 8001f78:	4252      	negs	r2, r2
 8001f7a:	1b1c      	subs	r4, r3, r4
 8001f7c:	000e      	movs	r6, r1
 8001f7e:	4688      	mov	r8, r1
 8001f80:	2701      	movs	r7, #1
 8001f82:	1aa4      	subs	r4, r4, r2
 8001f84:	e546      	b.n	8001a14 <__aeabi_dsub+0xc4>
 8001f86:	4663      	mov	r3, ip
 8001f88:	08d9      	lsrs	r1, r3, #3
 8001f8a:	9b02      	ldr	r3, [sp, #8]
 8001f8c:	075a      	lsls	r2, r3, #29
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	08dc      	lsrs	r4, r3, #3
 8001f92:	e5ee      	b.n	8001b72 <__aeabi_dsub+0x222>
 8001f94:	4663      	mov	r3, ip
 8001f96:	9c02      	ldr	r4, [sp, #8]
 8001f98:	9303      	str	r3, [sp, #12]
 8001f9a:	e6c7      	b.n	8001d2c <__aeabi_dsub+0x3dc>
 8001f9c:	08c0      	lsrs	r0, r0, #3
 8001f9e:	2a00      	cmp	r2, #0
 8001fa0:	d100      	bne.n	8001fa4 <__aeabi_dsub+0x654>
 8001fa2:	e6aa      	b.n	8001cfa <__aeabi_dsub+0x3aa>
 8001fa4:	0762      	lsls	r2, r4, #29
 8001fa6:	4310      	orrs	r0, r2
 8001fa8:	2280      	movs	r2, #128	@ 0x80
 8001faa:	08e4      	lsrs	r4, r4, #3
 8001fac:	0312      	lsls	r2, r2, #12
 8001fae:	4214      	tst	r4, r2
 8001fb0:	d0d7      	beq.n	8001f62 <__aeabi_dsub+0x612>
 8001fb2:	9f02      	ldr	r7, [sp, #8]
 8001fb4:	08fd      	lsrs	r5, r7, #3
 8001fb6:	4215      	tst	r5, r2
 8001fb8:	d1d3      	bne.n	8001f62 <__aeabi_dsub+0x612>
 8001fba:	4663      	mov	r3, ip
 8001fbc:	2601      	movs	r6, #1
 8001fbe:	08d8      	lsrs	r0, r3, #3
 8001fc0:	077b      	lsls	r3, r7, #29
 8001fc2:	002c      	movs	r4, r5
 8001fc4:	4318      	orrs	r0, r3
 8001fc6:	400e      	ands	r6, r1
 8001fc8:	e7cb      	b.n	8001f62 <__aeabi_dsub+0x612>
 8001fca:	000a      	movs	r2, r1
 8001fcc:	0027      	movs	r7, r4
 8001fce:	3a20      	subs	r2, #32
 8001fd0:	40d7      	lsrs	r7, r2
 8001fd2:	2920      	cmp	r1, #32
 8001fd4:	d005      	beq.n	8001fe2 <__aeabi_dsub+0x692>
 8001fd6:	2240      	movs	r2, #64	@ 0x40
 8001fd8:	1a52      	subs	r2, r2, r1
 8001fda:	4094      	lsls	r4, r2
 8001fdc:	0025      	movs	r5, r4
 8001fde:	4305      	orrs	r5, r0
 8001fe0:	9503      	str	r5, [sp, #12]
 8001fe2:	9d03      	ldr	r5, [sp, #12]
 8001fe4:	1e6a      	subs	r2, r5, #1
 8001fe6:	4195      	sbcs	r5, r2
 8001fe8:	432f      	orrs	r7, r5
 8001fea:	e610      	b.n	8001c0e <__aeabi_dsub+0x2be>
 8001fec:	0014      	movs	r4, r2
 8001fee:	2500      	movs	r5, #0
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	e556      	b.n	8001aa2 <__aeabi_dsub+0x152>
 8001ff4:	9b02      	ldr	r3, [sp, #8]
 8001ff6:	4460      	add	r0, ip
 8001ff8:	4699      	mov	r9, r3
 8001ffa:	4560      	cmp	r0, ip
 8001ffc:	4192      	sbcs	r2, r2
 8001ffe:	444c      	add	r4, r9
 8002000:	4252      	negs	r2, r2
 8002002:	0005      	movs	r5, r0
 8002004:	18a4      	adds	r4, r4, r2
 8002006:	e74c      	b.n	8001ea2 <__aeabi_dsub+0x552>
 8002008:	001a      	movs	r2, r3
 800200a:	001c      	movs	r4, r3
 800200c:	432a      	orrs	r2, r5
 800200e:	d000      	beq.n	8002012 <__aeabi_dsub+0x6c2>
 8002010:	e6b3      	b.n	8001d7a <__aeabi_dsub+0x42a>
 8002012:	e6c9      	b.n	8001da8 <__aeabi_dsub+0x458>
 8002014:	2480      	movs	r4, #128	@ 0x80
 8002016:	2600      	movs	r6, #0
 8002018:	0324      	lsls	r4, r4, #12
 800201a:	e5ae      	b.n	8001b7a <__aeabi_dsub+0x22a>
 800201c:	2120      	movs	r1, #32
 800201e:	2500      	movs	r5, #0
 8002020:	1a09      	subs	r1, r1, r0
 8002022:	e517      	b.n	8001a54 <__aeabi_dsub+0x104>
 8002024:	2200      	movs	r2, #0
 8002026:	2500      	movs	r5, #0
 8002028:	4c0b      	ldr	r4, [pc, #44]	@ (8002058 <__aeabi_dsub+0x708>)
 800202a:	e53a      	b.n	8001aa2 <__aeabi_dsub+0x152>
 800202c:	2d00      	cmp	r5, #0
 800202e:	d100      	bne.n	8002032 <__aeabi_dsub+0x6e2>
 8002030:	e5f6      	b.n	8001c20 <__aeabi_dsub+0x2d0>
 8002032:	464b      	mov	r3, r9
 8002034:	1bda      	subs	r2, r3, r7
 8002036:	4692      	mov	sl, r2
 8002038:	2f00      	cmp	r7, #0
 800203a:	d100      	bne.n	800203e <__aeabi_dsub+0x6ee>
 800203c:	e66f      	b.n	8001d1e <__aeabi_dsub+0x3ce>
 800203e:	2a38      	cmp	r2, #56	@ 0x38
 8002040:	dc05      	bgt.n	800204e <__aeabi_dsub+0x6fe>
 8002042:	2680      	movs	r6, #128	@ 0x80
 8002044:	0436      	lsls	r6, r6, #16
 8002046:	4334      	orrs	r4, r6
 8002048:	4688      	mov	r8, r1
 800204a:	000e      	movs	r6, r1
 800204c:	e6d1      	b.n	8001df2 <__aeabi_dsub+0x4a2>
 800204e:	4688      	mov	r8, r1
 8002050:	000e      	movs	r6, r1
 8002052:	2501      	movs	r5, #1
 8002054:	e6de      	b.n	8001e14 <__aeabi_dsub+0x4c4>
 8002056:	46c0      	nop			@ (mov r8, r8)
 8002058:	000007ff 	.word	0x000007ff
 800205c:	ff7fffff 	.word	0xff7fffff
 8002060:	000007fe 	.word	0x000007fe
 8002064:	2d00      	cmp	r5, #0
 8002066:	d100      	bne.n	800206a <__aeabi_dsub+0x71a>
 8002068:	e668      	b.n	8001d3c <__aeabi_dsub+0x3ec>
 800206a:	464b      	mov	r3, r9
 800206c:	1bd9      	subs	r1, r3, r7
 800206e:	2f00      	cmp	r7, #0
 8002070:	d101      	bne.n	8002076 <__aeabi_dsub+0x726>
 8002072:	468a      	mov	sl, r1
 8002074:	e5a7      	b.n	8001bc6 <__aeabi_dsub+0x276>
 8002076:	2701      	movs	r7, #1
 8002078:	2938      	cmp	r1, #56	@ 0x38
 800207a:	dd00      	ble.n	800207e <__aeabi_dsub+0x72e>
 800207c:	e5c7      	b.n	8001c0e <__aeabi_dsub+0x2be>
 800207e:	2280      	movs	r2, #128	@ 0x80
 8002080:	0412      	lsls	r2, r2, #16
 8002082:	4314      	orrs	r4, r2
 8002084:	e5af      	b.n	8001be6 <__aeabi_dsub+0x296>
 8002086:	46c0      	nop			@ (mov r8, r8)

08002088 <__aeabi_d2iz>:
 8002088:	000b      	movs	r3, r1
 800208a:	0002      	movs	r2, r0
 800208c:	b570      	push	{r4, r5, r6, lr}
 800208e:	4d16      	ldr	r5, [pc, #88]	@ (80020e8 <__aeabi_d2iz+0x60>)
 8002090:	030c      	lsls	r4, r1, #12
 8002092:	b082      	sub	sp, #8
 8002094:	0049      	lsls	r1, r1, #1
 8002096:	2000      	movs	r0, #0
 8002098:	9200      	str	r2, [sp, #0]
 800209a:	9301      	str	r3, [sp, #4]
 800209c:	0b24      	lsrs	r4, r4, #12
 800209e:	0d49      	lsrs	r1, r1, #21
 80020a0:	0fde      	lsrs	r6, r3, #31
 80020a2:	42a9      	cmp	r1, r5
 80020a4:	dd04      	ble.n	80020b0 <__aeabi_d2iz+0x28>
 80020a6:	4811      	ldr	r0, [pc, #68]	@ (80020ec <__aeabi_d2iz+0x64>)
 80020a8:	4281      	cmp	r1, r0
 80020aa:	dd03      	ble.n	80020b4 <__aeabi_d2iz+0x2c>
 80020ac:	4b10      	ldr	r3, [pc, #64]	@ (80020f0 <__aeabi_d2iz+0x68>)
 80020ae:	18f0      	adds	r0, r6, r3
 80020b0:	b002      	add	sp, #8
 80020b2:	bd70      	pop	{r4, r5, r6, pc}
 80020b4:	2080      	movs	r0, #128	@ 0x80
 80020b6:	0340      	lsls	r0, r0, #13
 80020b8:	4320      	orrs	r0, r4
 80020ba:	4c0e      	ldr	r4, [pc, #56]	@ (80020f4 <__aeabi_d2iz+0x6c>)
 80020bc:	1a64      	subs	r4, r4, r1
 80020be:	2c1f      	cmp	r4, #31
 80020c0:	dd08      	ble.n	80020d4 <__aeabi_d2iz+0x4c>
 80020c2:	4b0d      	ldr	r3, [pc, #52]	@ (80020f8 <__aeabi_d2iz+0x70>)
 80020c4:	1a5b      	subs	r3, r3, r1
 80020c6:	40d8      	lsrs	r0, r3
 80020c8:	0003      	movs	r3, r0
 80020ca:	4258      	negs	r0, r3
 80020cc:	2e00      	cmp	r6, #0
 80020ce:	d1ef      	bne.n	80020b0 <__aeabi_d2iz+0x28>
 80020d0:	0018      	movs	r0, r3
 80020d2:	e7ed      	b.n	80020b0 <__aeabi_d2iz+0x28>
 80020d4:	4b09      	ldr	r3, [pc, #36]	@ (80020fc <__aeabi_d2iz+0x74>)
 80020d6:	9a00      	ldr	r2, [sp, #0]
 80020d8:	469c      	mov	ip, r3
 80020da:	0003      	movs	r3, r0
 80020dc:	4461      	add	r1, ip
 80020de:	408b      	lsls	r3, r1
 80020e0:	40e2      	lsrs	r2, r4
 80020e2:	4313      	orrs	r3, r2
 80020e4:	e7f1      	b.n	80020ca <__aeabi_d2iz+0x42>
 80020e6:	46c0      	nop			@ (mov r8, r8)
 80020e8:	000003fe 	.word	0x000003fe
 80020ec:	0000041d 	.word	0x0000041d
 80020f0:	7fffffff 	.word	0x7fffffff
 80020f4:	00000433 	.word	0x00000433
 80020f8:	00000413 	.word	0x00000413
 80020fc:	fffffbed 	.word	0xfffffbed

08002100 <__aeabi_i2d>:
 8002100:	b570      	push	{r4, r5, r6, lr}
 8002102:	2800      	cmp	r0, #0
 8002104:	d016      	beq.n	8002134 <__aeabi_i2d+0x34>
 8002106:	17c3      	asrs	r3, r0, #31
 8002108:	18c5      	adds	r5, r0, r3
 800210a:	405d      	eors	r5, r3
 800210c:	0fc4      	lsrs	r4, r0, #31
 800210e:	0028      	movs	r0, r5
 8002110:	f000 f848 	bl	80021a4 <__clzsi2>
 8002114:	4b10      	ldr	r3, [pc, #64]	@ (8002158 <__aeabi_i2d+0x58>)
 8002116:	1a1b      	subs	r3, r3, r0
 8002118:	055b      	lsls	r3, r3, #21
 800211a:	0d5b      	lsrs	r3, r3, #21
 800211c:	280a      	cmp	r0, #10
 800211e:	dc14      	bgt.n	800214a <__aeabi_i2d+0x4a>
 8002120:	0002      	movs	r2, r0
 8002122:	002e      	movs	r6, r5
 8002124:	3215      	adds	r2, #21
 8002126:	4096      	lsls	r6, r2
 8002128:	220b      	movs	r2, #11
 800212a:	1a12      	subs	r2, r2, r0
 800212c:	40d5      	lsrs	r5, r2
 800212e:	032d      	lsls	r5, r5, #12
 8002130:	0b2d      	lsrs	r5, r5, #12
 8002132:	e003      	b.n	800213c <__aeabi_i2d+0x3c>
 8002134:	2400      	movs	r4, #0
 8002136:	2300      	movs	r3, #0
 8002138:	2500      	movs	r5, #0
 800213a:	2600      	movs	r6, #0
 800213c:	051b      	lsls	r3, r3, #20
 800213e:	432b      	orrs	r3, r5
 8002140:	07e4      	lsls	r4, r4, #31
 8002142:	4323      	orrs	r3, r4
 8002144:	0030      	movs	r0, r6
 8002146:	0019      	movs	r1, r3
 8002148:	bd70      	pop	{r4, r5, r6, pc}
 800214a:	380b      	subs	r0, #11
 800214c:	4085      	lsls	r5, r0
 800214e:	032d      	lsls	r5, r5, #12
 8002150:	2600      	movs	r6, #0
 8002152:	0b2d      	lsrs	r5, r5, #12
 8002154:	e7f2      	b.n	800213c <__aeabi_i2d+0x3c>
 8002156:	46c0      	nop			@ (mov r8, r8)
 8002158:	0000041e 	.word	0x0000041e

0800215c <__aeabi_ui2d>:
 800215c:	b510      	push	{r4, lr}
 800215e:	1e04      	subs	r4, r0, #0
 8002160:	d010      	beq.n	8002184 <__aeabi_ui2d+0x28>
 8002162:	f000 f81f 	bl	80021a4 <__clzsi2>
 8002166:	4b0e      	ldr	r3, [pc, #56]	@ (80021a0 <__aeabi_ui2d+0x44>)
 8002168:	1a1b      	subs	r3, r3, r0
 800216a:	055b      	lsls	r3, r3, #21
 800216c:	0d5b      	lsrs	r3, r3, #21
 800216e:	280a      	cmp	r0, #10
 8002170:	dc0f      	bgt.n	8002192 <__aeabi_ui2d+0x36>
 8002172:	220b      	movs	r2, #11
 8002174:	0021      	movs	r1, r4
 8002176:	1a12      	subs	r2, r2, r0
 8002178:	40d1      	lsrs	r1, r2
 800217a:	3015      	adds	r0, #21
 800217c:	030a      	lsls	r2, r1, #12
 800217e:	4084      	lsls	r4, r0
 8002180:	0b12      	lsrs	r2, r2, #12
 8002182:	e001      	b.n	8002188 <__aeabi_ui2d+0x2c>
 8002184:	2300      	movs	r3, #0
 8002186:	2200      	movs	r2, #0
 8002188:	051b      	lsls	r3, r3, #20
 800218a:	4313      	orrs	r3, r2
 800218c:	0020      	movs	r0, r4
 800218e:	0019      	movs	r1, r3
 8002190:	bd10      	pop	{r4, pc}
 8002192:	0022      	movs	r2, r4
 8002194:	380b      	subs	r0, #11
 8002196:	4082      	lsls	r2, r0
 8002198:	0312      	lsls	r2, r2, #12
 800219a:	2400      	movs	r4, #0
 800219c:	0b12      	lsrs	r2, r2, #12
 800219e:	e7f3      	b.n	8002188 <__aeabi_ui2d+0x2c>
 80021a0:	0000041e 	.word	0x0000041e

080021a4 <__clzsi2>:
 80021a4:	211c      	movs	r1, #28
 80021a6:	2301      	movs	r3, #1
 80021a8:	041b      	lsls	r3, r3, #16
 80021aa:	4298      	cmp	r0, r3
 80021ac:	d301      	bcc.n	80021b2 <__clzsi2+0xe>
 80021ae:	0c00      	lsrs	r0, r0, #16
 80021b0:	3910      	subs	r1, #16
 80021b2:	0a1b      	lsrs	r3, r3, #8
 80021b4:	4298      	cmp	r0, r3
 80021b6:	d301      	bcc.n	80021bc <__clzsi2+0x18>
 80021b8:	0a00      	lsrs	r0, r0, #8
 80021ba:	3908      	subs	r1, #8
 80021bc:	091b      	lsrs	r3, r3, #4
 80021be:	4298      	cmp	r0, r3
 80021c0:	d301      	bcc.n	80021c6 <__clzsi2+0x22>
 80021c2:	0900      	lsrs	r0, r0, #4
 80021c4:	3904      	subs	r1, #4
 80021c6:	a202      	add	r2, pc, #8	@ (adr r2, 80021d0 <__clzsi2+0x2c>)
 80021c8:	5c10      	ldrb	r0, [r2, r0]
 80021ca:	1840      	adds	r0, r0, r1
 80021cc:	4770      	bx	lr
 80021ce:	46c0      	nop			@ (mov r8, r8)
 80021d0:	02020304 	.word	0x02020304
 80021d4:	01010101 	.word	0x01010101
	...

080021e0 <ledBrightnessTask>:

// Mutex for buzzer access
static SemaphoreHandle_t buzzerMutex;

// Task to handle LED brightness control
void ledBrightnessTask(void *pvParameters) {
 80021e0:	b5b0      	push	{r4, r5, r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
    while(1) {
        uint16_t adc_val = Read_ADC();
 80021e8:	250e      	movs	r5, #14
 80021ea:	197c      	adds	r4, r7, r5
 80021ec:	f001 f8da 	bl	80033a4 <Read_ADC>
 80021f0:	0003      	movs	r3, r0
 80021f2:	8023      	strh	r3, [r4, #0]
//        char buffer[10];
//        stringify_distance(adc_val, buffer);
//        send_string(buffer);
//        send_string("\r\n");
//        vTaskDelay(pdMS_TO_TICKS(1000));
        Set_LED_Brightness(adc_val);
 80021f4:	197b      	adds	r3, r7, r5
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	0018      	movs	r0, r3
 80021fa:	f001 f8e9 	bl	80033d0 <Set_LED_Brightness>
        vTaskDelay(pdMS_TO_TICKS(50));  // Update every 50ms
 80021fe:	2032      	movs	r0, #50	@ 0x32
 8002200:	f002 f932 	bl	8004468 <vTaskDelay>
    while(1) {
 8002204:	46c0      	nop			@ (mov r8, r8)
 8002206:	e7ef      	b.n	80021e8 <ledBrightnessTask+0x8>

08002208 <keypadTask>:
    char action; // '1' for increment, '3' for decrement, '5' for reset
} ScoreUpdate_t;


// Task to handle keypad input
void keypadTask(void *pvParameters) {
 8002208:	b5b0      	push	{r4, r5, r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
    char lastKey = 'z';  // Initialize with an invalid key
 8002210:	230f      	movs	r3, #15
 8002212:	18fb      	adds	r3, r7, r3
 8002214:	227a      	movs	r2, #122	@ 0x7a
 8002216:	701a      	strb	r2, [r3, #0]
    char currentKey;

    while(1) {
        currentKey = keypad_get_key();
 8002218:	250e      	movs	r5, #14
 800221a:	197c      	adds	r4, r7, r5
 800221c:	f000 fad0 	bl	80027c0 <keypad_get_key>
 8002220:	0003      	movs	r3, r0
 8002222:	7023      	strb	r3, [r4, #0]

        // Only process key if it's different from last key and not 'z'
        if(currentKey != 'z' && currentKey != lastKey) {
 8002224:	0029      	movs	r1, r5
 8002226:	187b      	adds	r3, r7, r1
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	2b7a      	cmp	r3, #122	@ 0x7a
 800222c:	d044      	beq.n	80022b8 <keypadTask+0xb0>
 800222e:	187a      	adds	r2, r7, r1
 8002230:	230f      	movs	r3, #15
 8002232:	18fb      	adds	r3, r7, r3
 8002234:	7812      	ldrb	r2, [r2, #0]
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	429a      	cmp	r2, r3
 800223a:	d03d      	beq.n	80022b8 <keypadTask+0xb0>
            ScoreUpdate_t update;
            update.action = currentKey;
 800223c:	240c      	movs	r4, #12
 800223e:	193b      	adds	r3, r7, r4
 8002240:	187a      	adds	r2, r7, r1
 8002242:	7812      	ldrb	r2, [r2, #0]
 8002244:	705a      	strb	r2, [r3, #1]

            switch(currentKey) {
 8002246:	187b      	adds	r3, r7, r1
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	3b31      	subs	r3, #49	@ 0x31
 800224c:	2204      	movs	r2, #4
 800224e:	429a      	cmp	r2, r3
 8002250:	4192      	sbcs	r2, r2
 8002252:	4252      	negs	r2, r2
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	2a00      	cmp	r2, #0
 8002258:	d112      	bne.n	8002280 <keypadTask+0x78>
 800225a:	2215      	movs	r2, #21
 800225c:	40da      	lsrs	r2, r3
 800225e:	0013      	movs	r3, r2
 8002260:	2201      	movs	r2, #1
 8002262:	4013      	ands	r3, r2
 8002264:	1e5a      	subs	r2, r3, #1
 8002266:	4193      	sbcs	r3, r2
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d008      	beq.n	8002280 <keypadTask+0x78>
                case '1':
                case '3':
                case '5':
                    xQueueSend(scoreQueue, &update, portMAX_DELAY);
 800226e:	4b17      	ldr	r3, [pc, #92]	@ (80022cc <keypadTask+0xc4>)
 8002270:	6818      	ldr	r0, [r3, #0]
 8002272:	2301      	movs	r3, #1
 8002274:	425a      	negs	r2, r3
 8002276:	1939      	adds	r1, r7, r4
 8002278:	2300      	movs	r3, #0
 800227a:	f001 fb17 	bl	80038ac <xQueueGenericSend>
                    break;
 800227e:	e01b      	b.n	80022b8 <keypadTask+0xb0>
                default:
                    xSemaphoreTake(lcdMutex, portMAX_DELAY);
 8002280:	4b13      	ldr	r3, [pc, #76]	@ (80022d0 <keypadTask+0xc8>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2201      	movs	r2, #1
 8002286:	4252      	negs	r2, r2
 8002288:	0011      	movs	r1, r2
 800228a:	0018      	movs	r0, r3
 800228c:	f001 fd02 	bl	8003c94 <xQueueSemaphoreTake>
                    lcd_clear();
 8002290:	f000 fbb0 	bl	80029f4 <lcd_clear>
                    lcd_goto(0, 0);
 8002294:	2100      	movs	r1, #0
 8002296:	2000      	movs	r0, #0
 8002298:	f000 fbb7 	bl	8002a0a <lcd_goto>
                    lcd_write_string("invalid");
 800229c:	4b0d      	ldr	r3, [pc, #52]	@ (80022d4 <keypadTask+0xcc>)
 800229e:	0018      	movs	r0, r3
 80022a0:	f000 fbd6 	bl	8002a50 <lcd_write_string>
                    led_sequence2();
 80022a4:	f000 fd30 	bl	8002d08 <led_sequence2>
                    xSemaphoreGive(lcdMutex);
 80022a8:	4b09      	ldr	r3, [pc, #36]	@ (80022d0 <keypadTask+0xc8>)
 80022aa:	6818      	ldr	r0, [r3, #0]
 80022ac:	2300      	movs	r3, #0
 80022ae:	2200      	movs	r2, #0
 80022b0:	2100      	movs	r1, #0
 80022b2:	f001 fafb 	bl	80038ac <xQueueGenericSend>
                    break;
 80022b6:	46c0      	nop			@ (mov r8, r8)
            }
        }

        lastKey = currentKey;  // Update last key
 80022b8:	230f      	movs	r3, #15
 80022ba:	18fb      	adds	r3, r7, r3
 80022bc:	220e      	movs	r2, #14
 80022be:	18ba      	adds	r2, r7, r2
 80022c0:	7812      	ldrb	r2, [r2, #0]
 80022c2:	701a      	strb	r2, [r3, #0]
        vTaskDelay(pdMS_TO_TICKS(50)); // Sampling delay
 80022c4:	2032      	movs	r0, #50	@ 0x32
 80022c6:	f002 f8cf 	bl	8004468 <vTaskDelay>
        currentKey = keypad_get_key();
 80022ca:	e7a5      	b.n	8002218 <keypadTask+0x10>
 80022cc:	2000004c 	.word	0x2000004c
 80022d0:	20000054 	.word	0x20000054
 80022d4:	08005c38 	.word	0x08005c38

080022d8 <displayTask>:
    }
}

// Task to handle display updates
void displayTask(void *pvParameters) {
 80022d8:	b590      	push	{r4, r7, lr}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
    char currentScore = '0';
 80022e0:	230f      	movs	r3, #15
 80022e2:	18fb      	adds	r3, r7, r3
 80022e4:	2230      	movs	r2, #48	@ 0x30
 80022e6:	701a      	strb	r2, [r3, #0]
    ScoreUpdate_t update;

    // Initial display setup
    xSemaphoreTake(lcdMutex, portMAX_DELAY);
 80022e8:	4b3c      	ldr	r3, [pc, #240]	@ (80023dc <displayTask+0x104>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2201      	movs	r2, #1
 80022ee:	4252      	negs	r2, r2
 80022f0:	0011      	movs	r1, r2
 80022f2:	0018      	movs	r0, r3
 80022f4:	f001 fcce 	bl	8003c94 <xQueueSemaphoreTake>
    lcd_goto(0, 0);
 80022f8:	2100      	movs	r1, #0
 80022fa:	2000      	movs	r0, #0
 80022fc:	f000 fb85 	bl	8002a0a <lcd_goto>
    lcd_write_string("Team A");
 8002300:	4b37      	ldr	r3, [pc, #220]	@ (80023e0 <displayTask+0x108>)
 8002302:	0018      	movs	r0, r3
 8002304:	f000 fba4 	bl	8002a50 <lcd_write_string>
    lcd_goto(1, 0);
 8002308:	2100      	movs	r1, #0
 800230a:	2001      	movs	r0, #1
 800230c:	f000 fb7d 	bl	8002a0a <lcd_goto>
    lcd_write_string("Score: 0");
 8002310:	4b34      	ldr	r3, [pc, #208]	@ (80023e4 <displayTask+0x10c>)
 8002312:	0018      	movs	r0, r3
 8002314:	f000 fb9c 	bl	8002a50 <lcd_write_string>
    xSemaphoreGive(lcdMutex);
 8002318:	4b30      	ldr	r3, [pc, #192]	@ (80023dc <displayTask+0x104>)
 800231a:	6818      	ldr	r0, [r3, #0]
 800231c:	2300      	movs	r3, #0
 800231e:	2200      	movs	r2, #0
 8002320:	2100      	movs	r1, #0
 8002322:	f001 fac3 	bl	80038ac <xQueueGenericSend>

    while(1) {
        if(xQueueReceive(scoreQueue, &update, portMAX_DELAY) == pdTRUE) {
 8002326:	4b30      	ldr	r3, [pc, #192]	@ (80023e8 <displayTask+0x110>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2201      	movs	r2, #1
 800232c:	4252      	negs	r2, r2
 800232e:	240c      	movs	r4, #12
 8002330:	1939      	adds	r1, r7, r4
 8002332:	0018      	movs	r0, r3
 8002334:	f001 fbf6 	bl	8003b24 <xQueueReceive>
 8002338:	0003      	movs	r3, r0
 800233a:	2b01      	cmp	r3, #1
 800233c:	d1f3      	bne.n	8002326 <displayTask+0x4e>
            switch(update.action) {
 800233e:	193b      	adds	r3, r7, r4
 8002340:	785b      	ldrb	r3, [r3, #1]
 8002342:	2b35      	cmp	r3, #53	@ 0x35
 8002344:	d017      	beq.n	8002376 <displayTask+0x9e>
 8002346:	dc1c      	bgt.n	8002382 <displayTask+0xaa>
 8002348:	2b31      	cmp	r3, #49	@ 0x31
 800234a:	d002      	beq.n	8002352 <displayTask+0x7a>
 800234c:	2b33      	cmp	r3, #51	@ 0x33
 800234e:	d007      	beq.n	8002360 <displayTask+0x88>
 8002350:	e017      	b.n	8002382 <displayTask+0xaa>
                case '1':
                    currentScore += 1;
 8002352:	220f      	movs	r2, #15
 8002354:	18bb      	adds	r3, r7, r2
 8002356:	18ba      	adds	r2, r7, r2
 8002358:	7812      	ldrb	r2, [r2, #0]
 800235a:	3201      	adds	r2, #1
 800235c:	701a      	strb	r2, [r3, #0]
                    break;
 800235e:	e010      	b.n	8002382 <displayTask+0xaa>
                case '3':
                    if(currentScore > '0') {
 8002360:	220f      	movs	r2, #15
 8002362:	18bb      	adds	r3, r7, r2
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b30      	cmp	r3, #48	@ 0x30
 8002368:	d90a      	bls.n	8002380 <displayTask+0xa8>
                        currentScore -= 1;
 800236a:	18bb      	adds	r3, r7, r2
 800236c:	18ba      	adds	r2, r7, r2
 800236e:	7812      	ldrb	r2, [r2, #0]
 8002370:	3a01      	subs	r2, #1
 8002372:	701a      	strb	r2, [r3, #0]
                    }
                    break;
 8002374:	e004      	b.n	8002380 <displayTask+0xa8>
                case '5':
                    currentScore = '0';
 8002376:	230f      	movs	r3, #15
 8002378:	18fb      	adds	r3, r7, r3
 800237a:	2230      	movs	r2, #48	@ 0x30
 800237c:	701a      	strb	r2, [r3, #0]
                    break;
 800237e:	e000      	b.n	8002382 <displayTask+0xaa>
                    break;
 8002380:	46c0      	nop			@ (mov r8, r8)
            }

            xSemaphoreTake(lcdMutex, portMAX_DELAY);
 8002382:	4b16      	ldr	r3, [pc, #88]	@ (80023dc <displayTask+0x104>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2201      	movs	r2, #1
 8002388:	4252      	negs	r2, r2
 800238a:	0011      	movs	r1, r2
 800238c:	0018      	movs	r0, r3
 800238e:	f001 fc81 	bl	8003c94 <xQueueSemaphoreTake>
            lcd_goto(0, 0);
 8002392:	2100      	movs	r1, #0
 8002394:	2000      	movs	r0, #0
 8002396:	f000 fb38 	bl	8002a0a <lcd_goto>
            lcd_write_string("Team A ");
 800239a:	4b14      	ldr	r3, [pc, #80]	@ (80023ec <displayTask+0x114>)
 800239c:	0018      	movs	r0, r3
 800239e:	f000 fb57 	bl	8002a50 <lcd_write_string>
            lcd_goto(1, 0);
 80023a2:	2100      	movs	r1, #0
 80023a4:	2001      	movs	r0, #1
 80023a6:	f000 fb30 	bl	8002a0a <lcd_goto>
            lcd_write_string("Score: ");
 80023aa:	4b11      	ldr	r3, [pc, #68]	@ (80023f0 <displayTask+0x118>)
 80023ac:	0018      	movs	r0, r3
 80023ae:	f000 fb4f 	bl	8002a50 <lcd_write_string>
            lcd_goto(1, 7);
 80023b2:	2107      	movs	r1, #7
 80023b4:	2001      	movs	r0, #1
 80023b6:	f000 fb28 	bl	8002a0a <lcd_goto>
            lcd_write_char(currentScore);
 80023ba:	230f      	movs	r3, #15
 80023bc:	18fb      	adds	r3, r7, r3
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	0018      	movs	r0, r3
 80023c2:	f000 faef 	bl	80029a4 <lcd_write_char>
            xSemaphoreGive(lcdMutex);
 80023c6:	4b05      	ldr	r3, [pc, #20]	@ (80023dc <displayTask+0x104>)
 80023c8:	6818      	ldr	r0, [r3, #0]
 80023ca:	2300      	movs	r3, #0
 80023cc:	2200      	movs	r2, #0
 80023ce:	2100      	movs	r1, #0
 80023d0:	f001 fa6c 	bl	80038ac <xQueueGenericSend>

            led_sequence1();
 80023d4:	f000 fc24 	bl	8002c20 <led_sequence1>
        if(xQueueReceive(scoreQueue, &update, portMAX_DELAY) == pdTRUE) {
 80023d8:	e7a5      	b.n	8002326 <displayTask+0x4e>
 80023da:	46c0      	nop			@ (mov r8, r8)
 80023dc:	20000054 	.word	0x20000054
 80023e0:	08005c40 	.word	0x08005c40
 80023e4:	08005c48 	.word	0x08005c48
 80023e8:	2000004c 	.word	0x2000004c
 80023ec:	08005c54 	.word	0x08005c54
 80023f0:	08005c5c 	.word	0x08005c5c

080023f4 <distanceTask>:
        }
    }
}

// Task to handle distance measurements
void distanceTask(void *pvParameters) {
 80023f4:	b590      	push	{r4, r7, lr}
 80023f6:	b093      	sub	sp, #76	@ 0x4c
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
    char buffer[50];
    while(1) {
        double distance = get_distance();
 80023fc:	f000 fcde 	bl	8002dbc <get_distance>
 8002400:	0003      	movs	r3, r0
 8002402:	0018      	movs	r0, r3
 8002404:	f7ff fe7c 	bl	8002100 <__aeabi_i2d>
 8002408:	0002      	movs	r2, r0
 800240a:	000b      	movs	r3, r1
 800240c:	60ba      	str	r2, [r7, #8]
 800240e:	60fb      	str	r3, [r7, #12]
        xQueueSend(distanceQueue, &distance, portMAX_DELAY); // Send to queue
 8002410:	4b10      	ldr	r3, [pc, #64]	@ (8002454 <distanceTask+0x60>)
 8002412:	6818      	ldr	r0, [r3, #0]
 8002414:	2301      	movs	r3, #1
 8002416:	425a      	negs	r2, r3
 8002418:	2308      	movs	r3, #8
 800241a:	18f9      	adds	r1, r7, r3
 800241c:	2300      	movs	r3, #0
 800241e:	f001 fa45 	bl	80038ac <xQueueGenericSend>
        send_string("The distance is ");
 8002422:	4b0d      	ldr	r3, [pc, #52]	@ (8002458 <distanceTask+0x64>)
 8002424:	0018      	movs	r0, r3
 8002426:	f000 fdc9 	bl	8002fbc <send_string>
        stringify_distance(distance, buffer);
 800242a:	68b8      	ldr	r0, [r7, #8]
 800242c:	68f9      	ldr	r1, [r7, #12]
 800242e:	2414      	movs	r4, #20
 8002430:	193b      	adds	r3, r7, r4
 8002432:	001a      	movs	r2, r3
 8002434:	f000 fdd8 	bl	8002fe8 <stringify_distance>
        send_string(buffer);
 8002438:	193b      	adds	r3, r7, r4
 800243a:	0018      	movs	r0, r3
 800243c:	f000 fdbe 	bl	8002fbc <send_string>
        send_string(" cm\r\n");
 8002440:	4b06      	ldr	r3, [pc, #24]	@ (800245c <distanceTask+0x68>)
 8002442:	0018      	movs	r0, r3
 8002444:	f000 fdba 	bl	8002fbc <send_string>
        vTaskDelay(pdMS_TO_TICKS(100)); // Adjust measurement frequency as needed
 8002448:	2064      	movs	r0, #100	@ 0x64
 800244a:	f002 f80d 	bl	8004468 <vTaskDelay>
    while(1) {
 800244e:	46c0      	nop			@ (mov r8, r8)
 8002450:	e7d4      	b.n	80023fc <distanceTask+0x8>
 8002452:	46c0      	nop			@ (mov r8, r8)
 8002454:	20000050 	.word	0x20000050
 8002458:	08005c64 	.word	0x08005c64
 800245c:	08005c78 	.word	0x08005c78

08002460 <buzzerTask>:
    }
}

void buzzerTask(void *pvParameters) {
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
    double distance;
    while(1) {
        if (xQueueReceive(distanceQueue, &distance, portMAX_DELAY)) {
 8002468:	4b10      	ldr	r3, [pc, #64]	@ (80024ac <buzzerTask+0x4c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2201      	movs	r2, #1
 800246e:	4252      	negs	r2, r2
 8002470:	2108      	movs	r1, #8
 8002472:	1879      	adds	r1, r7, r1
 8002474:	0018      	movs	r0, r3
 8002476:	f001 fb55 	bl	8003b24 <xQueueReceive>
 800247a:	1e03      	subs	r3, r0, #0
 800247c:	d0f4      	beq.n	8002468 <buzzerTask+0x8>
            // Take the buzzer mutex before accessing the buzzer
            xSemaphoreTake(buzzerMutex, portMAX_DELAY);
 800247e:	4b0c      	ldr	r3, [pc, #48]	@ (80024b0 <buzzerTask+0x50>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2201      	movs	r2, #1
 8002484:	4252      	negs	r2, r2
 8002486:	0011      	movs	r1, r2
 8002488:	0018      	movs	r0, r3
 800248a:	f001 fc03 	bl	8003c94 <xQueueSemaphoreTake>

            // Call your trigger_buzzer function
            trigger_buzzer(distance);
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	0010      	movs	r0, r2
 8002494:	0019      	movs	r1, r3
 8002496:	f000 fcf3 	bl	8002e80 <trigger_buzzer>

            // Release the buzzer mutex after the operation
            xSemaphoreGive(buzzerMutex);
 800249a:	4b05      	ldr	r3, [pc, #20]	@ (80024b0 <buzzerTask+0x50>)
 800249c:	6818      	ldr	r0, [r3, #0]
 800249e:	2300      	movs	r3, #0
 80024a0:	2200      	movs	r2, #0
 80024a2:	2100      	movs	r1, #0
 80024a4:	f001 fa02 	bl	80038ac <xQueueGenericSend>
        if (xQueueReceive(distanceQueue, &distance, portMAX_DELAY)) {
 80024a8:	e7de      	b.n	8002468 <buzzerTask+0x8>
 80024aa:	46c0      	nop			@ (mov r8, r8)
 80024ac:	20000050 	.word	0x20000050
 80024b0:	20000058 	.word	0x20000058

080024b4 <main>:
        }
    }
}

int main(void) {
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af02      	add	r7, sp, #8
    // Initialize peripherals
    lcd_init();
 80024ba:	f000 f9e5 	bl	8002888 <lcd_init>
    lcd_clear();
 80024be:	f000 fa99 	bl	80029f4 <lcd_clear>
    keypad_init();
 80024c2:	f000 f93f 	bl	8002744 <keypad_init>
    setup_LEDS();
 80024c6:	f000 fad9 	bl	8002a7c <setup_LEDS>
    setup_timer();
 80024ca:	f000 fb67 	bl	8002b9c <setup_timer>
    setup_WDT();
 80024ce:	f000 fb93 	bl	8002bf8 <setup_WDT>
    Peri_Init();
 80024d2:	f000 fcfb 	bl	8002ecc <Peri_Init>
    configure_UART();
 80024d6:	f000 fe55 	bl	8003184 <configure_UART>
    ADC_Init();
 80024da:	f000 feb7 	bl	800324c <ADC_Init>
    PWM_Init();
 80024de:	f000 ff01 	bl	80032e4 <PWM_Init>

    // Create FreeRTOS synchronization primitives
    scoreQueue = xQueueCreate(5, sizeof(ScoreUpdate_t));
 80024e2:	2200      	movs	r2, #0
 80024e4:	2102      	movs	r1, #2
 80024e6:	2005      	movs	r0, #5
 80024e8:	f001 f94c 	bl	8003784 <xQueueGenericCreate>
 80024ec:	0002      	movs	r2, r0
 80024ee:	4b2d      	ldr	r3, [pc, #180]	@ (80025a4 <main+0xf0>)
 80024f0:	601a      	str	r2, [r3, #0]
    distanceQueue = xQueueCreate(5, sizeof(double)); // Create the distance queue
 80024f2:	2200      	movs	r2, #0
 80024f4:	2108      	movs	r1, #8
 80024f6:	2005      	movs	r0, #5
 80024f8:	f001 f944 	bl	8003784 <xQueueGenericCreate>
 80024fc:	0002      	movs	r2, r0
 80024fe:	4b2a      	ldr	r3, [pc, #168]	@ (80025a8 <main+0xf4>)
 8002500:	601a      	str	r2, [r3, #0]
    lcdMutex = xSemaphoreCreateMutex();
 8002502:	2001      	movs	r0, #1
 8002504:	f001 f9b6 	bl	8003874 <xQueueCreateMutex>
 8002508:	0002      	movs	r2, r0
 800250a:	4b28      	ldr	r3, [pc, #160]	@ (80025ac <main+0xf8>)
 800250c:	601a      	str	r2, [r3, #0]
    buzzerMutex = xSemaphoreCreateMutex();
 800250e:	2001      	movs	r0, #1
 8002510:	f001 f9b0 	bl	8003874 <xQueueCreateMutex>
 8002514:	0002      	movs	r2, r0
 8002516:	4b26      	ldr	r3, [pc, #152]	@ (80025b0 <main+0xfc>)
 8002518:	601a      	str	r2, [r3, #0]

    if (scoreQueue == NULL || distanceQueue == NULL || lcdMutex == NULL) {
 800251a:	4b22      	ldr	r3, [pc, #136]	@ (80025a4 <main+0xf0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d008      	beq.n	8002534 <main+0x80>
 8002522:	4b21      	ldr	r3, [pc, #132]	@ (80025a8 <main+0xf4>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d004      	beq.n	8002534 <main+0x80>
 800252a:	4b20      	ldr	r3, [pc, #128]	@ (80025ac <main+0xf8>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d000      	beq.n	8002534 <main+0x80>
 8002532:	e000      	b.n	8002536 <main+0x82>
        // Handle resource creation failure
        while(1);
 8002534:	e7fe      	b.n	8002534 <main+0x80>
    }

    // Create tasks
    xTaskCreate(keypadTask,
 8002536:	491f      	ldr	r1, [pc, #124]	@ (80025b4 <main+0x100>)
 8002538:	481f      	ldr	r0, [pc, #124]	@ (80025b8 <main+0x104>)
 800253a:	4b20      	ldr	r3, [pc, #128]	@ (80025bc <main+0x108>)
 800253c:	9301      	str	r3, [sp, #4]
 800253e:	2303      	movs	r3, #3
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	2300      	movs	r3, #0
 8002544:	2280      	movs	r2, #128	@ 0x80
 8002546:	f001 fe58 	bl	80041fa <xTaskCreate>
                configMINIMAL_STACK_SIZE,
                NULL,
                KEYPAD_TASK_PRIORITY,
                &keypadTaskHandle);

    xTaskCreate(displayTask,
 800254a:	491d      	ldr	r1, [pc, #116]	@ (80025c0 <main+0x10c>)
 800254c:	481d      	ldr	r0, [pc, #116]	@ (80025c4 <main+0x110>)
 800254e:	4b1e      	ldr	r3, [pc, #120]	@ (80025c8 <main+0x114>)
 8002550:	9301      	str	r3, [sp, #4]
 8002552:	2301      	movs	r3, #1
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	2300      	movs	r3, #0
 8002558:	2280      	movs	r2, #128	@ 0x80
 800255a:	f001 fe4e 	bl	80041fa <xTaskCreate>
                configMINIMAL_STACK_SIZE,
                NULL,
                DISPLAY_TASK_PRIORITY,
                &displayTaskHandle);

    xTaskCreate(distanceTask,
 800255e:	491b      	ldr	r1, [pc, #108]	@ (80025cc <main+0x118>)
 8002560:	481b      	ldr	r0, [pc, #108]	@ (80025d0 <main+0x11c>)
 8002562:	4b1c      	ldr	r3, [pc, #112]	@ (80025d4 <main+0x120>)
 8002564:	9301      	str	r3, [sp, #4]
 8002566:	2302      	movs	r3, #2
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	2300      	movs	r3, #0
 800256c:	2280      	movs	r2, #128	@ 0x80
 800256e:	f001 fe44 	bl	80041fa <xTaskCreate>
                configMINIMAL_STACK_SIZE,
                NULL,
                DISTANCE_TASK_PRIORITY,
                &distanceTaskHandle);

    xTaskCreate(ledBrightnessTask,
 8002572:	4919      	ldr	r1, [pc, #100]	@ (80025d8 <main+0x124>)
 8002574:	4819      	ldr	r0, [pc, #100]	@ (80025dc <main+0x128>)
 8002576:	4b1a      	ldr	r3, [pc, #104]	@ (80025e0 <main+0x12c>)
 8002578:	9301      	str	r3, [sp, #4]
 800257a:	2301      	movs	r3, #1
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	2300      	movs	r3, #0
 8002580:	2280      	movs	r2, #128	@ 0x80
 8002582:	f001 fe3a 	bl	80041fa <xTaskCreate>
                configMINIMAL_STACK_SIZE,
                NULL,
                LED_TASK_PRIORITY,
                &ledTaskHandle);

    xTaskCreate(buzzerTask,
 8002586:	4917      	ldr	r1, [pc, #92]	@ (80025e4 <main+0x130>)
 8002588:	4817      	ldr	r0, [pc, #92]	@ (80025e8 <main+0x134>)
 800258a:	4b18      	ldr	r3, [pc, #96]	@ (80025ec <main+0x138>)
 800258c:	9301      	str	r3, [sp, #4]
 800258e:	2302      	movs	r3, #2
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	2300      	movs	r3, #0
 8002594:	2280      	movs	r2, #128	@ 0x80
 8002596:	f001 fe30 	bl	80041fa <xTaskCreate>
                NULL,
                BUZZER_TASK_PRIORITY,
                &buzzerTaskHandle);

    // Start the scheduler
    vTaskStartScheduler();
 800259a:	f001 ff8b 	bl	80044b4 <vTaskStartScheduler>

    // Should never get here
    while(1);
 800259e:	46c0      	nop			@ (mov r8, r8)
 80025a0:	e7fd      	b.n	800259e <main+0xea>
 80025a2:	46c0      	nop			@ (mov r8, r8)
 80025a4:	2000004c 	.word	0x2000004c
 80025a8:	20000050 	.word	0x20000050
 80025ac:	20000054 	.word	0x20000054
 80025b0:	20000058 	.word	0x20000058
 80025b4:	08005c80 	.word	0x08005c80
 80025b8:	08002209 	.word	0x08002209
 80025bc:	20000038 	.word	0x20000038
 80025c0:	08005c88 	.word	0x08005c88
 80025c4:	080022d9 	.word	0x080022d9
 80025c8:	2000003c 	.word	0x2000003c
 80025cc:	08005c90 	.word	0x08005c90
 80025d0:	080023f5 	.word	0x080023f5
 80025d4:	20000040 	.word	0x20000040
 80025d8:	08005c9c 	.word	0x08005c9c
 80025dc:	080021e1 	.word	0x080021e1
 80025e0:	20000044 	.word	0x20000044
 80025e4:	08005ca0 	.word	0x08005ca0
 80025e8:	08002461 	.word	0x08002461
 80025ec:	20000048 	.word	0x20000048

080025f0 <TIM3_IRQHandler>:
}

void TIM3_IRQHandler(void) {
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
    timerHandler();
 80025f4:	f003 fb10 	bl	8005c18 <_etext>
}
 80025f8:	46c0      	nop			@ (mov r8, r8)
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002602:	46c0      	nop			@ (mov r8, r8)
 8002604:	e7fd      	b.n	8002602 <NMI_Handler+0x4>

08002606 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800260a:	46c0      	nop			@ (mov r8, r8)
 800260c:	e7fd      	b.n	800260a <HardFault_Handler+0x4>

0800260e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002612:	f000 ff27 	bl	8003464 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002616:	f002 fb37 	bl	8004c88 <xTaskGetSchedulerState>
 800261a:	0003      	movs	r3, r0
 800261c:	2b01      	cmp	r3, #1
 800261e:	d001      	beq.n	8002624 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002620:	f003 f8d2 	bl	80057c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002624:	46c0      	nop			@ (mov r8, r8)
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800262e:	46c0      	nop			@ (mov r8, r8)
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	0002      	movs	r2, r0
 800263c:	1dfb      	adds	r3, r7, #7
 800263e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002640:	1dfb      	adds	r3, r7, #7
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b7f      	cmp	r3, #127	@ 0x7f
 8002646:	d809      	bhi.n	800265c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002648:	1dfb      	adds	r3, r7, #7
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	001a      	movs	r2, r3
 800264e:	231f      	movs	r3, #31
 8002650:	401a      	ands	r2, r3
 8002652:	4b04      	ldr	r3, [pc, #16]	@ (8002664 <__NVIC_EnableIRQ+0x30>)
 8002654:	2101      	movs	r1, #1
 8002656:	4091      	lsls	r1, r2
 8002658:	000a      	movs	r2, r1
 800265a:	601a      	str	r2, [r3, #0]
  }
}
 800265c:	46c0      	nop			@ (mov r8, r8)
 800265e:	46bd      	mov	sp, r7
 8002660:	b002      	add	sp, #8
 8002662:	bd80      	pop	{r7, pc}
 8002664:	e000e100 	.word	0xe000e100

08002668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002668:	b590      	push	{r4, r7, lr}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	0002      	movs	r2, r0
 8002670:	6039      	str	r1, [r7, #0]
 8002672:	1dfb      	adds	r3, r7, #7
 8002674:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002676:	1dfb      	adds	r3, r7, #7
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b7f      	cmp	r3, #127	@ 0x7f
 800267c:	d828      	bhi.n	80026d0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800267e:	4a2f      	ldr	r2, [pc, #188]	@ (800273c <__NVIC_SetPriority+0xd4>)
 8002680:	1dfb      	adds	r3, r7, #7
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	b25b      	sxtb	r3, r3
 8002686:	089b      	lsrs	r3, r3, #2
 8002688:	33c0      	adds	r3, #192	@ 0xc0
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	589b      	ldr	r3, [r3, r2]
 800268e:	1dfa      	adds	r2, r7, #7
 8002690:	7812      	ldrb	r2, [r2, #0]
 8002692:	0011      	movs	r1, r2
 8002694:	2203      	movs	r2, #3
 8002696:	400a      	ands	r2, r1
 8002698:	00d2      	lsls	r2, r2, #3
 800269a:	21ff      	movs	r1, #255	@ 0xff
 800269c:	4091      	lsls	r1, r2
 800269e:	000a      	movs	r2, r1
 80026a0:	43d2      	mvns	r2, r2
 80026a2:	401a      	ands	r2, r3
 80026a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	019b      	lsls	r3, r3, #6
 80026aa:	22ff      	movs	r2, #255	@ 0xff
 80026ac:	401a      	ands	r2, r3
 80026ae:	1dfb      	adds	r3, r7, #7
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	0018      	movs	r0, r3
 80026b4:	2303      	movs	r3, #3
 80026b6:	4003      	ands	r3, r0
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026bc:	481f      	ldr	r0, [pc, #124]	@ (800273c <__NVIC_SetPriority+0xd4>)
 80026be:	1dfb      	adds	r3, r7, #7
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	b25b      	sxtb	r3, r3
 80026c4:	089b      	lsrs	r3, r3, #2
 80026c6:	430a      	orrs	r2, r1
 80026c8:	33c0      	adds	r3, #192	@ 0xc0
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80026ce:	e031      	b.n	8002734 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026d0:	4a1b      	ldr	r2, [pc, #108]	@ (8002740 <__NVIC_SetPriority+0xd8>)
 80026d2:	1dfb      	adds	r3, r7, #7
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	0019      	movs	r1, r3
 80026d8:	230f      	movs	r3, #15
 80026da:	400b      	ands	r3, r1
 80026dc:	3b08      	subs	r3, #8
 80026de:	089b      	lsrs	r3, r3, #2
 80026e0:	3306      	adds	r3, #6
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	18d3      	adds	r3, r2, r3
 80026e6:	3304      	adds	r3, #4
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	1dfa      	adds	r2, r7, #7
 80026ec:	7812      	ldrb	r2, [r2, #0]
 80026ee:	0011      	movs	r1, r2
 80026f0:	2203      	movs	r2, #3
 80026f2:	400a      	ands	r2, r1
 80026f4:	00d2      	lsls	r2, r2, #3
 80026f6:	21ff      	movs	r1, #255	@ 0xff
 80026f8:	4091      	lsls	r1, r2
 80026fa:	000a      	movs	r2, r1
 80026fc:	43d2      	mvns	r2, r2
 80026fe:	401a      	ands	r2, r3
 8002700:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	019b      	lsls	r3, r3, #6
 8002706:	22ff      	movs	r2, #255	@ 0xff
 8002708:	401a      	ands	r2, r3
 800270a:	1dfb      	adds	r3, r7, #7
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	0018      	movs	r0, r3
 8002710:	2303      	movs	r3, #3
 8002712:	4003      	ands	r3, r0
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002718:	4809      	ldr	r0, [pc, #36]	@ (8002740 <__NVIC_SetPriority+0xd8>)
 800271a:	1dfb      	adds	r3, r7, #7
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	001c      	movs	r4, r3
 8002720:	230f      	movs	r3, #15
 8002722:	4023      	ands	r3, r4
 8002724:	3b08      	subs	r3, #8
 8002726:	089b      	lsrs	r3, r3, #2
 8002728:	430a      	orrs	r2, r1
 800272a:	3306      	adds	r3, #6
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	18c3      	adds	r3, r0, r3
 8002730:	3304      	adds	r3, #4
 8002732:	601a      	str	r2, [r3, #0]
}
 8002734:	46c0      	nop			@ (mov r8, r8)
 8002736:	46bd      	mov	sp, r7
 8002738:	b003      	add	sp, #12
 800273a:	bd90      	pop	{r4, r7, pc}
 800273c:	e000e100 	.word	0xe000e100
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <keypad_init>:
	    {'7', '8', '9', 'C'},
	    {'*', '0', '#', 'D'}
	};

// Initialize keypad
void keypad_init() {
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
    // Configure GPIO pins for keypad
    // Set up input/output modes, pull-ups, etc.

	RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8002748:	4b1a      	ldr	r3, [pc, #104]	@ (80027b4 <keypad_init+0x70>)
 800274a:	695a      	ldr	r2, [r3, #20]
 800274c:	4b19      	ldr	r3, [pc, #100]	@ (80027b4 <keypad_init+0x70>)
 800274e:	2180      	movs	r1, #128	@ 0x80
 8002750:	0309      	lsls	r1, r1, #12
 8002752:	430a      	orrs	r2, r1
 8002754:	615a      	str	r2, [r3, #20]

	// Row pins are PC0 - PC3
	ROW_PORT->MODER &= ~0x000000FF;
 8002756:	4b18      	ldr	r3, [pc, #96]	@ (80027b8 <keypad_init+0x74>)
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	4b17      	ldr	r3, [pc, #92]	@ (80027b8 <keypad_init+0x74>)
 800275c:	21ff      	movs	r1, #255	@ 0xff
 800275e:	438a      	bics	r2, r1
 8002760:	601a      	str	r2, [r3, #0]
	ROW_PORT->MODER |= 0x00000055;
 8002762:	4b15      	ldr	r3, [pc, #84]	@ (80027b8 <keypad_init+0x74>)
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	4b14      	ldr	r3, [pc, #80]	@ (80027b8 <keypad_init+0x74>)
 8002768:	2155      	movs	r1, #85	@ 0x55
 800276a:	430a      	orrs	r2, r1
 800276c:	601a      	str	r2, [r3, #0]
	ROW_PORT->OTYPER &= ~ROW_PINS;
 800276e:	4b12      	ldr	r3, [pc, #72]	@ (80027b8 <keypad_init+0x74>)
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	4b11      	ldr	r3, [pc, #68]	@ (80027b8 <keypad_init+0x74>)
 8002774:	210f      	movs	r1, #15
 8002776:	438a      	bics	r2, r1
 8002778:	605a      	str	r2, [r3, #4]
	ROW_PORT->OSPEEDR &= ~0x000000FF;
 800277a:	4b0f      	ldr	r3, [pc, #60]	@ (80027b8 <keypad_init+0x74>)
 800277c:	689a      	ldr	r2, [r3, #8]
 800277e:	4b0e      	ldr	r3, [pc, #56]	@ (80027b8 <keypad_init+0x74>)
 8002780:	21ff      	movs	r1, #255	@ 0xff
 8002782:	438a      	bics	r2, r1
 8002784:	609a      	str	r2, [r3, #8]

	// Column pins are PC4 - PC7
	COL_PORT->MODER &= ~0x0000FF00;
 8002786:	4b0c      	ldr	r3, [pc, #48]	@ (80027b8 <keypad_init+0x74>)
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	4b0b      	ldr	r3, [pc, #44]	@ (80027b8 <keypad_init+0x74>)
 800278c:	490b      	ldr	r1, [pc, #44]	@ (80027bc <keypad_init+0x78>)
 800278e:	400a      	ands	r2, r1
 8002790:	601a      	str	r2, [r3, #0]
	COL_PORT->PUPDR &= ~0x0000FF00;
 8002792:	4b09      	ldr	r3, [pc, #36]	@ (80027b8 <keypad_init+0x74>)
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	4b08      	ldr	r3, [pc, #32]	@ (80027b8 <keypad_init+0x74>)
 8002798:	4908      	ldr	r1, [pc, #32]	@ (80027bc <keypad_init+0x78>)
 800279a:	400a      	ands	r2, r1
 800279c:	60da      	str	r2, [r3, #12]
	COL_PORT->PUPDR |= 0x0000AA00;
 800279e:	4b06      	ldr	r3, [pc, #24]	@ (80027b8 <keypad_init+0x74>)
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	4b05      	ldr	r3, [pc, #20]	@ (80027b8 <keypad_init+0x74>)
 80027a4:	21aa      	movs	r1, #170	@ 0xaa
 80027a6:	0209      	lsls	r1, r1, #8
 80027a8:	430a      	orrs	r2, r1
 80027aa:	60da      	str	r2, [r3, #12]

}
 80027ac:	46c0      	nop			@ (mov r8, r8)
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	46c0      	nop			@ (mov r8, r8)
 80027b4:	40021000 	.word	0x40021000
 80027b8:	48000800 	.word	0x48000800
 80027bc:	ffff00ff 	.word	0xffff00ff

080027c0 <keypad_get_key>:

// Read input from the keypad
char keypad_get_key(void) {
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
    // Scan the keypad matrix
    // Return the detected keypress as a character
	for (int row = 0; row < 4; row++) {
 80027c6:	2300      	movs	r3, #0
 80027c8:	607b      	str	r3, [r7, #4]
 80027ca:	e021      	b.n	8002810 <keypad_get_key+0x50>
	        ROW_PORT->ODR = (1 << row);
 80027cc:	2201      	movs	r2, #1
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	409a      	lsls	r2, r3
 80027d2:	4b13      	ldr	r3, [pc, #76]	@ (8002820 <keypad_get_key+0x60>)
 80027d4:	615a      	str	r2, [r3, #20]

	        for (int col = 0; col < 4; col++) {
 80027d6:	2300      	movs	r3, #0
 80027d8:	603b      	str	r3, [r7, #0]
 80027da:	e013      	b.n	8002804 <keypad_get_key+0x44>
	            if (COL_PORT->IDR & (1 << (col + 4))) {
 80027dc:	4b10      	ldr	r3, [pc, #64]	@ (8002820 <keypad_get_key+0x60>)
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	3204      	adds	r2, #4
 80027e4:	2101      	movs	r1, #1
 80027e6:	4091      	lsls	r1, r2
 80027e8:	000a      	movs	r2, r1
 80027ea:	4013      	ands	r3, r2
 80027ec:	d007      	beq.n	80027fe <keypad_get_key+0x3e>
	                return keypad_matrix[row][col];
 80027ee:	4a0d      	ldr	r2, [pc, #52]	@ (8002824 <keypad_get_key+0x64>)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	18d2      	adds	r2, r2, r3
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	18d3      	adds	r3, r2, r3
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	e00c      	b.n	8002818 <keypad_get_key+0x58>
	        for (int col = 0; col < 4; col++) {
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	3301      	adds	r3, #1
 8002802:	603b      	str	r3, [r7, #0]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	2b03      	cmp	r3, #3
 8002808:	dde8      	ble.n	80027dc <keypad_get_key+0x1c>
	for (int row = 0; row < 4; row++) {
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	3301      	adds	r3, #1
 800280e:	607b      	str	r3, [r7, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b03      	cmp	r3, #3
 8002814:	ddda      	ble.n	80027cc <keypad_get_key+0xc>
	            }
	        }
	    }
	return 'z';
 8002816:	237a      	movs	r3, #122	@ 0x7a
}
 8002818:	0018      	movs	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	b002      	add	sp, #8
 800281e:	bd80      	pop	{r7, pc}
 8002820:	48000800 	.word	0x48000800
 8002824:	20000004 	.word	0x20000004

08002828 <delay_ms>:

// Millisecond delay using busy-wait
void delay_ms(int ms) {
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < ms * 2000; i++) {
 8002830:	2300      	movs	r3, #0
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	e003      	b.n	800283e <delay_ms+0x16>
        asm("nop");
 8002836:	46c0      	nop			@ (mov r8, r8)
    for (int i = 0; i < ms * 2000; i++) {
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	3301      	adds	r3, #1
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	0013      	movs	r3, r2
 8002842:	015b      	lsls	r3, r3, #5
 8002844:	1a9b      	subs	r3, r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	189b      	adds	r3, r3, r2
 800284a:	011b      	lsls	r3, r3, #4
 800284c:	001a      	movs	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	4293      	cmp	r3, r2
 8002852:	dbf0      	blt.n	8002836 <delay_ms+0xe>
    }
}
 8002854:	46c0      	nop			@ (mov r8, r8)
 8002856:	46c0      	nop			@ (mov r8, r8)
 8002858:	46bd      	mov	sp, r7
 800285a:	b004      	add	sp, #16
 800285c:	bd80      	pop	{r7, pc}

0800285e <delay_us>:

// Microsecond delay using busy-wait
void delay_us(int us) {
 800285e:	b580      	push	{r7, lr}
 8002860:	b084      	sub	sp, #16
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < us * 2; i++) {
 8002866:	2300      	movs	r3, #0
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	e003      	b.n	8002874 <delay_us+0x16>
        asm("nop");
 800286c:	46c0      	nop			@ (mov r8, r8)
    for (int i = 0; i < us * 2; i++) {
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	3301      	adds	r3, #1
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	429a      	cmp	r2, r3
 800287c:	dbf6      	blt.n	800286c <delay_us+0xe>
    }
}
 800287e:	46c0      	nop			@ (mov r8, r8)
 8002880:	46c0      	nop			@ (mov r8, r8)
 8002882:	46bd      	mov	sp, r7
 8002884:	b004      	add	sp, #16
 8002886:	bd80      	pop	{r7, pc}

08002888 <lcd_init>:

// LCD initialization function
void lcd_init(void) {
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
    // Enable clocks for GPIOA and GPIOB
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOBEN;
 800288c:	4b2c      	ldr	r3, [pc, #176]	@ (8002940 <lcd_init+0xb8>)
 800288e:	695a      	ldr	r2, [r3, #20]
 8002890:	4b2b      	ldr	r3, [pc, #172]	@ (8002940 <lcd_init+0xb8>)
 8002892:	21c0      	movs	r1, #192	@ 0xc0
 8002894:	02c9      	lsls	r1, r1, #11
 8002896:	430a      	orrs	r2, r1
 8002898:	615a      	str	r2, [r3, #20]

    // Configure PA0 (RS) and PA1 (E) as output
    GPIOA->MODER &= ~((3 << (2 * 4)) | (3 << (2 * 1)));
 800289a:	2390      	movs	r3, #144	@ 0x90
 800289c:	05db      	lsls	r3, r3, #23
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	2390      	movs	r3, #144	@ 0x90
 80028a2:	05db      	lsls	r3, r3, #23
 80028a4:	4927      	ldr	r1, [pc, #156]	@ (8002944 <lcd_init+0xbc>)
 80028a6:	400a      	ands	r2, r1
 80028a8:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |= (1 << (2 * 4)) | (1 << (2 * 1));
 80028aa:	2390      	movs	r3, #144	@ 0x90
 80028ac:	05db      	lsls	r3, r3, #23
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	2390      	movs	r3, #144	@ 0x90
 80028b2:	05db      	lsls	r3, r3, #23
 80028b4:	2182      	movs	r1, #130	@ 0x82
 80028b6:	0049      	lsls	r1, r1, #1
 80028b8:	430a      	orrs	r2, r1
 80028ba:	601a      	str	r2, [r3, #0]
    GPIOA->OTYPER &= ~((1 << 4) | (1 << 1));
 80028bc:	2390      	movs	r3, #144	@ 0x90
 80028be:	05db      	lsls	r3, r3, #23
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	2390      	movs	r3, #144	@ 0x90
 80028c4:	05db      	lsls	r3, r3, #23
 80028c6:	2112      	movs	r1, #18
 80028c8:	438a      	bics	r2, r1
 80028ca:	605a      	str	r2, [r3, #4]
    GPIOA->OSPEEDR &= ~((3 << (2 * 4)) | (3 << (2 * 1)));
 80028cc:	2390      	movs	r3, #144	@ 0x90
 80028ce:	05db      	lsls	r3, r3, #23
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	2390      	movs	r3, #144	@ 0x90
 80028d4:	05db      	lsls	r3, r3, #23
 80028d6:	491b      	ldr	r1, [pc, #108]	@ (8002944 <lcd_init+0xbc>)
 80028d8:	400a      	ands	r2, r1
 80028da:	609a      	str	r2, [r3, #8]

    // Configure PB0 - PB7 as outputs for data
    GPIOB->MODER &= ~0xFFFF;
 80028dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002948 <lcd_init+0xc0>)
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	4b19      	ldr	r3, [pc, #100]	@ (8002948 <lcd_init+0xc0>)
 80028e2:	0c12      	lsrs	r2, r2, #16
 80028e4:	0412      	lsls	r2, r2, #16
 80028e6:	601a      	str	r2, [r3, #0]
    GPIOB->MODER |= 0x5555;
 80028e8:	4b17      	ldr	r3, [pc, #92]	@ (8002948 <lcd_init+0xc0>)
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	4b16      	ldr	r3, [pc, #88]	@ (8002948 <lcd_init+0xc0>)
 80028ee:	4917      	ldr	r1, [pc, #92]	@ (800294c <lcd_init+0xc4>)
 80028f0:	430a      	orrs	r2, r1
 80028f2:	601a      	str	r2, [r3, #0]
    GPIOB->OTYPER &= ~0x00FF;
 80028f4:	4b14      	ldr	r3, [pc, #80]	@ (8002948 <lcd_init+0xc0>)
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	4b13      	ldr	r3, [pc, #76]	@ (8002948 <lcd_init+0xc0>)
 80028fa:	21ff      	movs	r1, #255	@ 0xff
 80028fc:	438a      	bics	r2, r1
 80028fe:	605a      	str	r2, [r3, #4]
    GPIOB->OSPEEDR &= ~0xFFFF;
 8002900:	4b11      	ldr	r3, [pc, #68]	@ (8002948 <lcd_init+0xc0>)
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	4b10      	ldr	r3, [pc, #64]	@ (8002948 <lcd_init+0xc0>)
 8002906:	0c12      	lsrs	r2, r2, #16
 8002908:	0412      	lsls	r2, r2, #16
 800290a:	609a      	str	r2, [r3, #8]

    // LCD initialization sequence
    delay_ms(50);
 800290c:	2032      	movs	r0, #50	@ 0x32
 800290e:	f7ff ff8b 	bl	8002828 <delay_ms>
    lcd_write_instruction(0x38); // Set 8-bit mode, 2-line, 5x8 font
 8002912:	2038      	movs	r0, #56	@ 0x38
 8002914:	f000 f81c 	bl	8002950 <lcd_write_instruction>
    delay_ms(5);
 8002918:	2005      	movs	r0, #5
 800291a:	f7ff ff85 	bl	8002828 <delay_ms>
    lcd_write_instruction(0x0C); // Display ON, cursor OFF
 800291e:	200c      	movs	r0, #12
 8002920:	f000 f816 	bl	8002950 <lcd_write_instruction>
    delay_ms(5);
 8002924:	2005      	movs	r0, #5
 8002926:	f7ff ff7f 	bl	8002828 <delay_ms>
    lcd_write_instruction(0x06); // Entry mode set
 800292a:	2006      	movs	r0, #6
 800292c:	f000 f810 	bl	8002950 <lcd_write_instruction>
    delay_ms(5);
 8002930:	2005      	movs	r0, #5
 8002932:	f7ff ff79 	bl	8002828 <delay_ms>
    lcd_clear();                 // Clear display
 8002936:	f000 f85d 	bl	80029f4 <lcd_clear>
}
 800293a:	46c0      	nop			@ (mov r8, r8)
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40021000 	.word	0x40021000
 8002944:	fffffcf3 	.word	0xfffffcf3
 8002948:	48000400 	.word	0x48000400
 800294c:	00005555 	.word	0x00005555

08002950 <lcd_write_instruction>:

// Send an instruction to the LCD
void lcd_write_instruction(uint8_t instruction) {
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	0002      	movs	r2, r0
 8002958:	1dfb      	adds	r3, r7, #7
 800295a:	701a      	strb	r2, [r3, #0]
    RS_LOW();                    // Instruction mode
 800295c:	2390      	movs	r3, #144	@ 0x90
 800295e:	05db      	lsls	r3, r3, #23
 8002960:	2280      	movs	r2, #128	@ 0x80
 8002962:	0352      	lsls	r2, r2, #13
 8002964:	619a      	str	r2, [r3, #24]
    E_LOW();
 8002966:	2390      	movs	r3, #144	@ 0x90
 8002968:	05db      	lsls	r3, r3, #23
 800296a:	2280      	movs	r2, #128	@ 0x80
 800296c:	0292      	lsls	r2, r2, #10
 800296e:	619a      	str	r2, [r3, #24]
    GPIOB->ODR = instruction;    // Send instruction
 8002970:	4b0b      	ldr	r3, [pc, #44]	@ (80029a0 <lcd_write_instruction+0x50>)
 8002972:	1dfa      	adds	r2, r7, #7
 8002974:	7812      	ldrb	r2, [r2, #0]
 8002976:	615a      	str	r2, [r3, #20]
    E_HIGH();
 8002978:	2390      	movs	r3, #144	@ 0x90
 800297a:	05db      	lsls	r3, r3, #23
 800297c:	2202      	movs	r2, #2
 800297e:	619a      	str	r2, [r3, #24]
    delay_us(1);
 8002980:	2001      	movs	r0, #1
 8002982:	f7ff ff6c 	bl	800285e <delay_us>
    E_LOW();
 8002986:	2390      	movs	r3, #144	@ 0x90
 8002988:	05db      	lsls	r3, r3, #23
 800298a:	2280      	movs	r2, #128	@ 0x80
 800298c:	0292      	lsls	r2, r2, #10
 800298e:	619a      	str	r2, [r3, #24]
    delay_ms(2);
 8002990:	2002      	movs	r0, #2
 8002992:	f7ff ff49 	bl	8002828 <delay_ms>
}
 8002996:	46c0      	nop			@ (mov r8, r8)
 8002998:	46bd      	mov	sp, r7
 800299a:	b002      	add	sp, #8
 800299c:	bd80      	pop	{r7, pc}
 800299e:	46c0      	nop			@ (mov r8, r8)
 80029a0:	48000400 	.word	0x48000400

080029a4 <lcd_write_char>:

// Send a character to the LCD
void lcd_write_char(uint8_t data) {
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	0002      	movs	r2, r0
 80029ac:	1dfb      	adds	r3, r7, #7
 80029ae:	701a      	strb	r2, [r3, #0]
    RS_HIGH();                   // Data mode
 80029b0:	2390      	movs	r3, #144	@ 0x90
 80029b2:	05db      	lsls	r3, r3, #23
 80029b4:	2210      	movs	r2, #16
 80029b6:	619a      	str	r2, [r3, #24]
    E_LOW();
 80029b8:	2390      	movs	r3, #144	@ 0x90
 80029ba:	05db      	lsls	r3, r3, #23
 80029bc:	2280      	movs	r2, #128	@ 0x80
 80029be:	0292      	lsls	r2, r2, #10
 80029c0:	619a      	str	r2, [r3, #24]
    GPIOB->ODR = data;           // Send character
 80029c2:	4b0b      	ldr	r3, [pc, #44]	@ (80029f0 <lcd_write_char+0x4c>)
 80029c4:	1dfa      	adds	r2, r7, #7
 80029c6:	7812      	ldrb	r2, [r2, #0]
 80029c8:	615a      	str	r2, [r3, #20]
    E_HIGH();
 80029ca:	2390      	movs	r3, #144	@ 0x90
 80029cc:	05db      	lsls	r3, r3, #23
 80029ce:	2202      	movs	r2, #2
 80029d0:	619a      	str	r2, [r3, #24]
    delay_us(1);
 80029d2:	2001      	movs	r0, #1
 80029d4:	f7ff ff43 	bl	800285e <delay_us>
    E_LOW();
 80029d8:	2390      	movs	r3, #144	@ 0x90
 80029da:	05db      	lsls	r3, r3, #23
 80029dc:	2280      	movs	r2, #128	@ 0x80
 80029de:	0292      	lsls	r2, r2, #10
 80029e0:	619a      	str	r2, [r3, #24]
    delay_ms(2);
 80029e2:	2002      	movs	r0, #2
 80029e4:	f7ff ff20 	bl	8002828 <delay_ms>
}
 80029e8:	46c0      	nop			@ (mov r8, r8)
 80029ea:	46bd      	mov	sp, r7
 80029ec:	b002      	add	sp, #8
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	48000400 	.word	0x48000400

080029f4 <lcd_clear>:

// Clear the LCD display
void lcd_clear(void) {
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
    lcd_write_instruction(0x01); // Clear command
 80029f8:	2001      	movs	r0, #1
 80029fa:	f7ff ffa9 	bl	8002950 <lcd_write_instruction>
    delay_ms(2);
 80029fe:	2002      	movs	r0, #2
 8002a00:	f7ff ff12 	bl	8002828 <delay_ms>
}
 8002a04:	46c0      	nop			@ (mov r8, r8)
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <lcd_goto>:

// Set cursor position on the LCD
void lcd_goto(uint8_t row, uint8_t column) {
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b082      	sub	sp, #8
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	0002      	movs	r2, r0
 8002a12:	1dfb      	adds	r3, r7, #7
 8002a14:	701a      	strb	r2, [r3, #0]
 8002a16:	1dbb      	adds	r3, r7, #6
 8002a18:	1c0a      	adds	r2, r1, #0
 8002a1a:	701a      	strb	r2, [r3, #0]
    delay_ms(2);
 8002a1c:	2002      	movs	r0, #2
 8002a1e:	f7ff ff03 	bl	8002828 <delay_ms>
    if (row == 0) {
 8002a22:	1dfb      	adds	r3, r7, #7
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d107      	bne.n	8002a3a <lcd_goto+0x30>
        lcd_write_instruction(0x80 + column); // Row 0 address
 8002a2a:	1dbb      	adds	r3, r7, #6
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	3b80      	subs	r3, #128	@ 0x80
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	0018      	movs	r0, r3
 8002a34:	f7ff ff8c 	bl	8002950 <lcd_write_instruction>
    } else {
        lcd_write_instruction(0xC0 + column); // Row 1 address
    }
}
 8002a38:	e006      	b.n	8002a48 <lcd_goto+0x3e>
        lcd_write_instruction(0xC0 + column); // Row 1 address
 8002a3a:	1dbb      	adds	r3, r7, #6
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	3b40      	subs	r3, #64	@ 0x40
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	0018      	movs	r0, r3
 8002a44:	f7ff ff84 	bl	8002950 <lcd_write_instruction>
}
 8002a48:	46c0      	nop			@ (mov r8, r8)
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	b002      	add	sp, #8
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <lcd_write_string>:

// Write a string to the LCD
void lcd_write_string(char *s) {
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
    while (*s != 0) {
 8002a58:	e007      	b.n	8002a6a <lcd_write_string+0x1a>
        lcd_write_char(*s);      // Send each character
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	0018      	movs	r0, r3
 8002a60:	f7ff ffa0 	bl	80029a4 <lcd_write_char>
        s++;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3301      	adds	r3, #1
 8002a68:	607b      	str	r3, [r7, #4]
    while (*s != 0) {
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f3      	bne.n	8002a5a <lcd_write_string+0xa>
    }
}
 8002a72:	46c0      	nop			@ (mov r8, r8)
 8002a74:	46c0      	nop			@ (mov r8, r8)
 8002a76:	46bd      	mov	sp, r7
 8002a78:	b002      	add	sp, #8
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <setup_LEDS>:
    lcd_create_char(0, dollar); // Load custom char to CGRAM
    lcd_goto(0, 0);
    lcd_write_char(0);          // Display custom char
}

void setup_LEDS(){
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
	//set up green LED to be toggled.
	//LD2 is PA5 the on-board GREEN LED
	RCC ->AHBENR |= RCC_AHBENR_GPIOAEN;
 8002a80:	4b3c      	ldr	r3, [pc, #240]	@ (8002b74 <setup_LEDS+0xf8>)
 8002a82:	695a      	ldr	r2, [r3, #20]
 8002a84:	4b3b      	ldr	r3, [pc, #236]	@ (8002b74 <setup_LEDS+0xf8>)
 8002a86:	2180      	movs	r1, #128	@ 0x80
 8002a88:	0289      	lsls	r1, r1, #10
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	615a      	str	r2, [r3, #20]
	GPIOA ->MODER |= GPIO_MODER_MODER5_0;
 8002a8e:	2390      	movs	r3, #144	@ 0x90
 8002a90:	05db      	lsls	r3, r3, #23
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	2390      	movs	r3, #144	@ 0x90
 8002a96:	05db      	lsls	r3, r3, #23
 8002a98:	2180      	movs	r1, #128	@ 0x80
 8002a9a:	00c9      	lsls	r1, r1, #3
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	601a      	str	r2, [r3, #0]
	GPIOA ->MODER &= ~GPIO_MODER_MODER5_1;
 8002aa0:	2390      	movs	r3, #144	@ 0x90
 8002aa2:	05db      	lsls	r3, r3, #23
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	2390      	movs	r3, #144	@ 0x90
 8002aa8:	05db      	lsls	r3, r3, #23
 8002aaa:	4933      	ldr	r1, [pc, #204]	@ (8002b78 <setup_LEDS+0xfc>)
 8002aac:	400a      	ands	r2, r1
 8002aae:	601a      	str	r2, [r3, #0]
	GPIOA ->OTYPER &= ~GPIO_OTYPER_OT_5;
 8002ab0:	2390      	movs	r3, #144	@ 0x90
 8002ab2:	05db      	lsls	r3, r3, #23
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	2390      	movs	r3, #144	@ 0x90
 8002ab8:	05db      	lsls	r3, r3, #23
 8002aba:	2120      	movs	r1, #32
 8002abc:	438a      	bics	r2, r1
 8002abe:	605a      	str	r2, [r3, #4]
	GPIOA ->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR5_0;
 8002ac0:	2390      	movs	r3, #144	@ 0x90
 8002ac2:	05db      	lsls	r3, r3, #23
 8002ac4:	689a      	ldr	r2, [r3, #8]
 8002ac6:	2390      	movs	r3, #144	@ 0x90
 8002ac8:	05db      	lsls	r3, r3, #23
 8002aca:	492c      	ldr	r1, [pc, #176]	@ (8002b7c <setup_LEDS+0x100>)
 8002acc:	400a      	ands	r2, r1
 8002ace:	609a      	str	r2, [r3, #8]
	GPIOA->BRR |= GPIO_BRR_BR_5;	//clear it, turn off.
 8002ad0:	2390      	movs	r3, #144	@ 0x90
 8002ad2:	05db      	lsls	r3, r3, #23
 8002ad4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ad6:	2390      	movs	r3, #144	@ 0x90
 8002ad8:	05db      	lsls	r3, r3, #23
 8002ada:	2120      	movs	r1, #32
 8002adc:	430a      	orrs	r2, r1
 8002ade:	629a      	str	r2, [r3, #40]	@ 0x28

	// pc8(green led)
	RCC ->AHBENR |= RCC_AHBENR_GPIOCEN;
 8002ae0:	4b24      	ldr	r3, [pc, #144]	@ (8002b74 <setup_LEDS+0xf8>)
 8002ae2:	695a      	ldr	r2, [r3, #20]
 8002ae4:	4b23      	ldr	r3, [pc, #140]	@ (8002b74 <setup_LEDS+0xf8>)
 8002ae6:	2180      	movs	r1, #128	@ 0x80
 8002ae8:	0309      	lsls	r1, r1, #12
 8002aea:	430a      	orrs	r2, r1
 8002aec:	615a      	str	r2, [r3, #20]
	GPIOC ->MODER |= GPIO_MODER_MODER8_0;
 8002aee:	4b24      	ldr	r3, [pc, #144]	@ (8002b80 <setup_LEDS+0x104>)
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	4b23      	ldr	r3, [pc, #140]	@ (8002b80 <setup_LEDS+0x104>)
 8002af4:	2180      	movs	r1, #128	@ 0x80
 8002af6:	0249      	lsls	r1, r1, #9
 8002af8:	430a      	orrs	r2, r1
 8002afa:	601a      	str	r2, [r3, #0]
	GPIOC ->MODER &= ~GPIO_MODER_MODER8_1;
 8002afc:	4b20      	ldr	r3, [pc, #128]	@ (8002b80 <setup_LEDS+0x104>)
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	4b1f      	ldr	r3, [pc, #124]	@ (8002b80 <setup_LEDS+0x104>)
 8002b02:	4920      	ldr	r1, [pc, #128]	@ (8002b84 <setup_LEDS+0x108>)
 8002b04:	400a      	ands	r2, r1
 8002b06:	601a      	str	r2, [r3, #0]
	GPIOC ->OTYPER &= ~GPIO_OTYPER_OT_8;
 8002b08:	4b1d      	ldr	r3, [pc, #116]	@ (8002b80 <setup_LEDS+0x104>)
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	4b1c      	ldr	r3, [pc, #112]	@ (8002b80 <setup_LEDS+0x104>)
 8002b0e:	491e      	ldr	r1, [pc, #120]	@ (8002b88 <setup_LEDS+0x10c>)
 8002b10:	400a      	ands	r2, r1
 8002b12:	605a      	str	r2, [r3, #4]
	GPIOC ->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR8_0;
 8002b14:	4b1a      	ldr	r3, [pc, #104]	@ (8002b80 <setup_LEDS+0x104>)
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	4b19      	ldr	r3, [pc, #100]	@ (8002b80 <setup_LEDS+0x104>)
 8002b1a:	491c      	ldr	r1, [pc, #112]	@ (8002b8c <setup_LEDS+0x110>)
 8002b1c:	400a      	ands	r2, r1
 8002b1e:	609a      	str	r2, [r3, #8]
	GPIOC->BRR |= GPIO_BRR_BR_8;	//clear it, turn off.
 8002b20:	4b17      	ldr	r3, [pc, #92]	@ (8002b80 <setup_LEDS+0x104>)
 8002b22:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b24:	4b16      	ldr	r3, [pc, #88]	@ (8002b80 <setup_LEDS+0x104>)
 8002b26:	2180      	movs	r1, #128	@ 0x80
 8002b28:	0049      	lsls	r1, r1, #1
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	629a      	str	r2, [r3, #40]	@ 0x28

	//pc9(red led)
	GPIOC ->MODER |= GPIO_MODER_MODER9_0;
 8002b2e:	4b14      	ldr	r3, [pc, #80]	@ (8002b80 <setup_LEDS+0x104>)
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	4b13      	ldr	r3, [pc, #76]	@ (8002b80 <setup_LEDS+0x104>)
 8002b34:	2180      	movs	r1, #128	@ 0x80
 8002b36:	02c9      	lsls	r1, r1, #11
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	601a      	str	r2, [r3, #0]
	GPIOC ->MODER &= ~GPIO_MODER_MODER9_1;
 8002b3c:	4b10      	ldr	r3, [pc, #64]	@ (8002b80 <setup_LEDS+0x104>)
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	4b0f      	ldr	r3, [pc, #60]	@ (8002b80 <setup_LEDS+0x104>)
 8002b42:	4913      	ldr	r1, [pc, #76]	@ (8002b90 <setup_LEDS+0x114>)
 8002b44:	400a      	ands	r2, r1
 8002b46:	601a      	str	r2, [r3, #0]
	GPIOC ->OTYPER &= ~GPIO_OTYPER_OT_9;
 8002b48:	4b0d      	ldr	r3, [pc, #52]	@ (8002b80 <setup_LEDS+0x104>)
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b80 <setup_LEDS+0x104>)
 8002b4e:	4911      	ldr	r1, [pc, #68]	@ (8002b94 <setup_LEDS+0x118>)
 8002b50:	400a      	ands	r2, r1
 8002b52:	605a      	str	r2, [r3, #4]
	GPIOC ->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR9_0;
 8002b54:	4b0a      	ldr	r3, [pc, #40]	@ (8002b80 <setup_LEDS+0x104>)
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	4b09      	ldr	r3, [pc, #36]	@ (8002b80 <setup_LEDS+0x104>)
 8002b5a:	490f      	ldr	r1, [pc, #60]	@ (8002b98 <setup_LEDS+0x11c>)
 8002b5c:	400a      	ands	r2, r1
 8002b5e:	609a      	str	r2, [r3, #8]
	GPIOC->BRR |= GPIO_BRR_BR_9;	//clear it, turn off.
 8002b60:	4b07      	ldr	r3, [pc, #28]	@ (8002b80 <setup_LEDS+0x104>)
 8002b62:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b64:	4b06      	ldr	r3, [pc, #24]	@ (8002b80 <setup_LEDS+0x104>)
 8002b66:	2180      	movs	r1, #128	@ 0x80
 8002b68:	0089      	lsls	r1, r1, #2
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b6e:	46c0      	nop			@ (mov r8, r8)
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40021000 	.word	0x40021000
 8002b78:	fffff7ff 	.word	0xfffff7ff
 8002b7c:	fffffbff 	.word	0xfffffbff
 8002b80:	48000800 	.word	0x48000800
 8002b84:	fffdffff 	.word	0xfffdffff
 8002b88:	fffffeff 	.word	0xfffffeff
 8002b8c:	fffeffff 	.word	0xfffeffff
 8002b90:	fff7ffff 	.word	0xfff7ffff
 8002b94:	fffffdff 	.word	0xfffffdff
 8002b98:	fffbffff 	.word	0xfffbffff

08002b9c <setup_timer>:

void setup_timer(void){
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
	//TIMER:
	//enable clock
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8002ba0:	4b12      	ldr	r3, [pc, #72]	@ (8002bec <setup_timer+0x50>)
 8002ba2:	69da      	ldr	r2, [r3, #28]
 8002ba4:	4b11      	ldr	r3, [pc, #68]	@ (8002bec <setup_timer+0x50>)
 8002ba6:	2102      	movs	r1, #2
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	61da      	str	r2, [r3, #28]
	//set prescaler to 1kHz
	TIM3->PSC=8000;
 8002bac:	4b10      	ldr	r3, [pc, #64]	@ (8002bf0 <setup_timer+0x54>)
 8002bae:	22fa      	movs	r2, #250	@ 0xfa
 8002bb0:	0152      	lsls	r2, r2, #5
 8002bb2:	629a      	str	r2, [r3, #40]	@ 0x28
	//set reload value	999 (every sec)
	TIM3->ARR = (1000-1);
 8002bb4:	4b0e      	ldr	r3, [pc, #56]	@ (8002bf0 <setup_timer+0x54>)
 8002bb6:	4a0f      	ldr	r2, [pc, #60]	@ (8002bf4 <setup_timer+0x58>)
 8002bb8:	62da      	str	r2, [r3, #44]	@ 0x2c
	//start
	TIM3->CR1 |= TIM_CR1_CEN; //enabble counter/start
 8002bba:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf0 <setup_timer+0x54>)
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf0 <setup_timer+0x54>)
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	601a      	str	r2, [r3, #0]

	//set up interrupts
	TIM3->DIER |= TIM_DIER_UIE;
 8002bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf0 <setup_timer+0x54>)
 8002bc8:	68da      	ldr	r2, [r3, #12]
 8002bca:	4b09      	ldr	r3, [pc, #36]	@ (8002bf0 <setup_timer+0x54>)
 8002bcc:	2101      	movs	r1, #1
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	60da      	str	r2, [r3, #12]
	NVIC_SetPriority(TIM3_IRQn, 2);
 8002bd2:	2102      	movs	r1, #2
 8002bd4:	2010      	movs	r0, #16
 8002bd6:	f7ff fd47 	bl	8002668 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM3_IRQn);
 8002bda:	2010      	movs	r0, #16
 8002bdc:	f7ff fd2a 	bl	8002634 <__NVIC_EnableIRQ>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8002be0:	b662      	cpsie	i
}
 8002be2:	46c0      	nop			@ (mov r8, r8)
	__enable_irq();
}
 8002be4:	46c0      	nop			@ (mov r8, r8)
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	46c0      	nop			@ (mov r8, r8)
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	40000400 	.word	0x40000400
 8002bf4:	000003e7 	.word	0x000003e7

08002bf8 <setup_WDT>:

void setup_WDT(){
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
	// Enable write access to IWDG registers
	IWDG->KR = 0x5555;
 8002bfc:	4b05      	ldr	r3, [pc, #20]	@ (8002c14 <setup_WDT+0x1c>)
 8002bfe:	4a06      	ldr	r2, [pc, #24]	@ (8002c18 <setup_WDT+0x20>)
 8002c00:	601a      	str	r2, [r3, #0]

	// Set prescaler to divide by 32 (slower timeout)
	IWDG->PR = 1;
 8002c02:	4b04      	ldr	r3, [pc, #16]	@ (8002c14 <setup_WDT+0x1c>)
 8002c04:	2201      	movs	r2, #1
 8002c06:	605a      	str	r2, [r3, #4]

	// Set reload value to 4095 for maximum timeout period
	IWDG->RLR = 0xFFF;
 8002c08:	4b02      	ldr	r3, [pc, #8]	@ (8002c14 <setup_WDT+0x1c>)
 8002c0a:	4a04      	ldr	r2, [pc, #16]	@ (8002c1c <setup_WDT+0x24>)
 8002c0c:	609a      	str	r2, [r3, #8]
}
 8002c0e:	46c0      	nop			@ (mov r8, r8)
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40003000 	.word	0x40003000
 8002c18:	00005555 	.word	0x00005555
 8002c1c:	00000fff 	.word	0x00000fff

08002c20 <led_sequence1>:

void led_sequence1(void) {
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
	SERVICE_WDG();
 8002c24:	4b35      	ldr	r3, [pc, #212]	@ (8002cfc <led_sequence1+0xdc>)
 8002c26:	4a36      	ldr	r2, [pc, #216]	@ (8002d00 <led_sequence1+0xe0>)
 8002c28:	601a      	str	r2, [r3, #0]

    // Double blink GREEN
	GPIOC->BSRR |= (1UL<<8);  // Turn on LED
 8002c2a:	4b36      	ldr	r3, [pc, #216]	@ (8002d04 <led_sequence1+0xe4>)
 8002c2c:	699a      	ldr	r2, [r3, #24]
 8002c2e:	4b35      	ldr	r3, [pc, #212]	@ (8002d04 <led_sequence1+0xe4>)
 8002c30:	2180      	movs	r1, #128	@ 0x80
 8002c32:	0049      	lsls	r1, r1, #1
 8002c34:	430a      	orrs	r2, r1
 8002c36:	619a      	str	r2, [r3, #24]
	delay_ms(30);
 8002c38:	201e      	movs	r0, #30
 8002c3a:	f7ff fdf5 	bl	8002828 <delay_ms>
	SERVICE_WDG();
 8002c3e:	4b2f      	ldr	r3, [pc, #188]	@ (8002cfc <led_sequence1+0xdc>)
 8002c40:	4a2f      	ldr	r2, [pc, #188]	@ (8002d00 <led_sequence1+0xe0>)
 8002c42:	601a      	str	r2, [r3, #0]
	GPIOC->BSRR |= (1UL<<24); // Turn off LED
 8002c44:	4b2f      	ldr	r3, [pc, #188]	@ (8002d04 <led_sequence1+0xe4>)
 8002c46:	699a      	ldr	r2, [r3, #24]
 8002c48:	4b2e      	ldr	r3, [pc, #184]	@ (8002d04 <led_sequence1+0xe4>)
 8002c4a:	2180      	movs	r1, #128	@ 0x80
 8002c4c:	0449      	lsls	r1, r1, #17
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	619a      	str	r2, [r3, #24]
	delay_ms(30);
 8002c52:	201e      	movs	r0, #30
 8002c54:	f7ff fde8 	bl	8002828 <delay_ms>
	SERVICE_WDG();
 8002c58:	4b28      	ldr	r3, [pc, #160]	@ (8002cfc <led_sequence1+0xdc>)
 8002c5a:	4a29      	ldr	r2, [pc, #164]	@ (8002d00 <led_sequence1+0xe0>)
 8002c5c:	601a      	str	r2, [r3, #0]
	GPIOC->BSRR |= (1UL<<8);  // Turn on LED
 8002c5e:	4b29      	ldr	r3, [pc, #164]	@ (8002d04 <led_sequence1+0xe4>)
 8002c60:	699a      	ldr	r2, [r3, #24]
 8002c62:	4b28      	ldr	r3, [pc, #160]	@ (8002d04 <led_sequence1+0xe4>)
 8002c64:	2180      	movs	r1, #128	@ 0x80
 8002c66:	0049      	lsls	r1, r1, #1
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	619a      	str	r2, [r3, #24]
	delay_ms(30);
 8002c6c:	201e      	movs	r0, #30
 8002c6e:	f7ff fddb 	bl	8002828 <delay_ms>
	SERVICE_WDG();
 8002c72:	4b22      	ldr	r3, [pc, #136]	@ (8002cfc <led_sequence1+0xdc>)
 8002c74:	4a22      	ldr	r2, [pc, #136]	@ (8002d00 <led_sequence1+0xe0>)
 8002c76:	601a      	str	r2, [r3, #0]
	GPIOC->BSRR |= (1UL<<24); // Turn off LED
 8002c78:	4b22      	ldr	r3, [pc, #136]	@ (8002d04 <led_sequence1+0xe4>)
 8002c7a:	699a      	ldr	r2, [r3, #24]
 8002c7c:	4b21      	ldr	r3, [pc, #132]	@ (8002d04 <led_sequence1+0xe4>)
 8002c7e:	2180      	movs	r1, #128	@ 0x80
 8002c80:	0449      	lsls	r1, r1, #17
 8002c82:	430a      	orrs	r2, r1
 8002c84:	619a      	str	r2, [r3, #24]
	delay_ms(30);
 8002c86:	201e      	movs	r0, #30
 8002c88:	f7ff fdce 	bl	8002828 <delay_ms>
	SERVICE_WDG();
 8002c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cfc <led_sequence1+0xdc>)
 8002c8e:	4a1c      	ldr	r2, [pc, #112]	@ (8002d00 <led_sequence1+0xe0>)
 8002c90:	601a      	str	r2, [r3, #0]

	// Double blink RED
	GPIOC->BSRR |= (1UL<<9);  // Turn on LED
 8002c92:	4b1c      	ldr	r3, [pc, #112]	@ (8002d04 <led_sequence1+0xe4>)
 8002c94:	699a      	ldr	r2, [r3, #24]
 8002c96:	4b1b      	ldr	r3, [pc, #108]	@ (8002d04 <led_sequence1+0xe4>)
 8002c98:	2180      	movs	r1, #128	@ 0x80
 8002c9a:	0089      	lsls	r1, r1, #2
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	619a      	str	r2, [r3, #24]
	delay_ms(30);
 8002ca0:	201e      	movs	r0, #30
 8002ca2:	f7ff fdc1 	bl	8002828 <delay_ms>
	SERVICE_WDG();
 8002ca6:	4b15      	ldr	r3, [pc, #84]	@ (8002cfc <led_sequence1+0xdc>)
 8002ca8:	4a15      	ldr	r2, [pc, #84]	@ (8002d00 <led_sequence1+0xe0>)
 8002caa:	601a      	str	r2, [r3, #0]
	GPIOC->BSRR |= (1UL<<25); // Turn off LED
 8002cac:	4b15      	ldr	r3, [pc, #84]	@ (8002d04 <led_sequence1+0xe4>)
 8002cae:	699a      	ldr	r2, [r3, #24]
 8002cb0:	4b14      	ldr	r3, [pc, #80]	@ (8002d04 <led_sequence1+0xe4>)
 8002cb2:	2180      	movs	r1, #128	@ 0x80
 8002cb4:	0489      	lsls	r1, r1, #18
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	619a      	str	r2, [r3, #24]
	delay_ms(30);
 8002cba:	201e      	movs	r0, #30
 8002cbc:	f7ff fdb4 	bl	8002828 <delay_ms>
	SERVICE_WDG();
 8002cc0:	4b0e      	ldr	r3, [pc, #56]	@ (8002cfc <led_sequence1+0xdc>)
 8002cc2:	4a0f      	ldr	r2, [pc, #60]	@ (8002d00 <led_sequence1+0xe0>)
 8002cc4:	601a      	str	r2, [r3, #0]
	GPIOC->BSRR |= (1UL<<9);  // Turn on LED
 8002cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8002d04 <led_sequence1+0xe4>)
 8002cc8:	699a      	ldr	r2, [r3, #24]
 8002cca:	4b0e      	ldr	r3, [pc, #56]	@ (8002d04 <led_sequence1+0xe4>)
 8002ccc:	2180      	movs	r1, #128	@ 0x80
 8002cce:	0089      	lsls	r1, r1, #2
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	619a      	str	r2, [r3, #24]
	delay_ms(30);
 8002cd4:	201e      	movs	r0, #30
 8002cd6:	f7ff fda7 	bl	8002828 <delay_ms>
	SERVICE_WDG();
 8002cda:	4b08      	ldr	r3, [pc, #32]	@ (8002cfc <led_sequence1+0xdc>)
 8002cdc:	4a08      	ldr	r2, [pc, #32]	@ (8002d00 <led_sequence1+0xe0>)
 8002cde:	601a      	str	r2, [r3, #0]
	GPIOC->BSRR |= (1UL<<25); // Turn off LED
 8002ce0:	4b08      	ldr	r3, [pc, #32]	@ (8002d04 <led_sequence1+0xe4>)
 8002ce2:	699a      	ldr	r2, [r3, #24]
 8002ce4:	4b07      	ldr	r3, [pc, #28]	@ (8002d04 <led_sequence1+0xe4>)
 8002ce6:	2180      	movs	r1, #128	@ 0x80
 8002ce8:	0489      	lsls	r1, r1, #18
 8002cea:	430a      	orrs	r2, r1
 8002cec:	619a      	str	r2, [r3, #24]

	SERVICE_WDG();
 8002cee:	4b03      	ldr	r3, [pc, #12]	@ (8002cfc <led_sequence1+0xdc>)
 8002cf0:	4a03      	ldr	r2, [pc, #12]	@ (8002d00 <led_sequence1+0xe0>)
 8002cf2:	601a      	str	r2, [r3, #0]
}
 8002cf4:	46c0      	nop			@ (mov r8, r8)
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	46c0      	nop			@ (mov r8, r8)
 8002cfc:	40003000 	.word	0x40003000
 8002d00:	0000aaaa 	.word	0x0000aaaa
 8002d04:	48000800 	.word	0x48000800

08002d08 <led_sequence2>:

void led_sequence2(void) {
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
	SERVICE_WDG();
 8002d0c:	4b28      	ldr	r3, [pc, #160]	@ (8002db0 <led_sequence2+0xa8>)
 8002d0e:	4a29      	ldr	r2, [pc, #164]	@ (8002db4 <led_sequence2+0xac>)
 8002d10:	601a      	str	r2, [r3, #0]

	// Double blink RED
	GPIOC->BSRR |= (1UL<<9);  // Turn on LED
 8002d12:	4b29      	ldr	r3, [pc, #164]	@ (8002db8 <led_sequence2+0xb0>)
 8002d14:	699a      	ldr	r2, [r3, #24]
 8002d16:	4b28      	ldr	r3, [pc, #160]	@ (8002db8 <led_sequence2+0xb0>)
 8002d18:	2180      	movs	r1, #128	@ 0x80
 8002d1a:	0089      	lsls	r1, r1, #2
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	619a      	str	r2, [r3, #24]
	delay_ms(30);
 8002d20:	201e      	movs	r0, #30
 8002d22:	f7ff fd81 	bl	8002828 <delay_ms>
	SERVICE_WDG();
 8002d26:	4b22      	ldr	r3, [pc, #136]	@ (8002db0 <led_sequence2+0xa8>)
 8002d28:	4a22      	ldr	r2, [pc, #136]	@ (8002db4 <led_sequence2+0xac>)
 8002d2a:	601a      	str	r2, [r3, #0]
	GPIOC->BSRR |= (1UL<<25); // Turn off LED
 8002d2c:	4b22      	ldr	r3, [pc, #136]	@ (8002db8 <led_sequence2+0xb0>)
 8002d2e:	699a      	ldr	r2, [r3, #24]
 8002d30:	4b21      	ldr	r3, [pc, #132]	@ (8002db8 <led_sequence2+0xb0>)
 8002d32:	2180      	movs	r1, #128	@ 0x80
 8002d34:	0489      	lsls	r1, r1, #18
 8002d36:	430a      	orrs	r2, r1
 8002d38:	619a      	str	r2, [r3, #24]
	delay_ms(30);
 8002d3a:	201e      	movs	r0, #30
 8002d3c:	f7ff fd74 	bl	8002828 <delay_ms>
	SERVICE_WDG();
 8002d40:	4b1b      	ldr	r3, [pc, #108]	@ (8002db0 <led_sequence2+0xa8>)
 8002d42:	4a1c      	ldr	r2, [pc, #112]	@ (8002db4 <led_sequence2+0xac>)
 8002d44:	601a      	str	r2, [r3, #0]
	GPIOC->BSRR |= (1UL<<9);  // Turn on LED
 8002d46:	4b1c      	ldr	r3, [pc, #112]	@ (8002db8 <led_sequence2+0xb0>)
 8002d48:	699a      	ldr	r2, [r3, #24]
 8002d4a:	4b1b      	ldr	r3, [pc, #108]	@ (8002db8 <led_sequence2+0xb0>)
 8002d4c:	2180      	movs	r1, #128	@ 0x80
 8002d4e:	0089      	lsls	r1, r1, #2
 8002d50:	430a      	orrs	r2, r1
 8002d52:	619a      	str	r2, [r3, #24]
	delay_ms(30);
 8002d54:	201e      	movs	r0, #30
 8002d56:	f7ff fd67 	bl	8002828 <delay_ms>
	SERVICE_WDG();
 8002d5a:	4b15      	ldr	r3, [pc, #84]	@ (8002db0 <led_sequence2+0xa8>)
 8002d5c:	4a15      	ldr	r2, [pc, #84]	@ (8002db4 <led_sequence2+0xac>)
 8002d5e:	601a      	str	r2, [r3, #0]
	GPIOC->BSRR |= (1UL<<25); // Turn off LED
 8002d60:	4b15      	ldr	r3, [pc, #84]	@ (8002db8 <led_sequence2+0xb0>)
 8002d62:	699a      	ldr	r2, [r3, #24]
 8002d64:	4b14      	ldr	r3, [pc, #80]	@ (8002db8 <led_sequence2+0xb0>)
 8002d66:	2180      	movs	r1, #128	@ 0x80
 8002d68:	0489      	lsls	r1, r1, #18
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	619a      	str	r2, [r3, #24]
	delay_ms(30);
 8002d6e:	201e      	movs	r0, #30
 8002d70:	f7ff fd5a 	bl	8002828 <delay_ms>
	SERVICE_WDG();
 8002d74:	4b0e      	ldr	r3, [pc, #56]	@ (8002db0 <led_sequence2+0xa8>)
 8002d76:	4a0f      	ldr	r2, [pc, #60]	@ (8002db4 <led_sequence2+0xac>)
 8002d78:	601a      	str	r2, [r3, #0]
	GPIOC->BSRR |= (1UL<<9);  // Turn on LED
 8002d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8002db8 <led_sequence2+0xb0>)
 8002d7c:	699a      	ldr	r2, [r3, #24]
 8002d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8002db8 <led_sequence2+0xb0>)
 8002d80:	2180      	movs	r1, #128	@ 0x80
 8002d82:	0089      	lsls	r1, r1, #2
 8002d84:	430a      	orrs	r2, r1
 8002d86:	619a      	str	r2, [r3, #24]
	delay_ms(30);
 8002d88:	201e      	movs	r0, #30
 8002d8a:	f7ff fd4d 	bl	8002828 <delay_ms>
	SERVICE_WDG();
 8002d8e:	4b08      	ldr	r3, [pc, #32]	@ (8002db0 <led_sequence2+0xa8>)
 8002d90:	4a08      	ldr	r2, [pc, #32]	@ (8002db4 <led_sequence2+0xac>)
 8002d92:	601a      	str	r2, [r3, #0]
	GPIOC->BSRR |= (1UL<<25); // Turn off LED
 8002d94:	4b08      	ldr	r3, [pc, #32]	@ (8002db8 <led_sequence2+0xb0>)
 8002d96:	699a      	ldr	r2, [r3, #24]
 8002d98:	4b07      	ldr	r3, [pc, #28]	@ (8002db8 <led_sequence2+0xb0>)
 8002d9a:	2180      	movs	r1, #128	@ 0x80
 8002d9c:	0489      	lsls	r1, r1, #18
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	619a      	str	r2, [r3, #24]

	SERVICE_WDG();
 8002da2:	4b03      	ldr	r3, [pc, #12]	@ (8002db0 <led_sequence2+0xa8>)
 8002da4:	4a03      	ldr	r2, [pc, #12]	@ (8002db4 <led_sequence2+0xac>)
 8002da6:	601a      	str	r2, [r3, #0]
}
 8002da8:	46c0      	nop			@ (mov r8, r8)
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	46c0      	nop			@ (mov r8, r8)
 8002db0:	40003000 	.word	0x40003000
 8002db4:	0000aaaa 	.word	0x0000aaaa
 8002db8:	48000800 	.word	0x48000800

08002dbc <get_distance>:

int get_distance(){
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
// Trigger the ultrasonic pulse
        GPIOA->ODR |= TRIG_PIN;    // Set TRIG pin high
 8002dc2:	2390      	movs	r3, #144	@ 0x90
 8002dc4:	05db      	lsls	r3, r3, #23
 8002dc6:	695a      	ldr	r2, [r3, #20]
 8002dc8:	2390      	movs	r3, #144	@ 0x90
 8002dca:	05db      	lsls	r3, r3, #23
 8002dcc:	2180      	movs	r1, #128	@ 0x80
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	615a      	str	r2, [r3, #20]
        delay_micro(10);              // 10 µs delay for pulse
 8002dd2:	200a      	movs	r0, #10
 8002dd4:	f000 f8b6 	bl	8002f44 <delay_micro>
        GPIOA->ODR &= ~TRIG_PIN;   // Set TRIG pin low
 8002dd8:	2390      	movs	r3, #144	@ 0x90
 8002dda:	05db      	lsls	r3, r3, #23
 8002ddc:	695a      	ldr	r2, [r3, #20]
 8002dde:	2390      	movs	r3, #144	@ 0x90
 8002de0:	05db      	lsls	r3, r3, #23
 8002de2:	2180      	movs	r1, #128	@ 0x80
 8002de4:	438a      	bics	r2, r1
 8002de6:	615a      	str	r2, [r3, #20]

        // Wait for ECHO signal to go high
        while (!(GPIOA->IDR & ECHO_PIN));
 8002de8:	46c0      	nop			@ (mov r8, r8)
 8002dea:	2390      	movs	r3, #144	@ 0x90
 8002dec:	05db      	lsls	r3, r3, #23
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	2240      	movs	r2, #64	@ 0x40
 8002df2:	4013      	ands	r3, r2
 8002df4:	d0f9      	beq.n	8002dea <get_distance+0x2e>

        // Start timing when ECHO signal is high
        TIM2->CNT = 0;
 8002df6:	2380      	movs	r3, #128	@ 0x80
 8002df8:	05db      	lsls	r3, r3, #23
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	625a      	str	r2, [r3, #36]	@ 0x24
        TIM2->CR1 |= TIM_CR1_CEN;  // Start the timer
 8002dfe:	2380      	movs	r3, #128	@ 0x80
 8002e00:	05db      	lsls	r3, r3, #23
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	2380      	movs	r3, #128	@ 0x80
 8002e06:	05db      	lsls	r3, r3, #23
 8002e08:	2101      	movs	r1, #1
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	601a      	str	r2, [r3, #0]

        // Wait for ECHO signal to go low
        while (GPIOA->IDR & ECHO_PIN);
 8002e0e:	46c0      	nop			@ (mov r8, r8)
 8002e10:	2390      	movs	r3, #144	@ 0x90
 8002e12:	05db      	lsls	r3, r3, #23
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	2240      	movs	r2, #64	@ 0x40
 8002e18:	4013      	ands	r3, r2
 8002e1a:	d1f9      	bne.n	8002e10 <get_distance+0x54>

        // Stop timer and read duration
        double duration_us = TIM2->CNT;
 8002e1c:	2380      	movs	r3, #128	@ 0x80
 8002e1e:	05db      	lsls	r3, r3, #23
 8002e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e22:	0018      	movs	r0, r3
 8002e24:	f7ff f99a 	bl	800215c <__aeabi_ui2d>
 8002e28:	0002      	movs	r2, r0
 8002e2a:	000b      	movs	r3, r1
 8002e2c:	60ba      	str	r2, [r7, #8]
 8002e2e:	60fb      	str	r3, [r7, #12]
        TIM2->CR1 &= ~TIM_CR1_CEN;  // Stop the timer
 8002e30:	2380      	movs	r3, #128	@ 0x80
 8002e32:	05db      	lsls	r3, r3, #23
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	2380      	movs	r3, #128	@ 0x80
 8002e38:	05db      	lsls	r3, r3, #23
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	438a      	bics	r2, r1
 8002e3e:	601a      	str	r2, [r3, #0]

        // Calculate distance
        double distance = (duration_us * 0.0343) / 2;
 8002e40:	4a0d      	ldr	r2, [pc, #52]	@ (8002e78 <get_distance+0xbc>)
 8002e42:	4b0e      	ldr	r3, [pc, #56]	@ (8002e7c <get_distance+0xc0>)
 8002e44:	68b8      	ldr	r0, [r7, #8]
 8002e46:	68f9      	ldr	r1, [r7, #12]
 8002e48:	f7fe faba 	bl	80013c0 <__aeabi_dmul>
 8002e4c:	0002      	movs	r2, r0
 8002e4e:	000b      	movs	r3, r1
 8002e50:	0010      	movs	r0, r2
 8002e52:	0019      	movs	r1, r3
 8002e54:	2200      	movs	r2, #0
 8002e56:	2380      	movs	r3, #128	@ 0x80
 8002e58:	05db      	lsls	r3, r3, #23
 8002e5a:	f7fd fe6d 	bl	8000b38 <__aeabi_ddiv>
 8002e5e:	0002      	movs	r2, r0
 8002e60:	000b      	movs	r3, r1
 8002e62:	603a      	str	r2, [r7, #0]
 8002e64:	607b      	str	r3, [r7, #4]

        return distance;
 8002e66:	6838      	ldr	r0, [r7, #0]
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	f7ff f90d 	bl	8002088 <__aeabi_d2iz>
 8002e6e:	0003      	movs	r3, r0
}
 8002e70:	0018      	movs	r0, r3
 8002e72:	46bd      	mov	sp, r7
 8002e74:	b004      	add	sp, #16
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	04816f00 	.word	0x04816f00
 8002e7c:	3fa18fc5 	.word	0x3fa18fc5

08002e80 <trigger_buzzer>:
    // Configure BUZZER as output (PB9)
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
    GPIOB->MODER |= GPIO_MODER_MODER9_0;  // PB9 as output
}

void trigger_buzzer(double distance) {
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6038      	str	r0, [r7, #0]
 8002e88:	6079      	str	r1, [r7, #4]
    if (distance < 5) {
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec0 <trigger_buzzer+0x40>)
 8002e8e:	6838      	ldr	r0, [r7, #0]
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	f7fd fac5 	bl	8000420 <__aeabi_dcmplt>
 8002e96:	1e03      	subs	r3, r0, #0
 8002e98:	d007      	beq.n	8002eaa <trigger_buzzer+0x2a>
        GPIOB->ODR |= BUZZER_PIN;  // Turn on buzzer
 8002e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec4 <trigger_buzzer+0x44>)
 8002e9c:	695a      	ldr	r2, [r3, #20]
 8002e9e:	4b09      	ldr	r3, [pc, #36]	@ (8002ec4 <trigger_buzzer+0x44>)
 8002ea0:	2180      	movs	r1, #128	@ 0x80
 8002ea2:	0089      	lsls	r1, r1, #2
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	615a      	str	r2, [r3, #20]
    } else {
        GPIOB->ODR &= ~BUZZER_PIN; // Turn off buzzer
    }
}
 8002ea8:	e005      	b.n	8002eb6 <trigger_buzzer+0x36>
        GPIOB->ODR &= ~BUZZER_PIN; // Turn off buzzer
 8002eaa:	4b06      	ldr	r3, [pc, #24]	@ (8002ec4 <trigger_buzzer+0x44>)
 8002eac:	695a      	ldr	r2, [r3, #20]
 8002eae:	4b05      	ldr	r3, [pc, #20]	@ (8002ec4 <trigger_buzzer+0x44>)
 8002eb0:	4905      	ldr	r1, [pc, #20]	@ (8002ec8 <trigger_buzzer+0x48>)
 8002eb2:	400a      	ands	r2, r1
 8002eb4:	615a      	str	r2, [r3, #20]
}
 8002eb6:	46c0      	nop			@ (mov r8, r8)
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	b002      	add	sp, #8
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	46c0      	nop			@ (mov r8, r8)
 8002ec0:	40140000 	.word	0x40140000
 8002ec4:	48000400 	.word	0x48000400
 8002ec8:	fffffdff 	.word	0xfffffdff

08002ecc <Peri_Init>:

void Peri_Init(void) {
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
    // Enable GPIOA clock
    RCC->AHBENR |= (1 << 17);
 8002ed0:	4b18      	ldr	r3, [pc, #96]	@ (8002f34 <Peri_Init+0x68>)
 8002ed2:	695a      	ldr	r2, [r3, #20]
 8002ed4:	4b17      	ldr	r3, [pc, #92]	@ (8002f34 <Peri_Init+0x68>)
 8002ed6:	2180      	movs	r1, #128	@ 0x80
 8002ed8:	0289      	lsls	r1, r1, #10
 8002eda:	430a      	orrs	r2, r1
 8002edc:	615a      	str	r2, [r3, #20]

    // Configure PA7 as output (TRIG pin)
    GPIOA->MODER |= (1 << (7 * 2));
 8002ede:	2390      	movs	r3, #144	@ 0x90
 8002ee0:	05db      	lsls	r3, r3, #23
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	2390      	movs	r3, #144	@ 0x90
 8002ee6:	05db      	lsls	r3, r3, #23
 8002ee8:	2180      	movs	r1, #128	@ 0x80
 8002eea:	01c9      	lsls	r1, r1, #7
 8002eec:	430a      	orrs	r2, r1
 8002eee:	601a      	str	r2, [r3, #0]
    GPIOA->MODER &= ~(1 << ((7 * 2) + 1));  // Set PA10 as output
 8002ef0:	2390      	movs	r3, #144	@ 0x90
 8002ef2:	05db      	lsls	r3, r3, #23
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	2390      	movs	r3, #144	@ 0x90
 8002ef8:	05db      	lsls	r3, r3, #23
 8002efa:	490f      	ldr	r1, [pc, #60]	@ (8002f38 <Peri_Init+0x6c>)
 8002efc:	400a      	ands	r2, r1
 8002efe:	601a      	str	r2, [r3, #0]

    // Configure PA6 as input (ECHO pin)
    GPIOA->MODER &= ~((1 << (6 * 2)) | (1 << ((6 * 2) + 1)));  // Set PA9 as input
 8002f00:	2390      	movs	r3, #144	@ 0x90
 8002f02:	05db      	lsls	r3, r3, #23
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	2390      	movs	r3, #144	@ 0x90
 8002f08:	05db      	lsls	r3, r3, #23
 8002f0a:	490c      	ldr	r1, [pc, #48]	@ (8002f3c <Peri_Init+0x70>)
 8002f0c:	400a      	ands	r2, r1
 8002f0e:	601a      	str	r2, [r3, #0]

    // Enable Timer 2 clock
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8002f10:	4b08      	ldr	r3, [pc, #32]	@ (8002f34 <Peri_Init+0x68>)
 8002f12:	69da      	ldr	r2, [r3, #28]
 8002f14:	4b07      	ldr	r3, [pc, #28]	@ (8002f34 <Peri_Init+0x68>)
 8002f16:	2101      	movs	r1, #1
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	61da      	str	r2, [r3, #28]

    // Configure Timer 2 for 1 µs resolution
    TIM2->PSC = 8 - 1;  // 8 MHz / 8 = 1 MHz (1 µs per tick)
 8002f1c:	2380      	movs	r3, #128	@ 0x80
 8002f1e:	05db      	lsls	r3, r3, #23
 8002f20:	2207      	movs	r2, #7
 8002f22:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 0xFFFF; // Max ARR for full timer range
 8002f24:	2380      	movs	r3, #128	@ 0x80
 8002f26:	05db      	lsls	r3, r3, #23
 8002f28:	4a05      	ldr	r2, [pc, #20]	@ (8002f40 <Peri_Init+0x74>)
 8002f2a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002f2c:	46c0      	nop			@ (mov r8, r8)
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	46c0      	nop			@ (mov r8, r8)
 8002f34:	40021000 	.word	0x40021000
 8002f38:	ffff7fff 	.word	0xffff7fff
 8002f3c:	ffffcfff 	.word	0xffffcfff
 8002f40:	0000ffff 	.word	0x0000ffff

08002f44 <delay_micro>:

void delay_micro(int us) {
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
    TIM2->CNT = 0;
 8002f4c:	2380      	movs	r3, #128	@ 0x80
 8002f4e:	05db      	lsls	r3, r3, #23
 8002f50:	2200      	movs	r2, #0
 8002f52:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM2->CR1 |= TIM_CR1_CEN;  // Start Timer
 8002f54:	2380      	movs	r3, #128	@ 0x80
 8002f56:	05db      	lsls	r3, r3, #23
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	2380      	movs	r3, #128	@ 0x80
 8002f5c:	05db      	lsls	r3, r3, #23
 8002f5e:	2101      	movs	r1, #1
 8002f60:	430a      	orrs	r2, r1
 8002f62:	601a      	str	r2, [r3, #0]
    while (TIM2->CNT < us);
 8002f64:	46c0      	nop			@ (mov r8, r8)
 8002f66:	2380      	movs	r3, #128	@ 0x80
 8002f68:	05db      	lsls	r3, r3, #23
 8002f6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d3f9      	bcc.n	8002f66 <delay_micro+0x22>
    TIM2->CR1 &= ~TIM_CR1_CEN; // Stop Timer
 8002f72:	2380      	movs	r3, #128	@ 0x80
 8002f74:	05db      	lsls	r3, r3, #23
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	2380      	movs	r3, #128	@ 0x80
 8002f7a:	05db      	lsls	r3, r3, #23
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	438a      	bics	r2, r1
 8002f80:	601a      	str	r2, [r3, #0]
}
 8002f82:	46c0      	nop			@ (mov r8, r8)
 8002f84:	46bd      	mov	sp, r7
 8002f86:	b002      	add	sp, #8
 8002f88:	bd80      	pop	{r7, pc}
	...

08002f8c <send_char>:

void send_char(char c) {
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	0002      	movs	r2, r0
 8002f94:	1dfb      	adds	r3, r7, #7
 8002f96:	701a      	strb	r2, [r3, #0]
    while (!(USART2->ISR & USART_ISR_TXE));
 8002f98:	46c0      	nop			@ (mov r8, r8)
 8002f9a:	4b07      	ldr	r3, [pc, #28]	@ (8002fb8 <send_char+0x2c>)
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	2280      	movs	r2, #128	@ 0x80
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	d0fa      	beq.n	8002f9a <send_char+0xe>
    USART2->TDR = (0xFF & c);
 8002fa4:	4a04      	ldr	r2, [pc, #16]	@ (8002fb8 <send_char+0x2c>)
 8002fa6:	1dfb      	adds	r3, r7, #7
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	8513      	strh	r3, [r2, #40]	@ 0x28
}
 8002fae:	46c0      	nop			@ (mov r8, r8)
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	b002      	add	sp, #8
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	46c0      	nop			@ (mov r8, r8)
 8002fb8:	40004400 	.word	0x40004400

08002fbc <send_string>:

void send_string(const char *str) {
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
    while (*str) {
 8002fc4:	e006      	b.n	8002fd4 <send_string+0x18>
        send_char(*str++);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	1c5a      	adds	r2, r3, #1
 8002fca:	607a      	str	r2, [r7, #4]
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	0018      	movs	r0, r3
 8002fd0:	f7ff ffdc 	bl	8002f8c <send_char>
    while (*str) {
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1f4      	bne.n	8002fc6 <send_string+0xa>
    }
}
 8002fdc:	46c0      	nop			@ (mov r8, r8)
 8002fde:	46c0      	nop			@ (mov r8, r8)
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	b002      	add	sp, #8
 8002fe4:	bd80      	pop	{r7, pc}
	...

08002fe8 <stringify_distance>:

void stringify_distance(double distance, char *buffer) {
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b090      	sub	sp, #64	@ 0x40
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60b8      	str	r0, [r7, #8]
 8002ff0:	60f9      	str	r1, [r7, #12]
 8002ff2:	607a      	str	r2, [r7, #4]
    int integer_part = (int)distance;
 8002ff4:	68b8      	ldr	r0, [r7, #8]
 8002ff6:	68f9      	ldr	r1, [r7, #12]
 8002ff8:	f7ff f846 	bl	8002088 <__aeabi_d2iz>
 8002ffc:	0003      	movs	r3, r0
 8002ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    int decimal_part = (int)((distance - integer_part + 0.005) * 100);
 8003000:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003002:	f7ff f87d 	bl	8002100 <__aeabi_i2d>
 8003006:	0002      	movs	r2, r0
 8003008:	000b      	movs	r3, r1
 800300a:	68b8      	ldr	r0, [r7, #8]
 800300c:	68f9      	ldr	r1, [r7, #12]
 800300e:	f7fe fc9f 	bl	8001950 <__aeabi_dsub>
 8003012:	0002      	movs	r2, r0
 8003014:	000b      	movs	r3, r1
 8003016:	0010      	movs	r0, r2
 8003018:	0019      	movs	r1, r3
 800301a:	4a57      	ldr	r2, [pc, #348]	@ (8003178 <stringify_distance+0x190>)
 800301c:	4b57      	ldr	r3, [pc, #348]	@ (800317c <stringify_distance+0x194>)
 800301e:	f7fd fa27 	bl	8000470 <__aeabi_dadd>
 8003022:	0002      	movs	r2, r0
 8003024:	000b      	movs	r3, r1
 8003026:	0010      	movs	r0, r2
 8003028:	0019      	movs	r1, r3
 800302a:	2200      	movs	r2, #0
 800302c:	4b54      	ldr	r3, [pc, #336]	@ (8003180 <stringify_distance+0x198>)
 800302e:	f7fe f9c7 	bl	80013c0 <__aeabi_dmul>
 8003032:	0002      	movs	r2, r0
 8003034:	000b      	movs	r3, r1
 8003036:	0010      	movs	r0, r2
 8003038:	0019      	movs	r1, r3
 800303a:	f7ff f825 	bl	8002088 <__aeabi_d2iz>
 800303e:	0003      	movs	r3, r0
 8003040:	63bb      	str	r3, [r7, #56]	@ 0x38

    int index = 0;
 8003042:	2300      	movs	r3, #0
 8003044:	637b      	str	r3, [r7, #52]	@ 0x34
    if (integer_part == 0) {
 8003046:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003048:	2b00      	cmp	r3, #0
 800304a:	d108      	bne.n	800305e <stringify_distance+0x76>
        buffer[index++] = '0';
 800304c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800304e:	1c5a      	adds	r2, r3, #1
 8003050:	637a      	str	r2, [r7, #52]	@ 0x34
 8003052:	001a      	movs	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	189b      	adds	r3, r3, r2
 8003058:	2230      	movs	r2, #48	@ 0x30
 800305a:	701a      	strb	r2, [r3, #0]
 800305c:	e031      	b.n	80030c2 <stringify_distance+0xda>
    } else {
        char int_buffer[10];
        int int_index = 0;
 800305e:	2300      	movs	r3, #0
 8003060:	633b      	str	r3, [r7, #48]	@ 0x30
        while (integer_part > 0) {
 8003062:	e015      	b.n	8003090 <stringify_distance+0xa8>
            int_buffer[int_index++] = (integer_part % 10) + '0';
 8003064:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003066:	210a      	movs	r1, #10
 8003068:	0018      	movs	r0, r3
 800306a:	f7fd f9bd 	bl	80003e8 <__aeabi_idivmod>
 800306e:	000b      	movs	r3, r1
 8003070:	b2da      	uxtb	r2, r3
 8003072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003074:	1c59      	adds	r1, r3, #1
 8003076:	6339      	str	r1, [r7, #48]	@ 0x30
 8003078:	3230      	adds	r2, #48	@ 0x30
 800307a:	b2d1      	uxtb	r1, r2
 800307c:	2218      	movs	r2, #24
 800307e:	18ba      	adds	r2, r7, r2
 8003080:	54d1      	strb	r1, [r2, r3]
            integer_part /= 10;
 8003082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003084:	210a      	movs	r1, #10
 8003086:	0018      	movs	r0, r3
 8003088:	f7fd f8c8 	bl	800021c <__divsi3>
 800308c:	0003      	movs	r3, r0
 800308e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        while (integer_part > 0) {
 8003090:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003092:	2b00      	cmp	r3, #0
 8003094:	dce6      	bgt.n	8003064 <stringify_distance+0x7c>
        }
        for (int i = int_index - 1; i >= 0; i--) {
 8003096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003098:	3b01      	subs	r3, #1
 800309a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800309c:	e00e      	b.n	80030bc <stringify_distance+0xd4>
            buffer[index++] = int_buffer[i];
 800309e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030a0:	1c5a      	adds	r2, r3, #1
 80030a2:	637a      	str	r2, [r7, #52]	@ 0x34
 80030a4:	001a      	movs	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	189b      	adds	r3, r3, r2
 80030aa:	2218      	movs	r2, #24
 80030ac:	18b9      	adds	r1, r7, r2
 80030ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030b0:	188a      	adds	r2, r1, r2
 80030b2:	7812      	ldrb	r2, [r2, #0]
 80030b4:	701a      	strb	r2, [r3, #0]
        for (int i = int_index - 1; i >= 0; i--) {
 80030b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030b8:	3b01      	subs	r3, #1
 80030ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030be:	2b00      	cmp	r3, #0
 80030c0:	daed      	bge.n	800309e <stringify_distance+0xb6>
        }
    }

    buffer[index++] = '.';
 80030c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030c4:	1c5a      	adds	r2, r3, #1
 80030c6:	637a      	str	r2, [r7, #52]	@ 0x34
 80030c8:	001a      	movs	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	189b      	adds	r3, r3, r2
 80030ce:	222e      	movs	r2, #46	@ 0x2e
 80030d0:	701a      	strb	r2, [r3, #0]

    if (decimal_part < 10) {
 80030d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030d4:	2b09      	cmp	r3, #9
 80030d6:	dc07      	bgt.n	80030e8 <stringify_distance+0x100>
        buffer[index++] = '0';
 80030d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030da:	1c5a      	adds	r2, r3, #1
 80030dc:	637a      	str	r2, [r7, #52]	@ 0x34
 80030de:	001a      	movs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	189b      	adds	r3, r3, r2
 80030e4:	2230      	movs	r2, #48	@ 0x30
 80030e6:	701a      	strb	r2, [r3, #0]
    }
    if (decimal_part == 0) {
 80030e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d108      	bne.n	8003100 <stringify_distance+0x118>
        buffer[index++] = '0';
 80030ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030f0:	1c5a      	adds	r2, r3, #1
 80030f2:	637a      	str	r2, [r7, #52]	@ 0x34
 80030f4:	001a      	movs	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	189b      	adds	r3, r3, r2
 80030fa:	2230      	movs	r2, #48	@ 0x30
 80030fc:	701a      	strb	r2, [r3, #0]
 80030fe:	e031      	b.n	8003164 <stringify_distance+0x17c>
    } else {
        char dec_buffer[3];
        int dec_index = 0;
 8003100:	2300      	movs	r3, #0
 8003102:	62bb      	str	r3, [r7, #40]	@ 0x28
        while (decimal_part > 0) {
 8003104:	e015      	b.n	8003132 <stringify_distance+0x14a>
            dec_buffer[dec_index++] = (decimal_part % 10) + '0';
 8003106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003108:	210a      	movs	r1, #10
 800310a:	0018      	movs	r0, r3
 800310c:	f7fd f96c 	bl	80003e8 <__aeabi_idivmod>
 8003110:	000b      	movs	r3, r1
 8003112:	b2da      	uxtb	r2, r3
 8003114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003116:	1c59      	adds	r1, r3, #1
 8003118:	62b9      	str	r1, [r7, #40]	@ 0x28
 800311a:	3230      	adds	r2, #48	@ 0x30
 800311c:	b2d1      	uxtb	r1, r2
 800311e:	2214      	movs	r2, #20
 8003120:	18ba      	adds	r2, r7, r2
 8003122:	54d1      	strb	r1, [r2, r3]
            decimal_part /= 10;
 8003124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003126:	210a      	movs	r1, #10
 8003128:	0018      	movs	r0, r3
 800312a:	f7fd f877 	bl	800021c <__divsi3>
 800312e:	0003      	movs	r3, r0
 8003130:	63bb      	str	r3, [r7, #56]	@ 0x38
        while (decimal_part > 0) {
 8003132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003134:	2b00      	cmp	r3, #0
 8003136:	dce6      	bgt.n	8003106 <stringify_distance+0x11e>
        }
        for (int i = dec_index - 1; i >= 0; i--) {
 8003138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800313a:	3b01      	subs	r3, #1
 800313c:	627b      	str	r3, [r7, #36]	@ 0x24
 800313e:	e00e      	b.n	800315e <stringify_distance+0x176>
            buffer[index++] = dec_buffer[i];
 8003140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003142:	1c5a      	adds	r2, r3, #1
 8003144:	637a      	str	r2, [r7, #52]	@ 0x34
 8003146:	001a      	movs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	189b      	adds	r3, r3, r2
 800314c:	2214      	movs	r2, #20
 800314e:	18b9      	adds	r1, r7, r2
 8003150:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003152:	188a      	adds	r2, r1, r2
 8003154:	7812      	ldrb	r2, [r2, #0]
 8003156:	701a      	strb	r2, [r3, #0]
        for (int i = dec_index - 1; i >= 0; i--) {
 8003158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315a:	3b01      	subs	r3, #1
 800315c:	627b      	str	r3, [r7, #36]	@ 0x24
 800315e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003160:	2b00      	cmp	r3, #0
 8003162:	daed      	bge.n	8003140 <stringify_distance+0x158>
        }
    }
    buffer[index] = '\0';
 8003164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	18d3      	adds	r3, r2, r3
 800316a:	2200      	movs	r2, #0
 800316c:	701a      	strb	r2, [r3, #0]
}
 800316e:	46c0      	nop			@ (mov r8, r8)
 8003170:	46bd      	mov	sp, r7
 8003172:	b010      	add	sp, #64	@ 0x40
 8003174:	bd80      	pop	{r7, pc}
 8003176:	46c0      	nop			@ (mov r8, r8)
 8003178:	47ae147b 	.word	0x47ae147b
 800317c:	3f747ae1 	.word	0x3f747ae1
 8003180:	40590000 	.word	0x40590000

08003184 <configure_UART>:

void configure_UART() {
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
    // Set up PA2 as UART in TX mode
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8003188:	4b29      	ldr	r3, [pc, #164]	@ (8003230 <configure_UART+0xac>)
 800318a:	695a      	ldr	r2, [r3, #20]
 800318c:	4b28      	ldr	r3, [pc, #160]	@ (8003230 <configure_UART+0xac>)
 800318e:	2180      	movs	r1, #128	@ 0x80
 8003190:	0289      	lsls	r1, r1, #10
 8003192:	430a      	orrs	r2, r1
 8003194:	615a      	str	r2, [r3, #20]
    GPIOA->MODER &= ~GPIO_MODER_MODER2_0;
 8003196:	2390      	movs	r3, #144	@ 0x90
 8003198:	05db      	lsls	r3, r3, #23
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	2390      	movs	r3, #144	@ 0x90
 800319e:	05db      	lsls	r3, r3, #23
 80031a0:	2110      	movs	r1, #16
 80031a2:	438a      	bics	r2, r1
 80031a4:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |= GPIO_MODER_MODER2_1;
 80031a6:	2390      	movs	r3, #144	@ 0x90
 80031a8:	05db      	lsls	r3, r3, #23
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	2390      	movs	r3, #144	@ 0x90
 80031ae:	05db      	lsls	r3, r3, #23
 80031b0:	2120      	movs	r1, #32
 80031b2:	430a      	orrs	r2, r1
 80031b4:	601a      	str	r2, [r3, #0]
    GPIOA->AFR[0] &= ~GPIO_AFRL_AFSEL2_Msk;
 80031b6:	2390      	movs	r3, #144	@ 0x90
 80031b8:	05db      	lsls	r3, r3, #23
 80031ba:	6a1a      	ldr	r2, [r3, #32]
 80031bc:	2390      	movs	r3, #144	@ 0x90
 80031be:	05db      	lsls	r3, r3, #23
 80031c0:	491c      	ldr	r1, [pc, #112]	@ (8003234 <configure_UART+0xb0>)
 80031c2:	400a      	ands	r2, r1
 80031c4:	621a      	str	r2, [r3, #32]
    GPIOA->AFR[0] |= (1 << GPIO_AFRL_AFSEL2_Pos);
 80031c6:	2390      	movs	r3, #144	@ 0x90
 80031c8:	05db      	lsls	r3, r3, #23
 80031ca:	6a1a      	ldr	r2, [r3, #32]
 80031cc:	2390      	movs	r3, #144	@ 0x90
 80031ce:	05db      	lsls	r3, r3, #23
 80031d0:	2180      	movs	r1, #128	@ 0x80
 80031d2:	0049      	lsls	r1, r1, #1
 80031d4:	430a      	orrs	r2, r1
 80031d6:	621a      	str	r2, [r3, #32]

    // UART configuration for 9600 baud, 8N1
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80031d8:	4b15      	ldr	r3, [pc, #84]	@ (8003230 <configure_UART+0xac>)
 80031da:	69da      	ldr	r2, [r3, #28]
 80031dc:	4b14      	ldr	r3, [pc, #80]	@ (8003230 <configure_UART+0xac>)
 80031de:	2180      	movs	r1, #128	@ 0x80
 80031e0:	0289      	lsls	r1, r1, #10
 80031e2:	430a      	orrs	r2, r1
 80031e4:	61da      	str	r2, [r3, #28]
    USART2->BRR = 0x341;
 80031e6:	4b14      	ldr	r3, [pc, #80]	@ (8003238 <configure_UART+0xb4>)
 80031e8:	4a14      	ldr	r2, [pc, #80]	@ (800323c <configure_UART+0xb8>)
 80031ea:	60da      	str	r2, [r3, #12]
    USART2->CR1 &= ~USART_CR1_M;
 80031ec:	4b12      	ldr	r3, [pc, #72]	@ (8003238 <configure_UART+0xb4>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	4b11      	ldr	r3, [pc, #68]	@ (8003238 <configure_UART+0xb4>)
 80031f2:	4913      	ldr	r1, [pc, #76]	@ (8003240 <configure_UART+0xbc>)
 80031f4:	400a      	ands	r2, r1
 80031f6:	601a      	str	r2, [r3, #0]
    USART2->CR1 &= ~USART_CR1_PCE;
 80031f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003238 <configure_UART+0xb4>)
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003238 <configure_UART+0xb4>)
 80031fe:	4911      	ldr	r1, [pc, #68]	@ (8003244 <configure_UART+0xc0>)
 8003200:	400a      	ands	r2, r1
 8003202:	601a      	str	r2, [r3, #0]
    USART2->CR2 &= ~USART_CR2_STOP;
 8003204:	4b0c      	ldr	r3, [pc, #48]	@ (8003238 <configure_UART+0xb4>)
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	4b0b      	ldr	r3, [pc, #44]	@ (8003238 <configure_UART+0xb4>)
 800320a:	490f      	ldr	r1, [pc, #60]	@ (8003248 <configure_UART+0xc4>)
 800320c:	400a      	ands	r2, r1
 800320e:	605a      	str	r2, [r3, #4]
    USART2->CR1 |= USART_CR1_TE;
 8003210:	4b09      	ldr	r3, [pc, #36]	@ (8003238 <configure_UART+0xb4>)
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	4b08      	ldr	r3, [pc, #32]	@ (8003238 <configure_UART+0xb4>)
 8003216:	2108      	movs	r1, #8
 8003218:	430a      	orrs	r2, r1
 800321a:	601a      	str	r2, [r3, #0]
    USART2->CR1 |= USART_CR1_UE;
 800321c:	4b06      	ldr	r3, [pc, #24]	@ (8003238 <configure_UART+0xb4>)
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	4b05      	ldr	r3, [pc, #20]	@ (8003238 <configure_UART+0xb4>)
 8003222:	2101      	movs	r1, #1
 8003224:	430a      	orrs	r2, r1
 8003226:	601a      	str	r2, [r3, #0]
}
 8003228:	46c0      	nop			@ (mov r8, r8)
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	46c0      	nop			@ (mov r8, r8)
 8003230:	40021000 	.word	0x40021000
 8003234:	fffff0ff 	.word	0xfffff0ff
 8003238:	40004400 	.word	0x40004400
 800323c:	00000341 	.word	0x00000341
 8003240:	efffefff 	.word	0xefffefff
 8003244:	fffffbff 	.word	0xfffffbff
 8003248:	ffffcfff 	.word	0xffffcfff

0800324c <ADC_Init>:


void ADC_Init(void) {
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
    // Enable ADC1 and GPIOA clocks
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;       // Enable GPIOA clock
 8003250:	4b22      	ldr	r3, [pc, #136]	@ (80032dc <ADC_Init+0x90>)
 8003252:	695a      	ldr	r2, [r3, #20]
 8003254:	4b21      	ldr	r3, [pc, #132]	@ (80032dc <ADC_Init+0x90>)
 8003256:	2180      	movs	r1, #128	@ 0x80
 8003258:	0289      	lsls	r1, r1, #10
 800325a:	430a      	orrs	r2, r1
 800325c:	615a      	str	r2, [r3, #20]
    RCC->APB2ENR |= RCC_APB2ENR_ADCEN;       // Enable ADC clock
 800325e:	4b1f      	ldr	r3, [pc, #124]	@ (80032dc <ADC_Init+0x90>)
 8003260:	699a      	ldr	r2, [r3, #24]
 8003262:	4b1e      	ldr	r3, [pc, #120]	@ (80032dc <ADC_Init+0x90>)
 8003264:	2180      	movs	r1, #128	@ 0x80
 8003266:	0089      	lsls	r1, r1, #2
 8003268:	430a      	orrs	r2, r1
 800326a:	619a      	str	r2, [r3, #24]

    // Configure PA0 in analog mode
    GPIOA->MODER |= GPIO_MODER_MODER0;       // Set PA0 to analog mode (11)
 800326c:	2390      	movs	r3, #144	@ 0x90
 800326e:	05db      	lsls	r3, r3, #23
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	2390      	movs	r3, #144	@ 0x90
 8003274:	05db      	lsls	r3, r3, #23
 8003276:	2103      	movs	r1, #3
 8003278:	430a      	orrs	r2, r1
 800327a:	601a      	str	r2, [r3, #0]

    // Calibrate ADC before enabling
    if ((ADC1->CR & ADC_CR_ADEN) != 0) {     // Ensure ADC is disabled before calibration
 800327c:	4b18      	ldr	r3, [pc, #96]	@ (80032e0 <ADC_Init+0x94>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	2201      	movs	r2, #1
 8003282:	4013      	ands	r3, r2
 8003284:	d005      	beq.n	8003292 <ADC_Init+0x46>
        ADC1->CR &= ~ADC_CR_ADEN;
 8003286:	4b16      	ldr	r3, [pc, #88]	@ (80032e0 <ADC_Init+0x94>)
 8003288:	689a      	ldr	r2, [r3, #8]
 800328a:	4b15      	ldr	r3, [pc, #84]	@ (80032e0 <ADC_Init+0x94>)
 800328c:	2101      	movs	r1, #1
 800328e:	438a      	bics	r2, r1
 8003290:	609a      	str	r2, [r3, #8]
    }
    ADC1->CR |= ADC_CR_ADCAL;                // Start calibration
 8003292:	4b13      	ldr	r3, [pc, #76]	@ (80032e0 <ADC_Init+0x94>)
 8003294:	689a      	ldr	r2, [r3, #8]
 8003296:	4b12      	ldr	r3, [pc, #72]	@ (80032e0 <ADC_Init+0x94>)
 8003298:	2180      	movs	r1, #128	@ 0x80
 800329a:	0609      	lsls	r1, r1, #24
 800329c:	430a      	orrs	r2, r1
 800329e:	609a      	str	r2, [r3, #8]
    while (ADC1->CR & ADC_CR_ADCAL);         // Wait for calibration to complete
 80032a0:	46c0      	nop			@ (mov r8, r8)
 80032a2:	4b0f      	ldr	r3, [pc, #60]	@ (80032e0 <ADC_Init+0x94>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	dbfb      	blt.n	80032a2 <ADC_Init+0x56>

    // Set ADC sampling time (e.g., 239.5 cycles for better accuracy)
    ADC1->SMPR |= ADC_SMPR_SMP_2 | ADC_SMPR_SMP_1 | ADC_SMPR_SMP_0; // 239.5 cycles
 80032aa:	4b0d      	ldr	r3, [pc, #52]	@ (80032e0 <ADC_Init+0x94>)
 80032ac:	695a      	ldr	r2, [r3, #20]
 80032ae:	4b0c      	ldr	r3, [pc, #48]	@ (80032e0 <ADC_Init+0x94>)
 80032b0:	2107      	movs	r1, #7
 80032b2:	430a      	orrs	r2, r1
 80032b4:	615a      	str	r2, [r3, #20]

    // Set single conversion mode
    ADC1->CHSELR = ADC_CHSELR_CHSEL0;        // Select channel 0 (PA0)
 80032b6:	4b0a      	ldr	r3, [pc, #40]	@ (80032e0 <ADC_Init+0x94>)
 80032b8:	2201      	movs	r2, #1
 80032ba:	629a      	str	r2, [r3, #40]	@ 0x28

    // Enable ADC
    ADC1->CR |= ADC_CR_ADEN;                 // Enable ADC
 80032bc:	4b08      	ldr	r3, [pc, #32]	@ (80032e0 <ADC_Init+0x94>)
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	4b07      	ldr	r3, [pc, #28]	@ (80032e0 <ADC_Init+0x94>)
 80032c2:	2101      	movs	r1, #1
 80032c4:	430a      	orrs	r2, r1
 80032c6:	609a      	str	r2, [r3, #8]
    while (!(ADC1->ISR & ADC_ISR_ADRDY));    // Wait for ADC to be ready
 80032c8:	46c0      	nop			@ (mov r8, r8)
 80032ca:	4b05      	ldr	r3, [pc, #20]	@ (80032e0 <ADC_Init+0x94>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2201      	movs	r2, #1
 80032d0:	4013      	ands	r3, r2
 80032d2:	d0fa      	beq.n	80032ca <ADC_Init+0x7e>
}
 80032d4:	46c0      	nop			@ (mov r8, r8)
 80032d6:	46c0      	nop			@ (mov r8, r8)
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40021000 	.word	0x40021000
 80032e0:	40012400 	.word	0x40012400

080032e4 <PWM_Init>:

void PWM_Init(void) {
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
    // Enable TIM2 and GPIOB clocks
    RCC->AHBENR |= RCC_AHBENR_GPIOBEN;       // Enable GPIOB clock
 80032e8:	4b2a      	ldr	r3, [pc, #168]	@ (8003394 <PWM_Init+0xb0>)
 80032ea:	695a      	ldr	r2, [r3, #20]
 80032ec:	4b29      	ldr	r3, [pc, #164]	@ (8003394 <PWM_Init+0xb0>)
 80032ee:	2180      	movs	r1, #128	@ 0x80
 80032f0:	02c9      	lsls	r1, r1, #11
 80032f2:	430a      	orrs	r2, r1
 80032f4:	615a      	str	r2, [r3, #20]
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;      // Enable TIM2 clock
 80032f6:	4b27      	ldr	r3, [pc, #156]	@ (8003394 <PWM_Init+0xb0>)
 80032f8:	69da      	ldr	r2, [r3, #28]
 80032fa:	4b26      	ldr	r3, [pc, #152]	@ (8003394 <PWM_Init+0xb0>)
 80032fc:	2101      	movs	r1, #1
 80032fe:	430a      	orrs	r2, r1
 8003300:	61da      	str	r2, [r3, #28]

    // Configure PB10 in alternate function mode for TIM2_CH3
    GPIOB->MODER &= ~GPIO_MODER_MODER10_0;   // Clear bit 0 for PB10
 8003302:	4b25      	ldr	r3, [pc, #148]	@ (8003398 <PWM_Init+0xb4>)
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	4b24      	ldr	r3, [pc, #144]	@ (8003398 <PWM_Init+0xb4>)
 8003308:	4924      	ldr	r1, [pc, #144]	@ (800339c <PWM_Init+0xb8>)
 800330a:	400a      	ands	r2, r1
 800330c:	601a      	str	r2, [r3, #0]
    GPIOB->MODER |= GPIO_MODER_MODER10_1;    // Set bit 1 for alternate function
 800330e:	4b22      	ldr	r3, [pc, #136]	@ (8003398 <PWM_Init+0xb4>)
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	4b21      	ldr	r3, [pc, #132]	@ (8003398 <PWM_Init+0xb4>)
 8003314:	2180      	movs	r1, #128	@ 0x80
 8003316:	0389      	lsls	r1, r1, #14
 8003318:	430a      	orrs	r2, r1
 800331a:	601a      	str	r2, [r3, #0]
    GPIOB->AFR[1] |= (2 << GPIO_AFRH_AFRH2_Pos);  // AF2 for TIM2_CH3 on PB10
 800331c:	4b1e      	ldr	r3, [pc, #120]	@ (8003398 <PWM_Init+0xb4>)
 800331e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003320:	4b1d      	ldr	r3, [pc, #116]	@ (8003398 <PWM_Init+0xb4>)
 8003322:	2180      	movs	r1, #128	@ 0x80
 8003324:	0089      	lsls	r1, r1, #2
 8003326:	430a      	orrs	r2, r1
 8003328:	625a      	str	r2, [r3, #36]	@ 0x24

    // Configure Timer2 for PWM
    TIM2->PSC = 8-1;                      // Prescaler for 1 MHz timer clock (8 MHz system clock)
 800332a:	2380      	movs	r3, #128	@ 0x80
 800332c:	05db      	lsls	r3, r3, #23
 800332e:	2207      	movs	r2, #7
 8003330:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 999;                     // Auto-reload for 1 kHz PWM frequency
 8003332:	2380      	movs	r3, #128	@ 0x80
 8003334:	05db      	lsls	r3, r3, #23
 8003336:	4a1a      	ldr	r2, [pc, #104]	@ (80033a0 <PWM_Init+0xbc>)
 8003338:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Configure PWM mode for Channel 3
    TIM2->CCMR2 &= ~TIM_CCMR2_OC3M;          // Clear output compare mode bits for Channel 3
 800333a:	2380      	movs	r3, #128	@ 0x80
 800333c:	05db      	lsls	r3, r3, #23
 800333e:	69da      	ldr	r2, [r3, #28]
 8003340:	2380      	movs	r3, #128	@ 0x80
 8003342:	05db      	lsls	r3, r3, #23
 8003344:	2170      	movs	r1, #112	@ 0x70
 8003346:	438a      	bics	r2, r1
 8003348:	61da      	str	r2, [r3, #28]
    TIM2->CCMR2 |= (TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2);  // PWM mode 1 (active high)
 800334a:	2380      	movs	r3, #128	@ 0x80
 800334c:	05db      	lsls	r3, r3, #23
 800334e:	69da      	ldr	r2, [r3, #28]
 8003350:	2380      	movs	r3, #128	@ 0x80
 8003352:	05db      	lsls	r3, r3, #23
 8003354:	2160      	movs	r1, #96	@ 0x60
 8003356:	430a      	orrs	r2, r1
 8003358:	61da      	str	r2, [r3, #28]
    TIM2->CCMR2 |= TIM_CCMR2_OC3PE;          // Enable preload register for Channel 3
 800335a:	2380      	movs	r3, #128	@ 0x80
 800335c:	05db      	lsls	r3, r3, #23
 800335e:	69da      	ldr	r2, [r3, #28]
 8003360:	2380      	movs	r3, #128	@ 0x80
 8003362:	05db      	lsls	r3, r3, #23
 8003364:	2108      	movs	r1, #8
 8003366:	430a      	orrs	r2, r1
 8003368:	61da      	str	r2, [r3, #28]

    // Enable output compare for Channel 3
    TIM2->CCER |= TIM_CCER_CC3E;             // Enable channel 3 output
 800336a:	2380      	movs	r3, #128	@ 0x80
 800336c:	05db      	lsls	r3, r3, #23
 800336e:	6a1a      	ldr	r2, [r3, #32]
 8003370:	2380      	movs	r3, #128	@ 0x80
 8003372:	05db      	lsls	r3, r3, #23
 8003374:	2180      	movs	r1, #128	@ 0x80
 8003376:	0049      	lsls	r1, r1, #1
 8003378:	430a      	orrs	r2, r1
 800337a:	621a      	str	r2, [r3, #32]

    // Enable counter
    TIM2->CR1 |= TIM_CR1_CEN;                // Enable timer
 800337c:	2380      	movs	r3, #128	@ 0x80
 800337e:	05db      	lsls	r3, r3, #23
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	2380      	movs	r3, #128	@ 0x80
 8003384:	05db      	lsls	r3, r3, #23
 8003386:	2101      	movs	r1, #1
 8003388:	430a      	orrs	r2, r1
 800338a:	601a      	str	r2, [r3, #0]
}
 800338c:	46c0      	nop			@ (mov r8, r8)
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	46c0      	nop			@ (mov r8, r8)
 8003394:	40021000 	.word	0x40021000
 8003398:	48000400 	.word	0x48000400
 800339c:	ffefffff 	.word	0xffefffff
 80033a0:	000003e7 	.word	0x000003e7

080033a4 <Read_ADC>:

uint16_t Read_ADC(void) {
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
    ADC1->CR |= ADC_CR_ADSTART;              // Start conversion
 80033a8:	4b08      	ldr	r3, [pc, #32]	@ (80033cc <Read_ADC+0x28>)
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	4b07      	ldr	r3, [pc, #28]	@ (80033cc <Read_ADC+0x28>)
 80033ae:	2104      	movs	r1, #4
 80033b0:	430a      	orrs	r2, r1
 80033b2:	609a      	str	r2, [r3, #8]

    while (!(ADC1->ISR & ADC_ISR_EOC));      // Wait for conversion to complete
 80033b4:	46c0      	nop			@ (mov r8, r8)
 80033b6:	4b05      	ldr	r3, [pc, #20]	@ (80033cc <Read_ADC+0x28>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2204      	movs	r2, #4
 80033bc:	4013      	ands	r3, r2
 80033be:	d0fa      	beq.n	80033b6 <Read_ADC+0x12>

    return ADC1->DR;                         // Return conversion result
 80033c0:	4b02      	ldr	r3, [pc, #8]	@ (80033cc <Read_ADC+0x28>)
 80033c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c4:	b29b      	uxth	r3, r3
}
 80033c6:	0018      	movs	r0, r3
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40012400 	.word	0x40012400

080033d0 <Set_LED_Brightness>:

void Set_LED_Brightness(uint16_t adc_value) {
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	0002      	movs	r2, r0
 80033d8:	1dbb      	adds	r3, r7, #6
 80033da:	801a      	strh	r2, [r3, #0]
    // Scale ADC value (0-4095) to PWM value (0-999)
    uint32_t pwm_value = (adc_value * 999) / 4095;
 80033dc:	1dbb      	adds	r3, r7, #6
 80033de:	881a      	ldrh	r2, [r3, #0]
 80033e0:	0013      	movs	r3, r2
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	1a9b      	subs	r3, r3, r2
 80033e6:	011b      	lsls	r3, r3, #4
 80033e8:	1a9b      	subs	r3, r3, r2
 80033ea:	00da      	lsls	r2, r3, #3
 80033ec:	189b      	adds	r3, r3, r2
 80033ee:	4907      	ldr	r1, [pc, #28]	@ (800340c <Set_LED_Brightness+0x3c>)
 80033f0:	0018      	movs	r0, r3
 80033f2:	f7fc ff13 	bl	800021c <__divsi3>
 80033f6:	0003      	movs	r3, r0
 80033f8:	60fb      	str	r3, [r7, #12]
    TIM2->CCR3 = pwm_value;                  // Set duty cycle for Channel 3 (PB10)
 80033fa:	2380      	movs	r3, #128	@ 0x80
 80033fc:	05db      	lsls	r3, r3, #23
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003402:	46c0      	nop			@ (mov r8, r8)
 8003404:	46bd      	mov	sp, r7
 8003406:	b004      	add	sp, #16
 8003408:	bd80      	pop	{r7, pc}
 800340a:	46c0      	nop			@ (mov r8, r8)
 800340c:	00000fff 	.word	0x00000fff

08003410 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003410:	480d      	ldr	r0, [pc, #52]	@ (8003448 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003412:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003414:	f7ff f909 	bl	800262a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003418:	480c      	ldr	r0, [pc, #48]	@ (800344c <LoopForever+0x6>)
  ldr r1, =_edata
 800341a:	490d      	ldr	r1, [pc, #52]	@ (8003450 <LoopForever+0xa>)
  ldr r2, =_sidata
 800341c:	4a0d      	ldr	r2, [pc, #52]	@ (8003454 <LoopForever+0xe>)
  movs r3, #0
 800341e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003420:	e002      	b.n	8003428 <LoopCopyDataInit>

08003422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003426:	3304      	adds	r3, #4

08003428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800342a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800342c:	d3f9      	bcc.n	8003422 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800342e:	4a0a      	ldr	r2, [pc, #40]	@ (8003458 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003430:	4c0a      	ldr	r4, [pc, #40]	@ (800345c <LoopForever+0x16>)
  movs r3, #0
 8003432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003434:	e001      	b.n	800343a <LoopFillZerobss>

08003436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003438:	3204      	adds	r2, #4

0800343a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800343a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800343c:	d3fb      	bcc.n	8003436 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800343e:	f002 fbb1 	bl	8005ba4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003442:	f7ff f837 	bl	80024b4 <main>

08003446 <LoopForever>:

LoopForever:
    b LoopForever
 8003446:	e7fe      	b.n	8003446 <LoopForever>
  ldr   r0, =_estack
 8003448:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800344c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003450:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8003454:	08005d30 	.word	0x08005d30
  ldr r2, =_sbss
 8003458:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 800345c:	2000199c 	.word	0x2000199c

08003460 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003460:	e7fe      	b.n	8003460 <ADC1_COMP_IRQHandler>
	...

08003464 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003468:	4b05      	ldr	r3, [pc, #20]	@ (8003480 <HAL_IncTick+0x1c>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	001a      	movs	r2, r3
 800346e:	4b05      	ldr	r3, [pc, #20]	@ (8003484 <HAL_IncTick+0x20>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	18d2      	adds	r2, r2, r3
 8003474:	4b03      	ldr	r3, [pc, #12]	@ (8003484 <HAL_IncTick+0x20>)
 8003476:	601a      	str	r2, [r3, #0]
}
 8003478:	46c0      	nop			@ (mov r8, r8)
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	46c0      	nop			@ (mov r8, r8)
 8003480:	20000014 	.word	0x20000014
 8003484:	2000005c 	.word	0x2000005c

08003488 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4a06      	ldr	r2, [pc, #24]	@ (80034b0 <vApplicationGetIdleTaskMemory+0x28>)
 8003498:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	4a05      	ldr	r2, [pc, #20]	@ (80034b4 <vApplicationGetIdleTaskMemory+0x2c>)
 800349e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2280      	movs	r2, #128	@ 0x80
 80034a4:	601a      	str	r2, [r3, #0]
}
 80034a6:	46c0      	nop			@ (mov r8, r8)
 80034a8:	46bd      	mov	sp, r7
 80034aa:	b004      	add	sp, #16
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	46c0      	nop			@ (mov r8, r8)
 80034b0:	20000060 	.word	0x20000060
 80034b4:	200000bc 	.word	0x200000bc

080034b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4a06      	ldr	r2, [pc, #24]	@ (80034e0 <vApplicationGetTimerTaskMemory+0x28>)
 80034c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	4a05      	ldr	r2, [pc, #20]	@ (80034e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80034ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2280      	movs	r2, #128	@ 0x80
 80034d4:	0052      	lsls	r2, r2, #1
 80034d6:	601a      	str	r2, [r3, #0]
}
 80034d8:	46c0      	nop			@ (mov r8, r8)
 80034da:	46bd      	mov	sp, r7
 80034dc:	b004      	add	sp, #16
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	200002bc 	.word	0x200002bc
 80034e4:	20000318 	.word	0x20000318

080034e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	3308      	adds	r3, #8
 80034f4:	001a      	movs	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	4252      	negs	r2, r2
 8003500:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	3308      	adds	r3, #8
 8003506:	001a      	movs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3308      	adds	r3, #8
 8003510:	001a      	movs	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800351c:	46c0      	nop			@ (mov r8, r8)
 800351e:	46bd      	mov	sp, r7
 8003520:	b002      	add	sp, #8
 8003522:	bd80      	pop	{r7, pc}

08003524 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003532:	46c0      	nop			@ (mov r8, r8)
 8003534:	46bd      	mov	sp, r7
 8003536:	b002      	add	sp, #8
 8003538:	bd80      	pop	{r7, pc}

0800353a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b084      	sub	sp, #16
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
 8003542:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	1c5a      	adds	r2, r3, #1
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	601a      	str	r2, [r3, #0]
}
 8003576:	46c0      	nop			@ (mov r8, r8)
 8003578:	46bd      	mov	sp, r7
 800357a:	b004      	add	sp, #16
 800357c:	bd80      	pop	{r7, pc}

0800357e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b084      	sub	sp, #16
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
 8003586:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	3301      	adds	r3, #1
 8003592:	d103      	bne.n	800359c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	60fb      	str	r3, [r7, #12]
 800359a:	e00c      	b.n	80035b6 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	3308      	adds	r3, #8
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	e002      	b.n	80035aa <vListInsert+0x2c>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	60fb      	str	r3, [r7, #12]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68ba      	ldr	r2, [r7, #8]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d2f6      	bcs.n	80035a4 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	685a      	ldr	r2, [r3, #4]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	1c5a      	adds	r2, r3, #1
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	601a      	str	r2, [r3, #0]
}
 80035e2:	46c0      	nop			@ (mov r8, r8)
 80035e4:	46bd      	mov	sp, r7
 80035e6:	b004      	add	sp, #16
 80035e8:	bd80      	pop	{r7, pc}

080035ea <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b084      	sub	sp, #16
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	6892      	ldr	r2, [r2, #8]
 8003600:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	6852      	ldr	r2, [r2, #4]
 800360a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	429a      	cmp	r2, r3
 8003614:	d103      	bne.n	800361e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	1e5a      	subs	r2, r3, #1
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
}
 8003632:	0018      	movs	r0, r3
 8003634:	46bd      	mov	sp, r7
 8003636:	b004      	add	sp, #16
 8003638:	bd80      	pop	{r7, pc}

0800363a <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b084      	sub	sp, #16
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
 8003642:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d102      	bne.n	8003654 <xQueueGenericReset+0x1a>
 800364e:	b672      	cpsid	i
 8003650:	46c0      	nop			@ (mov r8, r8)
 8003652:	e7fd      	b.n	8003650 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8003654:	f002 f85c 	bl	8005710 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003664:	434b      	muls	r3, r1
 8003666:	18d2      	adds	r2, r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003682:	1e59      	subs	r1, r3, #1
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003688:	434b      	muls	r3, r1
 800368a:	18d2      	adds	r2, r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2244      	movs	r2, #68	@ 0x44
 8003694:	21ff      	movs	r1, #255	@ 0xff
 8003696:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2245      	movs	r2, #69	@ 0x45
 800369c:	21ff      	movs	r1, #255	@ 0xff
 800369e:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10d      	bne.n	80036c2 <xQueueGenericReset+0x88>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d013      	beq.n	80036d6 <xQueueGenericReset+0x9c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	3310      	adds	r3, #16
 80036b2:	0018      	movs	r0, r3
 80036b4:	f001 f94a 	bl	800494c <xTaskRemoveFromEventList>
 80036b8:	1e03      	subs	r3, r0, #0
 80036ba:	d00c      	beq.n	80036d6 <xQueueGenericReset+0x9c>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80036bc:	f002 f818 	bl	80056f0 <vPortYield>
 80036c0:	e009      	b.n	80036d6 <xQueueGenericReset+0x9c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	3310      	adds	r3, #16
 80036c6:	0018      	movs	r0, r3
 80036c8:	f7ff ff0e 	bl	80034e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	3324      	adds	r3, #36	@ 0x24
 80036d0:	0018      	movs	r0, r3
 80036d2:	f7ff ff09 	bl	80034e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80036d6:	f002 f82d 	bl	8005734 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80036da:	2301      	movs	r3, #1
}
 80036dc:	0018      	movs	r0, r3
 80036de:	46bd      	mov	sp, r7
 80036e0:	b004      	add	sp, #16
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80036e4:	b590      	push	{r4, r7, lr}
 80036e6:	b089      	sub	sp, #36	@ 0x24
 80036e8:	af02      	add	r7, sp, #8
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
 80036f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d102      	bne.n	80036fe <xQueueGenericCreateStatic+0x1a>
 80036f8:	b672      	cpsid	i
 80036fa:	46c0      	nop			@ (mov r8, r8)
 80036fc:	e7fd      	b.n	80036fa <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d102      	bne.n	800370a <xQueueGenericCreateStatic+0x26>
 8003704:	b672      	cpsid	i
 8003706:	46c0      	nop			@ (mov r8, r8)
 8003708:	e7fd      	b.n	8003706 <xQueueGenericCreateStatic+0x22>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d002      	beq.n	8003716 <xQueueGenericCreateStatic+0x32>
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <xQueueGenericCreateStatic+0x36>
 8003716:	2301      	movs	r3, #1
 8003718:	e000      	b.n	800371c <xQueueGenericCreateStatic+0x38>
 800371a:	2300      	movs	r3, #0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d102      	bne.n	8003726 <xQueueGenericCreateStatic+0x42>
 8003720:	b672      	cpsid	i
 8003722:	46c0      	nop			@ (mov r8, r8)
 8003724:	e7fd      	b.n	8003722 <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d102      	bne.n	8003732 <xQueueGenericCreateStatic+0x4e>
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <xQueueGenericCreateStatic+0x52>
 8003732:	2301      	movs	r3, #1
 8003734:	e000      	b.n	8003738 <xQueueGenericCreateStatic+0x54>
 8003736:	2300      	movs	r3, #0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d102      	bne.n	8003742 <xQueueGenericCreateStatic+0x5e>
 800373c:	b672      	cpsid	i
 800373e:	46c0      	nop			@ (mov r8, r8)
 8003740:	e7fd      	b.n	800373e <xQueueGenericCreateStatic+0x5a>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003742:	2350      	movs	r3, #80	@ 0x50
 8003744:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	2b50      	cmp	r3, #80	@ 0x50
 800374a:	d002      	beq.n	8003752 <xQueueGenericCreateStatic+0x6e>
 800374c:	b672      	cpsid	i
 800374e:	46c0      	nop			@ (mov r8, r8)
 8003750:	e7fd      	b.n	800374e <xQueueGenericCreateStatic+0x6a>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00e      	beq.n	800377a <xQueueGenericCreateStatic+0x96>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	2246      	movs	r2, #70	@ 0x46
 8003760:	2101      	movs	r1, #1
 8003762:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003764:	2328      	movs	r3, #40	@ 0x28
 8003766:	18fb      	adds	r3, r7, r3
 8003768:	781c      	ldrb	r4, [r3, #0]
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	68b9      	ldr	r1, [r7, #8]
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	0023      	movs	r3, r4
 8003776:	f000 f83c 	bl	80037f2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800377a:	697b      	ldr	r3, [r7, #20]
	}
 800377c:	0018      	movs	r0, r3
 800377e:	46bd      	mov	sp, r7
 8003780:	b007      	add	sp, #28
 8003782:	bd90      	pop	{r4, r7, pc}

08003784 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003784:	b590      	push	{r4, r7, lr}
 8003786:	b08b      	sub	sp, #44	@ 0x2c
 8003788:	af02      	add	r7, sp, #8
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	1dfb      	adds	r3, r7, #7
 8003790:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d102      	bne.n	800379e <xQueueGenericCreate+0x1a>
 8003798:	b672      	cpsid	i
 800379a:	46c0      	nop			@ (mov r8, r8)
 800379c:	e7fd      	b.n	800379a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d102      	bne.n	80037aa <xQueueGenericCreate+0x26>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80037a4:	2300      	movs	r3, #0
 80037a6:	61fb      	str	r3, [r7, #28]
 80037a8:	e003      	b.n	80037b2 <xQueueGenericCreate+0x2e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	4353      	muls	r3, r2
 80037b0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	3350      	adds	r3, #80	@ 0x50
 80037b6:	0018      	movs	r0, r3
 80037b8:	f002 f842 	bl	8005840 <pvPortMalloc>
 80037bc:	0003      	movs	r3, r0
 80037be:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d010      	beq.n	80037e8 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	3350      	adds	r3, #80	@ 0x50
 80037ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	2246      	movs	r2, #70	@ 0x46
 80037d0:	2100      	movs	r1, #0
 80037d2:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80037d4:	1dfb      	adds	r3, r7, #7
 80037d6:	781c      	ldrb	r4, [r3, #0]
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	68b9      	ldr	r1, [r7, #8]
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	0023      	movs	r3, r4
 80037e4:	f000 f805 	bl	80037f2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80037e8:	69bb      	ldr	r3, [r7, #24]
	}
 80037ea:	0018      	movs	r0, r3
 80037ec:	46bd      	mov	sp, r7
 80037ee:	b009      	add	sp, #36	@ 0x24
 80037f0:	bd90      	pop	{r4, r7, pc}

080037f2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b084      	sub	sp, #16
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	60f8      	str	r0, [r7, #12]
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	607a      	str	r2, [r7, #4]
 80037fe:	001a      	movs	r2, r3
 8003800:	1cfb      	adds	r3, r7, #3
 8003802:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d103      	bne.n	8003812 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	e002      	b.n	8003818 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	2101      	movs	r1, #1
 8003828:	0018      	movs	r0, r3
 800382a:	f7ff ff06 	bl	800363a <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	1cfa      	adds	r2, r7, #3
 8003832:	214c      	movs	r1, #76	@ 0x4c
 8003834:	7812      	ldrb	r2, [r2, #0]
 8003836:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003838:	46c0      	nop			@ (mov r8, r8)
 800383a:	46bd      	mov	sp, r7
 800383c:	b004      	add	sp, #16
 800383e:	bd80      	pop	{r7, pc}

08003840 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00e      	beq.n	800386c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	2300      	movs	r3, #0
 8003864:	2200      	movs	r2, #0
 8003866:	2100      	movs	r1, #0
 8003868:	f000 f820 	bl	80038ac <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800386c:	46c0      	nop			@ (mov r8, r8)
 800386e:	46bd      	mov	sp, r7
 8003870:	b002      	add	sp, #8
 8003872:	bd80      	pop	{r7, pc}

08003874 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	0002      	movs	r2, r0
 800387c:	1dfb      	adds	r3, r7, #7
 800387e:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003880:	2301      	movs	r3, #1
 8003882:	617b      	str	r3, [r7, #20]
 8003884:	2300      	movs	r3, #0
 8003886:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003888:	1dfb      	adds	r3, r7, #7
 800388a:	781a      	ldrb	r2, [r3, #0]
 800388c:	6939      	ldr	r1, [r7, #16]
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	0018      	movs	r0, r3
 8003892:	f7ff ff77 	bl	8003784 <xQueueGenericCreate>
 8003896:	0003      	movs	r3, r0
 8003898:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	0018      	movs	r0, r3
 800389e:	f7ff ffcf 	bl	8003840 <prvInitialiseMutex>

		return pxNewQueue;
 80038a2:	68fb      	ldr	r3, [r7, #12]
	}
 80038a4:	0018      	movs	r0, r3
 80038a6:	46bd      	mov	sp, r7
 80038a8:	b006      	add	sp, #24
 80038aa:	bd80      	pop	{r7, pc}

080038ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b08a      	sub	sp, #40	@ 0x28
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
 80038b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80038ba:	2300      	movs	r3, #0
 80038bc:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d102      	bne.n	80038ce <xQueueGenericSend+0x22>
 80038c8:	b672      	cpsid	i
 80038ca:	46c0      	nop			@ (mov r8, r8)
 80038cc:	e7fd      	b.n	80038ca <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d103      	bne.n	80038dc <xQueueGenericSend+0x30>
 80038d4:	6a3b      	ldr	r3, [r7, #32]
 80038d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <xQueueGenericSend+0x34>
 80038dc:	2301      	movs	r3, #1
 80038de:	e000      	b.n	80038e2 <xQueueGenericSend+0x36>
 80038e0:	2300      	movs	r3, #0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d102      	bne.n	80038ec <xQueueGenericSend+0x40>
 80038e6:	b672      	cpsid	i
 80038e8:	46c0      	nop			@ (mov r8, r8)
 80038ea:	e7fd      	b.n	80038e8 <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d103      	bne.n	80038fa <xQueueGenericSend+0x4e>
 80038f2:	6a3b      	ldr	r3, [r7, #32]
 80038f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d101      	bne.n	80038fe <xQueueGenericSend+0x52>
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <xQueueGenericSend+0x54>
 80038fe:	2300      	movs	r3, #0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d102      	bne.n	800390a <xQueueGenericSend+0x5e>
 8003904:	b672      	cpsid	i
 8003906:	46c0      	nop			@ (mov r8, r8)
 8003908:	e7fd      	b.n	8003906 <xQueueGenericSend+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800390a:	f001 f9bd 	bl	8004c88 <xTaskGetSchedulerState>
 800390e:	1e03      	subs	r3, r0, #0
 8003910:	d102      	bne.n	8003918 <xQueueGenericSend+0x6c>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d101      	bne.n	800391c <xQueueGenericSend+0x70>
 8003918:	2301      	movs	r3, #1
 800391a:	e000      	b.n	800391e <xQueueGenericSend+0x72>
 800391c:	2300      	movs	r3, #0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d102      	bne.n	8003928 <xQueueGenericSend+0x7c>
 8003922:	b672      	cpsid	i
 8003924:	46c0      	nop			@ (mov r8, r8)
 8003926:	e7fd      	b.n	8003924 <xQueueGenericSend+0x78>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003928:	f001 fef2 	bl	8005710 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800392c:	6a3b      	ldr	r3, [r7, #32]
 800392e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003934:	429a      	cmp	r2, r3
 8003936:	d302      	bcc.n	800393e <xQueueGenericSend+0x92>
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	2b02      	cmp	r3, #2
 800393c:	d11e      	bne.n	800397c <xQueueGenericSend+0xd0>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	68b9      	ldr	r1, [r7, #8]
 8003942:	6a3b      	ldr	r3, [r7, #32]
 8003944:	0018      	movs	r0, r3
 8003946:	f000 fa99 	bl	8003e7c <prvCopyDataToQueue>
 800394a:	0003      	movs	r3, r0
 800394c:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800394e:	6a3b      	ldr	r3, [r7, #32]
 8003950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003952:	2b00      	cmp	r3, #0
 8003954:	d009      	beq.n	800396a <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003956:	6a3b      	ldr	r3, [r7, #32]
 8003958:	3324      	adds	r3, #36	@ 0x24
 800395a:	0018      	movs	r0, r3
 800395c:	f000 fff6 	bl	800494c <xTaskRemoveFromEventList>
 8003960:	1e03      	subs	r3, r0, #0
 8003962:	d007      	beq.n	8003974 <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003964:	f001 fec4 	bl	80056f0 <vPortYield>
 8003968:	e004      	b.n	8003974 <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003970:	f001 febe 	bl	80056f0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003974:	f001 fede 	bl	8005734 <vPortExitCritical>
				return pdPASS;
 8003978:	2301      	movs	r3, #1
 800397a:	e05b      	b.n	8003a34 <xQueueGenericSend+0x188>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d103      	bne.n	800398a <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003982:	f001 fed7 	bl	8005734 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003986:	2300      	movs	r3, #0
 8003988:	e054      	b.n	8003a34 <xQueueGenericSend+0x188>
				}
				else if( xEntryTimeSet == pdFALSE )
 800398a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398c:	2b00      	cmp	r3, #0
 800398e:	d106      	bne.n	800399e <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003990:	2314      	movs	r3, #20
 8003992:	18fb      	adds	r3, r7, r3
 8003994:	0018      	movs	r0, r3
 8003996:	f001 f837 	bl	8004a08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800399a:	2301      	movs	r3, #1
 800399c:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800399e:	f001 fec9 	bl	8005734 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80039a2:	f000 fddd 	bl	8004560 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039a6:	f001 feb3 	bl	8005710 <vPortEnterCritical>
 80039aa:	6a3b      	ldr	r3, [r7, #32]
 80039ac:	2244      	movs	r2, #68	@ 0x44
 80039ae:	5c9b      	ldrb	r3, [r3, r2]
 80039b0:	b25b      	sxtb	r3, r3
 80039b2:	3301      	adds	r3, #1
 80039b4:	d103      	bne.n	80039be <xQueueGenericSend+0x112>
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	2244      	movs	r2, #68	@ 0x44
 80039ba:	2100      	movs	r1, #0
 80039bc:	5499      	strb	r1, [r3, r2]
 80039be:	6a3b      	ldr	r3, [r7, #32]
 80039c0:	2245      	movs	r2, #69	@ 0x45
 80039c2:	5c9b      	ldrb	r3, [r3, r2]
 80039c4:	b25b      	sxtb	r3, r3
 80039c6:	3301      	adds	r3, #1
 80039c8:	d103      	bne.n	80039d2 <xQueueGenericSend+0x126>
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	2245      	movs	r2, #69	@ 0x45
 80039ce:	2100      	movs	r1, #0
 80039d0:	5499      	strb	r1, [r3, r2]
 80039d2:	f001 feaf 	bl	8005734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80039d6:	1d3a      	adds	r2, r7, #4
 80039d8:	2314      	movs	r3, #20
 80039da:	18fb      	adds	r3, r7, r3
 80039dc:	0011      	movs	r1, r2
 80039de:	0018      	movs	r0, r3
 80039e0:	f001 f826 	bl	8004a30 <xTaskCheckForTimeOut>
 80039e4:	1e03      	subs	r3, r0, #0
 80039e6:	d11e      	bne.n	8003a26 <xQueueGenericSend+0x17a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80039e8:	6a3b      	ldr	r3, [r7, #32]
 80039ea:	0018      	movs	r0, r3
 80039ec:	f000 fb4b 	bl	8004086 <prvIsQueueFull>
 80039f0:	1e03      	subs	r3, r0, #0
 80039f2:	d011      	beq.n	8003a18 <xQueueGenericSend+0x16c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	3310      	adds	r3, #16
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	0011      	movs	r1, r2
 80039fc:	0018      	movs	r0, r3
 80039fe:	f000 ff5d 	bl	80048bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a02:	6a3b      	ldr	r3, [r7, #32]
 8003a04:	0018      	movs	r0, r3
 8003a06:	f000 faca 	bl	8003f9e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a0a:	f000 fdb5 	bl	8004578 <xTaskResumeAll>
 8003a0e:	1e03      	subs	r3, r0, #0
 8003a10:	d18a      	bne.n	8003928 <xQueueGenericSend+0x7c>
				{
					portYIELD_WITHIN_API();
 8003a12:	f001 fe6d 	bl	80056f0 <vPortYield>
 8003a16:	e787      	b.n	8003928 <xQueueGenericSend+0x7c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003a18:	6a3b      	ldr	r3, [r7, #32]
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	f000 fabf 	bl	8003f9e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a20:	f000 fdaa 	bl	8004578 <xTaskResumeAll>
 8003a24:	e780      	b.n	8003928 <xQueueGenericSend+0x7c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003a26:	6a3b      	ldr	r3, [r7, #32]
 8003a28:	0018      	movs	r0, r3
 8003a2a:	f000 fab8 	bl	8003f9e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a2e:	f000 fda3 	bl	8004578 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003a32:	2300      	movs	r3, #0
		}
	}
}
 8003a34:	0018      	movs	r0, r3
 8003a36:	46bd      	mov	sp, r7
 8003a38:	b00a      	add	sp, #40	@ 0x28
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003a3c:	b590      	push	{r4, r7, lr}
 8003a3e:	b089      	sub	sp, #36	@ 0x24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
 8003a48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d102      	bne.n	8003a5a <xQueueGenericSendFromISR+0x1e>
 8003a54:	b672      	cpsid	i
 8003a56:	46c0      	nop			@ (mov r8, r8)
 8003a58:	e7fd      	b.n	8003a56 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d103      	bne.n	8003a68 <xQueueGenericSendFromISR+0x2c>
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d101      	bne.n	8003a6c <xQueueGenericSendFromISR+0x30>
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e000      	b.n	8003a6e <xQueueGenericSendFromISR+0x32>
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d102      	bne.n	8003a78 <xQueueGenericSendFromISR+0x3c>
 8003a72:	b672      	cpsid	i
 8003a74:	46c0      	nop			@ (mov r8, r8)
 8003a76:	e7fd      	b.n	8003a74 <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d103      	bne.n	8003a86 <xQueueGenericSendFromISR+0x4a>
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d101      	bne.n	8003a8a <xQueueGenericSendFromISR+0x4e>
 8003a86:	2301      	movs	r3, #1
 8003a88:	e000      	b.n	8003a8c <xQueueGenericSendFromISR+0x50>
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d102      	bne.n	8003a96 <xQueueGenericSendFromISR+0x5a>
 8003a90:	b672      	cpsid	i
 8003a92:	46c0      	nop			@ (mov r8, r8)
 8003a94:	e7fd      	b.n	8003a92 <xQueueGenericSendFromISR+0x56>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a96:	f001 fe65 	bl	8005764 <ulSetInterruptMaskFromISR>
 8003a9a:	0003      	movs	r3, r0
 8003a9c:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d302      	bcc.n	8003ab0 <xQueueGenericSendFromISR+0x74>
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d12e      	bne.n	8003b0e <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003ab0:	2413      	movs	r4, #19
 8003ab2:	193b      	adds	r3, r7, r4
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	2145      	movs	r1, #69	@ 0x45
 8003ab8:	5c52      	ldrb	r2, [r2, r1]
 8003aba:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	68b9      	ldr	r1, [r7, #8]
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	0018      	movs	r0, r3
 8003ac4:	f000 f9da 	bl	8003e7c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003ac8:	193b      	adds	r3, r7, r4
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	b25b      	sxtb	r3, r3
 8003ace:	3301      	adds	r3, #1
 8003ad0:	d111      	bne.n	8003af6 <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d016      	beq.n	8003b08 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	3324      	adds	r3, #36	@ 0x24
 8003ade:	0018      	movs	r0, r3
 8003ae0:	f000 ff34 	bl	800494c <xTaskRemoveFromEventList>
 8003ae4:	1e03      	subs	r3, r0, #0
 8003ae6:	d00f      	beq.n	8003b08 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00c      	beq.n	8003b08 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	e008      	b.n	8003b08 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003af6:	2313      	movs	r3, #19
 8003af8:	18fb      	adds	r3, r7, r3
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	3301      	adds	r3, #1
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	b259      	sxtb	r1, r3
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	2245      	movs	r2, #69	@ 0x45
 8003b06:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	61fb      	str	r3, [r7, #28]
		{
 8003b0c:	e001      	b.n	8003b12 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	0018      	movs	r0, r3
 8003b16:	f001 fe2b 	bl	8005770 <vClearInterruptMaskFromISR>

	return xReturn;
 8003b1a:	69fb      	ldr	r3, [r7, #28]
}
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	b009      	add	sp, #36	@ 0x24
 8003b22:	bd90      	pop	{r4, r7, pc}

08003b24 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08a      	sub	sp, #40	@ 0x28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003b30:	2300      	movs	r3, #0
 8003b32:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003b38:	6a3b      	ldr	r3, [r7, #32]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d102      	bne.n	8003b44 <xQueueReceive+0x20>
 8003b3e:	b672      	cpsid	i
 8003b40:	46c0      	nop			@ (mov r8, r8)
 8003b42:	e7fd      	b.n	8003b40 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d103      	bne.n	8003b52 <xQueueReceive+0x2e>
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <xQueueReceive+0x32>
 8003b52:	2301      	movs	r3, #1
 8003b54:	e000      	b.n	8003b58 <xQueueReceive+0x34>
 8003b56:	2300      	movs	r3, #0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d102      	bne.n	8003b62 <xQueueReceive+0x3e>
 8003b5c:	b672      	cpsid	i
 8003b5e:	46c0      	nop			@ (mov r8, r8)
 8003b60:	e7fd      	b.n	8003b5e <xQueueReceive+0x3a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b62:	f001 f891 	bl	8004c88 <xTaskGetSchedulerState>
 8003b66:	1e03      	subs	r3, r0, #0
 8003b68:	d102      	bne.n	8003b70 <xQueueReceive+0x4c>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d101      	bne.n	8003b74 <xQueueReceive+0x50>
 8003b70:	2301      	movs	r3, #1
 8003b72:	e000      	b.n	8003b76 <xQueueReceive+0x52>
 8003b74:	2300      	movs	r3, #0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d102      	bne.n	8003b80 <xQueueReceive+0x5c>
 8003b7a:	b672      	cpsid	i
 8003b7c:	46c0      	nop			@ (mov r8, r8)
 8003b7e:	e7fd      	b.n	8003b7c <xQueueReceive+0x58>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b80:	f001 fdc6 	bl	8005710 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b84:	6a3b      	ldr	r3, [r7, #32]
 8003b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b88:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d01a      	beq.n	8003bc6 <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	6a3b      	ldr	r3, [r7, #32]
 8003b94:	0011      	movs	r1, r2
 8003b96:	0018      	movs	r0, r3
 8003b98:	f000 f9db 	bl	8003f52 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	1e5a      	subs	r2, r3, #1
 8003ba0:	6a3b      	ldr	r3, [r7, #32]
 8003ba2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ba4:	6a3b      	ldr	r3, [r7, #32]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d008      	beq.n	8003bbe <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bac:	6a3b      	ldr	r3, [r7, #32]
 8003bae:	3310      	adds	r3, #16
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	f000 fecb 	bl	800494c <xTaskRemoveFromEventList>
 8003bb6:	1e03      	subs	r3, r0, #0
 8003bb8:	d001      	beq.n	8003bbe <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003bba:	f001 fd99 	bl	80056f0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003bbe:	f001 fdb9 	bl	8005734 <vPortExitCritical>
				return pdPASS;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e062      	b.n	8003c8c <xQueueReceive+0x168>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d103      	bne.n	8003bd4 <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003bcc:	f001 fdb2 	bl	8005734 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	e05b      	b.n	8003c8c <xQueueReceive+0x168>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d106      	bne.n	8003be8 <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003bda:	2314      	movs	r3, #20
 8003bdc:	18fb      	adds	r3, r7, r3
 8003bde:	0018      	movs	r0, r3
 8003be0:	f000 ff12 	bl	8004a08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003be4:	2301      	movs	r3, #1
 8003be6:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003be8:	f001 fda4 	bl	8005734 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003bec:	f000 fcb8 	bl	8004560 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003bf0:	f001 fd8e 	bl	8005710 <vPortEnterCritical>
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
 8003bf6:	2244      	movs	r2, #68	@ 0x44
 8003bf8:	5c9b      	ldrb	r3, [r3, r2]
 8003bfa:	b25b      	sxtb	r3, r3
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	d103      	bne.n	8003c08 <xQueueReceive+0xe4>
 8003c00:	6a3b      	ldr	r3, [r7, #32]
 8003c02:	2244      	movs	r2, #68	@ 0x44
 8003c04:	2100      	movs	r1, #0
 8003c06:	5499      	strb	r1, [r3, r2]
 8003c08:	6a3b      	ldr	r3, [r7, #32]
 8003c0a:	2245      	movs	r2, #69	@ 0x45
 8003c0c:	5c9b      	ldrb	r3, [r3, r2]
 8003c0e:	b25b      	sxtb	r3, r3
 8003c10:	3301      	adds	r3, #1
 8003c12:	d103      	bne.n	8003c1c <xQueueReceive+0xf8>
 8003c14:	6a3b      	ldr	r3, [r7, #32]
 8003c16:	2245      	movs	r2, #69	@ 0x45
 8003c18:	2100      	movs	r1, #0
 8003c1a:	5499      	strb	r1, [r3, r2]
 8003c1c:	f001 fd8a 	bl	8005734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c20:	1d3a      	adds	r2, r7, #4
 8003c22:	2314      	movs	r3, #20
 8003c24:	18fb      	adds	r3, r7, r3
 8003c26:	0011      	movs	r1, r2
 8003c28:	0018      	movs	r0, r3
 8003c2a:	f000 ff01 	bl	8004a30 <xTaskCheckForTimeOut>
 8003c2e:	1e03      	subs	r3, r0, #0
 8003c30:	d11e      	bne.n	8003c70 <xQueueReceive+0x14c>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	0018      	movs	r0, r3
 8003c36:	f000 fa10 	bl	800405a <prvIsQueueEmpty>
 8003c3a:	1e03      	subs	r3, r0, #0
 8003c3c:	d011      	beq.n	8003c62 <xQueueReceive+0x13e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c3e:	6a3b      	ldr	r3, [r7, #32]
 8003c40:	3324      	adds	r3, #36	@ 0x24
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	0011      	movs	r1, r2
 8003c46:	0018      	movs	r0, r3
 8003c48:	f000 fe38 	bl	80048bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003c4c:	6a3b      	ldr	r3, [r7, #32]
 8003c4e:	0018      	movs	r0, r3
 8003c50:	f000 f9a5 	bl	8003f9e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003c54:	f000 fc90 	bl	8004578 <xTaskResumeAll>
 8003c58:	1e03      	subs	r3, r0, #0
 8003c5a:	d191      	bne.n	8003b80 <xQueueReceive+0x5c>
				{
					portYIELD_WITHIN_API();
 8003c5c:	f001 fd48 	bl	80056f0 <vPortYield>
 8003c60:	e78e      	b.n	8003b80 <xQueueReceive+0x5c>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	0018      	movs	r0, r3
 8003c66:	f000 f99a 	bl	8003f9e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c6a:	f000 fc85 	bl	8004578 <xTaskResumeAll>
 8003c6e:	e787      	b.n	8003b80 <xQueueReceive+0x5c>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003c70:	6a3b      	ldr	r3, [r7, #32]
 8003c72:	0018      	movs	r0, r3
 8003c74:	f000 f993 	bl	8003f9e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c78:	f000 fc7e 	bl	8004578 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	0018      	movs	r0, r3
 8003c80:	f000 f9eb 	bl	800405a <prvIsQueueEmpty>
 8003c84:	1e03      	subs	r3, r0, #0
 8003c86:	d100      	bne.n	8003c8a <xQueueReceive+0x166>
 8003c88:	e77a      	b.n	8003b80 <xQueueReceive+0x5c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003c8a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003c8c:	0018      	movs	r0, r3
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	b00a      	add	sp, #40	@ 0x28
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b08a      	sub	sp, #40	@ 0x28
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d102      	bne.n	8003cb6 <xQueueSemaphoreTake+0x22>
 8003cb0:	b672      	cpsid	i
 8003cb2:	46c0      	nop			@ (mov r8, r8)
 8003cb4:	e7fd      	b.n	8003cb2 <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d002      	beq.n	8003cc4 <xQueueSemaphoreTake+0x30>
 8003cbe:	b672      	cpsid	i
 8003cc0:	46c0      	nop			@ (mov r8, r8)
 8003cc2:	e7fd      	b.n	8003cc0 <xQueueSemaphoreTake+0x2c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003cc4:	f000 ffe0 	bl	8004c88 <xTaskGetSchedulerState>
 8003cc8:	1e03      	subs	r3, r0, #0
 8003cca:	d102      	bne.n	8003cd2 <xQueueSemaphoreTake+0x3e>
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <xQueueSemaphoreTake+0x42>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e000      	b.n	8003cd8 <xQueueSemaphoreTake+0x44>
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d102      	bne.n	8003ce2 <xQueueSemaphoreTake+0x4e>
 8003cdc:	b672      	cpsid	i
 8003cde:	46c0      	nop			@ (mov r8, r8)
 8003ce0:	e7fd      	b.n	8003cde <xQueueSemaphoreTake+0x4a>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ce2:	f001 fd15 	bl	8005710 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cea:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d01d      	beq.n	8003d2e <xQueueSemaphoreTake+0x9a>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	1e5a      	subs	r2, r3, #1
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d104      	bne.n	8003d0c <xQueueSemaphoreTake+0x78>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003d02:	f001 f91f 	bl	8004f44 <pvTaskIncrementMutexHeldCount>
 8003d06:	0002      	movs	r2, r0
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d008      	beq.n	8003d26 <xQueueSemaphoreTake+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	3310      	adds	r3, #16
 8003d18:	0018      	movs	r0, r3
 8003d1a:	f000 fe17 	bl	800494c <xTaskRemoveFromEventList>
 8003d1e:	1e03      	subs	r3, r0, #0
 8003d20:	d001      	beq.n	8003d26 <xQueueSemaphoreTake+0x92>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003d22:	f001 fce5 	bl	80056f0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003d26:	f001 fd05 	bl	8005734 <vPortExitCritical>
				return pdPASS;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e08c      	b.n	8003e48 <xQueueSemaphoreTake+0x1b4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d109      	bne.n	8003d48 <xQueueSemaphoreTake+0xb4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003d34:	6a3b      	ldr	r3, [r7, #32]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d002      	beq.n	8003d40 <xQueueSemaphoreTake+0xac>
 8003d3a:	b672      	cpsid	i
 8003d3c:	46c0      	nop			@ (mov r8, r8)
 8003d3e:	e7fd      	b.n	8003d3c <xQueueSemaphoreTake+0xa8>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003d40:	f001 fcf8 	bl	8005734 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d44:	2300      	movs	r3, #0
 8003d46:	e07f      	b.n	8003e48 <xQueueSemaphoreTake+0x1b4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d106      	bne.n	8003d5c <xQueueSemaphoreTake+0xc8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d4e:	230c      	movs	r3, #12
 8003d50:	18fb      	adds	r3, r7, r3
 8003d52:	0018      	movs	r0, r3
 8003d54:	f000 fe58 	bl	8004a08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d5c:	f001 fcea 	bl	8005734 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d60:	f000 fbfe 	bl	8004560 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d64:	f001 fcd4 	bl	8005710 <vPortEnterCritical>
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	2244      	movs	r2, #68	@ 0x44
 8003d6c:	5c9b      	ldrb	r3, [r3, r2]
 8003d6e:	b25b      	sxtb	r3, r3
 8003d70:	3301      	adds	r3, #1
 8003d72:	d103      	bne.n	8003d7c <xQueueSemaphoreTake+0xe8>
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	2244      	movs	r2, #68	@ 0x44
 8003d78:	2100      	movs	r1, #0
 8003d7a:	5499      	strb	r1, [r3, r2]
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	2245      	movs	r2, #69	@ 0x45
 8003d80:	5c9b      	ldrb	r3, [r3, r2]
 8003d82:	b25b      	sxtb	r3, r3
 8003d84:	3301      	adds	r3, #1
 8003d86:	d103      	bne.n	8003d90 <xQueueSemaphoreTake+0xfc>
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	2245      	movs	r2, #69	@ 0x45
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	5499      	strb	r1, [r3, r2]
 8003d90:	f001 fcd0 	bl	8005734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d94:	003a      	movs	r2, r7
 8003d96:	230c      	movs	r3, #12
 8003d98:	18fb      	adds	r3, r7, r3
 8003d9a:	0011      	movs	r1, r2
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	f000 fe47 	bl	8004a30 <xTaskCheckForTimeOut>
 8003da2:	1e03      	subs	r3, r0, #0
 8003da4:	d12e      	bne.n	8003e04 <xQueueSemaphoreTake+0x170>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	0018      	movs	r0, r3
 8003daa:	f000 f956 	bl	800405a <prvIsQueueEmpty>
 8003dae:	1e03      	subs	r3, r0, #0
 8003db0:	d021      	beq.n	8003df6 <xQueueSemaphoreTake+0x162>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10a      	bne.n	8003dd0 <xQueueSemaphoreTake+0x13c>
					{
						taskENTER_CRITICAL();
 8003dba:	f001 fca9 	bl	8005710 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	0018      	movs	r0, r3
 8003dc4:	f000 ff7c 	bl	8004cc0 <xTaskPriorityInherit>
 8003dc8:	0003      	movs	r3, r0
 8003dca:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8003dcc:	f001 fcb2 	bl	8005734 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	3324      	adds	r3, #36	@ 0x24
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	0011      	movs	r1, r2
 8003dd8:	0018      	movs	r0, r3
 8003dda:	f000 fd6f 	bl	80048bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	0018      	movs	r0, r3
 8003de2:	f000 f8dc 	bl	8003f9e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003de6:	f000 fbc7 	bl	8004578 <xTaskResumeAll>
 8003dea:	1e03      	subs	r3, r0, #0
 8003dec:	d000      	beq.n	8003df0 <xQueueSemaphoreTake+0x15c>
 8003dee:	e778      	b.n	8003ce2 <xQueueSemaphoreTake+0x4e>
				{
					portYIELD_WITHIN_API();
 8003df0:	f001 fc7e 	bl	80056f0 <vPortYield>
 8003df4:	e775      	b.n	8003ce2 <xQueueSemaphoreTake+0x4e>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	0018      	movs	r0, r3
 8003dfa:	f000 f8d0 	bl	8003f9e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003dfe:	f000 fbbb 	bl	8004578 <xTaskResumeAll>
 8003e02:	e76e      	b.n	8003ce2 <xQueueSemaphoreTake+0x4e>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	0018      	movs	r0, r3
 8003e08:	f000 f8c9 	bl	8003f9e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e0c:	f000 fbb4 	bl	8004578 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	0018      	movs	r0, r3
 8003e14:	f000 f921 	bl	800405a <prvIsQueueEmpty>
 8003e18:	1e03      	subs	r3, r0, #0
 8003e1a:	d100      	bne.n	8003e1e <xQueueSemaphoreTake+0x18a>
 8003e1c:	e761      	b.n	8003ce2 <xQueueSemaphoreTake+0x4e>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003e1e:	6a3b      	ldr	r3, [r7, #32]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d010      	beq.n	8003e46 <xQueueSemaphoreTake+0x1b2>
					{
						taskENTER_CRITICAL();
 8003e24:	f001 fc74 	bl	8005710 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	f000 f810 	bl	8003e50 <prvGetDisinheritPriorityAfterTimeout>
 8003e30:	0003      	movs	r3, r0
 8003e32:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	0011      	movs	r1, r2
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	f001 f80b 	bl	8004e58 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003e42:	f001 fc77 	bl	8005734 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003e46:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003e48:	0018      	movs	r0, r3
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	b00a      	add	sp, #40	@ 0x28
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d006      	beq.n	8003e6e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2238      	movs	r2, #56	@ 0x38
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	e001      	b.n	8003e72 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003e72:	68fb      	ldr	r3, [r7, #12]
	}
 8003e74:	0018      	movs	r0, r3
 8003e76:	46bd      	mov	sp, r7
 8003e78:	b004      	add	sp, #16
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e90:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10e      	bne.n	8003eb8 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d14e      	bne.n	8003f40 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	0018      	movs	r0, r3
 8003ea8:	f000 ff78 	bl	8004d9c <xTaskPriorityDisinherit>
 8003eac:	0003      	movs	r3, r0
 8003eae:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	605a      	str	r2, [r3, #4]
 8003eb6:	e043      	b.n	8003f40 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d119      	bne.n	8003ef2 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6898      	ldr	r0, [r3, #8]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	0019      	movs	r1, r3
 8003eca:	f001 fe8f 	bl	8005bec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	689a      	ldr	r2, [r3, #8]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed6:	18d2      	adds	r2, r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d32b      	bcc.n	8003f40 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	609a      	str	r2, [r3, #8]
 8003ef0:	e026      	b.n	8003f40 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	68d8      	ldr	r0, [r3, #12]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	0019      	movs	r1, r3
 8003efe:	f001 fe75 	bl	8005bec <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0a:	425b      	negs	r3, r3
 8003f0c:	18d2      	adds	r2, r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	68da      	ldr	r2, [r3, #12]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d207      	bcs.n	8003f2e <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f26:	425b      	negs	r3, r3
 8003f28:	18d2      	adds	r2, r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d105      	bne.n	8003f40 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d002      	beq.n	8003f40 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1c5a      	adds	r2, r3, #1
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003f48:	697b      	ldr	r3, [r7, #20]
}
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	b006      	add	sp, #24
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b082      	sub	sp, #8
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
 8003f5a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d018      	beq.n	8003f96 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68da      	ldr	r2, [r3, #12]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6c:	18d2      	adds	r2, r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d303      	bcc.n	8003f86 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68d9      	ldr	r1, [r3, #12]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	0018      	movs	r0, r3
 8003f92:	f001 fe2b 	bl	8005bec <memcpy>
	}
}
 8003f96:	46c0      	nop			@ (mov r8, r8)
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	b002      	add	sp, #8
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b084      	sub	sp, #16
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003fa6:	f001 fbb3 	bl	8005710 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003faa:	230f      	movs	r3, #15
 8003fac:	18fb      	adds	r3, r7, r3
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	2145      	movs	r1, #69	@ 0x45
 8003fb2:	5c52      	ldrb	r2, [r2, r1]
 8003fb4:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fb6:	e013      	b.n	8003fe0 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d016      	beq.n	8003fee <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3324      	adds	r3, #36	@ 0x24
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	f000 fcc1 	bl	800494c <xTaskRemoveFromEventList>
 8003fca:	1e03      	subs	r3, r0, #0
 8003fcc:	d001      	beq.n	8003fd2 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003fce:	f000 fd81 	bl	8004ad4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003fd2:	210f      	movs	r1, #15
 8003fd4:	187b      	adds	r3, r7, r1
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	b2da      	uxtb	r2, r3
 8003fdc:	187b      	adds	r3, r7, r1
 8003fde:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fe0:	230f      	movs	r3, #15
 8003fe2:	18fb      	adds	r3, r7, r3
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	b25b      	sxtb	r3, r3
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	dce5      	bgt.n	8003fb8 <prvUnlockQueue+0x1a>
 8003fec:	e000      	b.n	8003ff0 <prvUnlockQueue+0x52>
					break;
 8003fee:	46c0      	nop			@ (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2245      	movs	r2, #69	@ 0x45
 8003ff4:	21ff      	movs	r1, #255	@ 0xff
 8003ff6:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8003ff8:	f001 fb9c 	bl	8005734 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003ffc:	f001 fb88 	bl	8005710 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004000:	230e      	movs	r3, #14
 8004002:	18fb      	adds	r3, r7, r3
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	2144      	movs	r1, #68	@ 0x44
 8004008:	5c52      	ldrb	r2, [r2, r1]
 800400a:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800400c:	e013      	b.n	8004036 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d016      	beq.n	8004044 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	3310      	adds	r3, #16
 800401a:	0018      	movs	r0, r3
 800401c:	f000 fc96 	bl	800494c <xTaskRemoveFromEventList>
 8004020:	1e03      	subs	r3, r0, #0
 8004022:	d001      	beq.n	8004028 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8004024:	f000 fd56 	bl	8004ad4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004028:	210e      	movs	r1, #14
 800402a:	187b      	adds	r3, r7, r1
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	3b01      	subs	r3, #1
 8004030:	b2da      	uxtb	r2, r3
 8004032:	187b      	adds	r3, r7, r1
 8004034:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004036:	230e      	movs	r3, #14
 8004038:	18fb      	adds	r3, r7, r3
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	b25b      	sxtb	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	dce5      	bgt.n	800400e <prvUnlockQueue+0x70>
 8004042:	e000      	b.n	8004046 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8004044:	46c0      	nop			@ (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2244      	movs	r2, #68	@ 0x44
 800404a:	21ff      	movs	r1, #255	@ 0xff
 800404c:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800404e:	f001 fb71 	bl	8005734 <vPortExitCritical>
}
 8004052:	46c0      	nop			@ (mov r8, r8)
 8004054:	46bd      	mov	sp, r7
 8004056:	b004      	add	sp, #16
 8004058:	bd80      	pop	{r7, pc}

0800405a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b084      	sub	sp, #16
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004062:	f001 fb55 	bl	8005710 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800406a:	2b00      	cmp	r3, #0
 800406c:	d102      	bne.n	8004074 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800406e:	2301      	movs	r3, #1
 8004070:	60fb      	str	r3, [r7, #12]
 8004072:	e001      	b.n	8004078 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004074:	2300      	movs	r3, #0
 8004076:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004078:	f001 fb5c 	bl	8005734 <vPortExitCritical>

	return xReturn;
 800407c:	68fb      	ldr	r3, [r7, #12]
}
 800407e:	0018      	movs	r0, r3
 8004080:	46bd      	mov	sp, r7
 8004082:	b004      	add	sp, #16
 8004084:	bd80      	pop	{r7, pc}

08004086 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b084      	sub	sp, #16
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800408e:	f001 fb3f 	bl	8005710 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800409a:	429a      	cmp	r2, r3
 800409c:	d102      	bne.n	80040a4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800409e:	2301      	movs	r3, #1
 80040a0:	60fb      	str	r3, [r7, #12]
 80040a2:	e001      	b.n	80040a8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80040a4:	2300      	movs	r3, #0
 80040a6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80040a8:	f001 fb44 	bl	8005734 <vPortExitCritical>

	return xReturn;
 80040ac:	68fb      	ldr	r3, [r7, #12]
}
 80040ae:	0018      	movs	r0, r3
 80040b0:	46bd      	mov	sp, r7
 80040b2:	b004      	add	sp, #16
 80040b4:	bd80      	pop	{r7, pc}
	...

080040b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040c2:	2300      	movs	r3, #0
 80040c4:	60fb      	str	r3, [r7, #12]
 80040c6:	e015      	b.n	80040f4 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80040c8:	4b0e      	ldr	r3, [pc, #56]	@ (8004104 <vQueueAddToRegistry+0x4c>)
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	00d2      	lsls	r2, r2, #3
 80040ce:	58d3      	ldr	r3, [r2, r3]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10c      	bne.n	80040ee <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80040d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004104 <vQueueAddToRegistry+0x4c>)
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	00d2      	lsls	r2, r2, #3
 80040da:	6839      	ldr	r1, [r7, #0]
 80040dc:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80040de:	4a09      	ldr	r2, [pc, #36]	@ (8004104 <vQueueAddToRegistry+0x4c>)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	18d3      	adds	r3, r2, r3
 80040e6:	3304      	adds	r3, #4
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80040ec:	e006      	b.n	80040fc <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	3301      	adds	r3, #1
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2b07      	cmp	r3, #7
 80040f8:	d9e6      	bls.n	80040c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80040fa:	46c0      	nop			@ (mov r8, r8)
 80040fc:	46c0      	nop			@ (mov r8, r8)
 80040fe:	46bd      	mov	sp, r7
 8004100:	b004      	add	sp, #16
 8004102:	bd80      	pop	{r7, pc}
 8004104:	20000718 	.word	0x20000718

08004108 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004118:	f001 fafa 	bl	8005710 <vPortEnterCritical>
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	2244      	movs	r2, #68	@ 0x44
 8004120:	5c9b      	ldrb	r3, [r3, r2]
 8004122:	b25b      	sxtb	r3, r3
 8004124:	3301      	adds	r3, #1
 8004126:	d103      	bne.n	8004130 <vQueueWaitForMessageRestricted+0x28>
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	2244      	movs	r2, #68	@ 0x44
 800412c:	2100      	movs	r1, #0
 800412e:	5499      	strb	r1, [r3, r2]
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	2245      	movs	r2, #69	@ 0x45
 8004134:	5c9b      	ldrb	r3, [r3, r2]
 8004136:	b25b      	sxtb	r3, r3
 8004138:	3301      	adds	r3, #1
 800413a:	d103      	bne.n	8004144 <vQueueWaitForMessageRestricted+0x3c>
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	2245      	movs	r2, #69	@ 0x45
 8004140:	2100      	movs	r1, #0
 8004142:	5499      	strb	r1, [r3, r2]
 8004144:	f001 faf6 	bl	8005734 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800414c:	2b00      	cmp	r3, #0
 800414e:	d106      	bne.n	800415e <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	3324      	adds	r3, #36	@ 0x24
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	68b9      	ldr	r1, [r7, #8]
 8004158:	0018      	movs	r0, r3
 800415a:	f000 fbcf 	bl	80048fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	0018      	movs	r0, r3
 8004162:	f7ff ff1c 	bl	8003f9e <prvUnlockQueue>
	}
 8004166:	46c0      	nop			@ (mov r8, r8)
 8004168:	46bd      	mov	sp, r7
 800416a:	b006      	add	sp, #24
 800416c:	bd80      	pop	{r7, pc}

0800416e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800416e:	b590      	push	{r4, r7, lr}
 8004170:	b08d      	sub	sp, #52	@ 0x34
 8004172:	af04      	add	r7, sp, #16
 8004174:	60f8      	str	r0, [r7, #12]
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	607a      	str	r2, [r7, #4]
 800417a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800417c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800417e:	2b00      	cmp	r3, #0
 8004180:	d102      	bne.n	8004188 <xTaskCreateStatic+0x1a>
 8004182:	b672      	cpsid	i
 8004184:	46c0      	nop			@ (mov r8, r8)
 8004186:	e7fd      	b.n	8004184 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8004188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800418a:	2b00      	cmp	r3, #0
 800418c:	d102      	bne.n	8004194 <xTaskCreateStatic+0x26>
 800418e:	b672      	cpsid	i
 8004190:	46c0      	nop			@ (mov r8, r8)
 8004192:	e7fd      	b.n	8004190 <xTaskCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004194:	235c      	movs	r3, #92	@ 0x5c
 8004196:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	2b5c      	cmp	r3, #92	@ 0x5c
 800419c:	d002      	beq.n	80041a4 <xTaskCreateStatic+0x36>
 800419e:	b672      	cpsid	i
 80041a0:	46c0      	nop			@ (mov r8, r8)
 80041a2:	e7fd      	b.n	80041a0 <xTaskCreateStatic+0x32>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80041a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d020      	beq.n	80041ec <xTaskCreateStatic+0x7e>
 80041aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d01d      	beq.n	80041ec <xTaskCreateStatic+0x7e>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041b2:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80041b8:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	2259      	movs	r2, #89	@ 0x59
 80041be:	2102      	movs	r1, #2
 80041c0:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80041c2:	683c      	ldr	r4, [r7, #0]
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	68b9      	ldr	r1, [r7, #8]
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	2300      	movs	r3, #0
 80041cc:	9303      	str	r3, [sp, #12]
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	9302      	str	r3, [sp, #8]
 80041d2:	2318      	movs	r3, #24
 80041d4:	18fb      	adds	r3, r7, r3
 80041d6:	9301      	str	r3, [sp, #4]
 80041d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	0023      	movs	r3, r4
 80041de:	f000 f859 	bl	8004294 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	0018      	movs	r0, r3
 80041e6:	f000 f8d7 	bl	8004398 <prvAddNewTaskToReadyList>
 80041ea:	e001      	b.n	80041f0 <xTaskCreateStatic+0x82>
		}
		else
		{
			xReturn = NULL;
 80041ec:	2300      	movs	r3, #0
 80041ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80041f0:	69bb      	ldr	r3, [r7, #24]
	}
 80041f2:	0018      	movs	r0, r3
 80041f4:	46bd      	mov	sp, r7
 80041f6:	b009      	add	sp, #36	@ 0x24
 80041f8:	bd90      	pop	{r4, r7, pc}

080041fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80041fa:	b590      	push	{r4, r7, lr}
 80041fc:	b08d      	sub	sp, #52	@ 0x34
 80041fe:	af04      	add	r7, sp, #16
 8004200:	60f8      	str	r0, [r7, #12]
 8004202:	60b9      	str	r1, [r7, #8]
 8004204:	603b      	str	r3, [r7, #0]
 8004206:	1dbb      	adds	r3, r7, #6
 8004208:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800420a:	1dbb      	adds	r3, r7, #6
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	0018      	movs	r0, r3
 8004212:	f001 fb15 	bl	8005840 <pvPortMalloc>
 8004216:	0003      	movs	r3, r0
 8004218:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d010      	beq.n	8004242 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004220:	205c      	movs	r0, #92	@ 0x5c
 8004222:	f001 fb0d 	bl	8005840 <pvPortMalloc>
 8004226:	0003      	movs	r3, r0
 8004228:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	631a      	str	r2, [r3, #48]	@ 0x30
 8004236:	e006      	b.n	8004246 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	0018      	movs	r0, r3
 800423c:	f001 fba8 	bl	8005990 <vPortFree>
 8004240:	e001      	b.n	8004246 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004242:	2300      	movs	r3, #0
 8004244:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d01a      	beq.n	8004282 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	2259      	movs	r2, #89	@ 0x59
 8004250:	2100      	movs	r1, #0
 8004252:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004254:	1dbb      	adds	r3, r7, #6
 8004256:	881a      	ldrh	r2, [r3, #0]
 8004258:	683c      	ldr	r4, [r7, #0]
 800425a:	68b9      	ldr	r1, [r7, #8]
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	2300      	movs	r3, #0
 8004260:	9303      	str	r3, [sp, #12]
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	9302      	str	r3, [sp, #8]
 8004266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004268:	9301      	str	r3, [sp, #4]
 800426a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	0023      	movs	r3, r4
 8004270:	f000 f810 	bl	8004294 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	0018      	movs	r0, r3
 8004278:	f000 f88e 	bl	8004398 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800427c:	2301      	movs	r3, #1
 800427e:	61bb      	str	r3, [r7, #24]
 8004280:	e002      	b.n	8004288 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004282:	2301      	movs	r3, #1
 8004284:	425b      	negs	r3, r3
 8004286:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004288:	69bb      	ldr	r3, [r7, #24]
	}
 800428a:	0018      	movs	r0, r3
 800428c:	46bd      	mov	sp, r7
 800428e:	b009      	add	sp, #36	@ 0x24
 8004290:	bd90      	pop	{r4, r7, pc}
	...

08004294 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
 80042a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80042a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042a4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	001a      	movs	r2, r3
 80042ac:	21a5      	movs	r1, #165	@ 0xa5
 80042ae:	f001 fc71 	bl	8005b94 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80042b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4936      	ldr	r1, [pc, #216]	@ (8004394 <prvInitialiseNewTask+0x100>)
 80042ba:	468c      	mov	ip, r1
 80042bc:	4463      	add	r3, ip
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	18d3      	adds	r3, r2, r3
 80042c2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	2207      	movs	r2, #7
 80042c8:	4393      	bics	r3, r2
 80042ca:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	2207      	movs	r2, #7
 80042d0:	4013      	ands	r3, r2
 80042d2:	d002      	beq.n	80042da <prvInitialiseNewTask+0x46>
 80042d4:	b672      	cpsid	i
 80042d6:	46c0      	nop			@ (mov r8, r8)
 80042d8:	e7fd      	b.n	80042d6 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042da:	2300      	movs	r3, #0
 80042dc:	617b      	str	r3, [r7, #20]
 80042de:	e013      	b.n	8004308 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	18d3      	adds	r3, r2, r3
 80042e6:	7818      	ldrb	r0, [r3, #0]
 80042e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042ea:	2134      	movs	r1, #52	@ 0x34
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	18d3      	adds	r3, r2, r3
 80042f0:	185b      	adds	r3, r3, r1
 80042f2:	1c02      	adds	r2, r0, #0
 80042f4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	18d3      	adds	r3, r2, r3
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d006      	beq.n	8004310 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	3301      	adds	r3, #1
 8004306:	617b      	str	r3, [r7, #20]
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	2b0f      	cmp	r3, #15
 800430c:	d9e8      	bls.n	80042e0 <prvInitialiseNewTask+0x4c>
 800430e:	e000      	b.n	8004312 <prvInitialiseNewTask+0x7e>
		{
			break;
 8004310:	46c0      	nop			@ (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004314:	2243      	movs	r2, #67	@ 0x43
 8004316:	2100      	movs	r1, #0
 8004318:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	2b37      	cmp	r3, #55	@ 0x37
 800431e:	d901      	bls.n	8004324 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004320:	2337      	movs	r3, #55	@ 0x37
 8004322:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004326:	6a3a      	ldr	r2, [r7, #32]
 8004328:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800432a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800432c:	6a3a      	ldr	r2, [r7, #32]
 800432e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004332:	2200      	movs	r2, #0
 8004334:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004338:	3304      	adds	r3, #4
 800433a:	0018      	movs	r0, r3
 800433c:	f7ff f8f2 	bl	8003524 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004342:	3318      	adds	r3, #24
 8004344:	0018      	movs	r0, r3
 8004346:	f7ff f8ed 	bl	8003524 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800434a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800434c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800434e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004350:	6a3b      	ldr	r3, [r7, #32]
 8004352:	2238      	movs	r2, #56	@ 0x38
 8004354:	1ad2      	subs	r2, r2, r3
 8004356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004358:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800435a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800435c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800435e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004362:	2200      	movs	r2, #0
 8004364:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004368:	2258      	movs	r2, #88	@ 0x58
 800436a:	2100      	movs	r1, #0
 800436c:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	68f9      	ldr	r1, [r7, #12]
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	0018      	movs	r0, r3
 8004376:	f001 f92f 	bl	80055d8 <pxPortInitialiseStack>
 800437a:	0002      	movs	r2, r0
 800437c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800437e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004382:	2b00      	cmp	r3, #0
 8004384:	d002      	beq.n	800438c <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004388:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800438a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800438c:	46c0      	nop			@ (mov r8, r8)
 800438e:	46bd      	mov	sp, r7
 8004390:	b006      	add	sp, #24
 8004392:	bd80      	pop	{r7, pc}
 8004394:	3fffffff 	.word	0x3fffffff

08004398 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80043a0:	f001 f9b6 	bl	8005710 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80043a4:	4b2a      	ldr	r3, [pc, #168]	@ (8004450 <prvAddNewTaskToReadyList+0xb8>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	1c5a      	adds	r2, r3, #1
 80043aa:	4b29      	ldr	r3, [pc, #164]	@ (8004450 <prvAddNewTaskToReadyList+0xb8>)
 80043ac:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80043ae:	4b29      	ldr	r3, [pc, #164]	@ (8004454 <prvAddNewTaskToReadyList+0xbc>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d109      	bne.n	80043ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80043b6:	4b27      	ldr	r3, [pc, #156]	@ (8004454 <prvAddNewTaskToReadyList+0xbc>)
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80043bc:	4b24      	ldr	r3, [pc, #144]	@ (8004450 <prvAddNewTaskToReadyList+0xb8>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d110      	bne.n	80043e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80043c4:	f000 fba0 	bl	8004b08 <prvInitialiseTaskLists>
 80043c8:	e00d      	b.n	80043e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80043ca:	4b23      	ldr	r3, [pc, #140]	@ (8004458 <prvAddNewTaskToReadyList+0xc0>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d109      	bne.n	80043e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80043d2:	4b20      	ldr	r3, [pc, #128]	@ (8004454 <prvAddNewTaskToReadyList+0xbc>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043dc:	429a      	cmp	r2, r3
 80043de:	d802      	bhi.n	80043e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80043e0:	4b1c      	ldr	r3, [pc, #112]	@ (8004454 <prvAddNewTaskToReadyList+0xbc>)
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80043e6:	4b1d      	ldr	r3, [pc, #116]	@ (800445c <prvAddNewTaskToReadyList+0xc4>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	1c5a      	adds	r2, r3, #1
 80043ec:	4b1b      	ldr	r3, [pc, #108]	@ (800445c <prvAddNewTaskToReadyList+0xc4>)
 80043ee:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80043f0:	4b1a      	ldr	r3, [pc, #104]	@ (800445c <prvAddNewTaskToReadyList+0xc4>)
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043fc:	4b18      	ldr	r3, [pc, #96]	@ (8004460 <prvAddNewTaskToReadyList+0xc8>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	429a      	cmp	r2, r3
 8004402:	d903      	bls.n	800440c <prvAddNewTaskToReadyList+0x74>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004408:	4b15      	ldr	r3, [pc, #84]	@ (8004460 <prvAddNewTaskToReadyList+0xc8>)
 800440a:	601a      	str	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004410:	0013      	movs	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	189b      	adds	r3, r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4a12      	ldr	r2, [pc, #72]	@ (8004464 <prvAddNewTaskToReadyList+0xcc>)
 800441a:	189a      	adds	r2, r3, r2
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	3304      	adds	r3, #4
 8004420:	0019      	movs	r1, r3
 8004422:	0010      	movs	r0, r2
 8004424:	f7ff f889 	bl	800353a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004428:	f001 f984 	bl	8005734 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800442c:	4b0a      	ldr	r3, [pc, #40]	@ (8004458 <prvAddNewTaskToReadyList+0xc0>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d008      	beq.n	8004446 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004434:	4b07      	ldr	r3, [pc, #28]	@ (8004454 <prvAddNewTaskToReadyList+0xbc>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800443e:	429a      	cmp	r2, r3
 8004440:	d201      	bcs.n	8004446 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004442:	f001 f955 	bl	80056f0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004446:	46c0      	nop			@ (mov r8, r8)
 8004448:	46bd      	mov	sp, r7
 800444a:	b002      	add	sp, #8
 800444c:	bd80      	pop	{r7, pc}
 800444e:	46c0      	nop			@ (mov r8, r8)
 8004450:	20000c2c 	.word	0x20000c2c
 8004454:	20000758 	.word	0x20000758
 8004458:	20000c38 	.word	0x20000c38
 800445c:	20000c48 	.word	0x20000c48
 8004460:	20000c34 	.word	0x20000c34
 8004464:	2000075c 	.word	0x2000075c

08004468 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004470:	2300      	movs	r3, #0
 8004472:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d011      	beq.n	800449e <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800447a:	4b0d      	ldr	r3, [pc, #52]	@ (80044b0 <vTaskDelay+0x48>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d002      	beq.n	8004488 <vTaskDelay+0x20>
 8004482:	b672      	cpsid	i
 8004484:	46c0      	nop			@ (mov r8, r8)
 8004486:	e7fd      	b.n	8004484 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8004488:	f000 f86a 	bl	8004560 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2100      	movs	r1, #0
 8004490:	0018      	movs	r0, r3
 8004492:	f000 fd69 	bl	8004f68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004496:	f000 f86f 	bl	8004578 <xTaskResumeAll>
 800449a:	0003      	movs	r3, r0
 800449c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d101      	bne.n	80044a8 <vTaskDelay+0x40>
		{
			portYIELD_WITHIN_API();
 80044a4:	f001 f924 	bl	80056f0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80044a8:	46c0      	nop			@ (mov r8, r8)
 80044aa:	46bd      	mov	sp, r7
 80044ac:	b004      	add	sp, #16
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	20000c54 	.word	0x20000c54

080044b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80044b4:	b590      	push	{r4, r7, lr}
 80044b6:	b089      	sub	sp, #36	@ 0x24
 80044b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80044ba:	2300      	movs	r3, #0
 80044bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80044be:	2300      	movs	r3, #0
 80044c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80044c2:	003a      	movs	r2, r7
 80044c4:	1d39      	adds	r1, r7, #4
 80044c6:	2308      	movs	r3, #8
 80044c8:	18fb      	adds	r3, r7, r3
 80044ca:	0018      	movs	r0, r3
 80044cc:	f7fe ffdc 	bl	8003488 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80044d0:	683c      	ldr	r4, [r7, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68ba      	ldr	r2, [r7, #8]
 80044d6:	491c      	ldr	r1, [pc, #112]	@ (8004548 <vTaskStartScheduler+0x94>)
 80044d8:	481c      	ldr	r0, [pc, #112]	@ (800454c <vTaskStartScheduler+0x98>)
 80044da:	9202      	str	r2, [sp, #8]
 80044dc:	9301      	str	r3, [sp, #4]
 80044de:	2300      	movs	r3, #0
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	2300      	movs	r3, #0
 80044e4:	0022      	movs	r2, r4
 80044e6:	f7ff fe42 	bl	800416e <xTaskCreateStatic>
 80044ea:	0002      	movs	r2, r0
 80044ec:	4b18      	ldr	r3, [pc, #96]	@ (8004550 <vTaskStartScheduler+0x9c>)
 80044ee:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80044f0:	4b17      	ldr	r3, [pc, #92]	@ (8004550 <vTaskStartScheduler+0x9c>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d002      	beq.n	80044fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80044f8:	2301      	movs	r3, #1
 80044fa:	60fb      	str	r3, [r7, #12]
 80044fc:	e001      	b.n	8004502 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80044fe:	2300      	movs	r3, #0
 8004500:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d103      	bne.n	8004510 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8004508:	f000 fd82 	bl	8005010 <xTimerCreateTimerTask>
 800450c:	0003      	movs	r3, r0
 800450e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d10d      	bne.n	8004532 <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8004516:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004518:	4b0e      	ldr	r3, [pc, #56]	@ (8004554 <vTaskStartScheduler+0xa0>)
 800451a:	2201      	movs	r2, #1
 800451c:	4252      	negs	r2, r2
 800451e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004520:	4b0d      	ldr	r3, [pc, #52]	@ (8004558 <vTaskStartScheduler+0xa4>)
 8004522:	2201      	movs	r2, #1
 8004524:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004526:	4b0d      	ldr	r3, [pc, #52]	@ (800455c <vTaskStartScheduler+0xa8>)
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800452c:	f001 f8bc 	bl	80056a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004530:	e005      	b.n	800453e <vTaskStartScheduler+0x8a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	3301      	adds	r3, #1
 8004536:	d102      	bne.n	800453e <vTaskStartScheduler+0x8a>
 8004538:	b672      	cpsid	i
 800453a:	46c0      	nop			@ (mov r8, r8)
 800453c:	e7fd      	b.n	800453a <vTaskStartScheduler+0x86>
}
 800453e:	46c0      	nop			@ (mov r8, r8)
 8004540:	46bd      	mov	sp, r7
 8004542:	b005      	add	sp, #20
 8004544:	bd90      	pop	{r4, r7, pc}
 8004546:	46c0      	nop			@ (mov r8, r8)
 8004548:	08005ca8 	.word	0x08005ca8
 800454c:	08004ae9 	.word	0x08004ae9
 8004550:	20000c50 	.word	0x20000c50
 8004554:	20000c4c 	.word	0x20000c4c
 8004558:	20000c38 	.word	0x20000c38
 800455c:	20000c30 	.word	0x20000c30

08004560 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004560:	b580      	push	{r7, lr}
 8004562:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004564:	4b03      	ldr	r3, [pc, #12]	@ (8004574 <vTaskSuspendAll+0x14>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	1c5a      	adds	r2, r3, #1
 800456a:	4b02      	ldr	r3, [pc, #8]	@ (8004574 <vTaskSuspendAll+0x14>)
 800456c:	601a      	str	r2, [r3, #0]
}
 800456e:	46c0      	nop			@ (mov r8, r8)
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	20000c54 	.word	0x20000c54

08004578 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800457e:	2300      	movs	r3, #0
 8004580:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004582:	2300      	movs	r3, #0
 8004584:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004586:	4b3a      	ldr	r3, [pc, #232]	@ (8004670 <xTaskResumeAll+0xf8>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d102      	bne.n	8004594 <xTaskResumeAll+0x1c>
 800458e:	b672      	cpsid	i
 8004590:	46c0      	nop			@ (mov r8, r8)
 8004592:	e7fd      	b.n	8004590 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004594:	f001 f8bc 	bl	8005710 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004598:	4b35      	ldr	r3, [pc, #212]	@ (8004670 <xTaskResumeAll+0xf8>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	1e5a      	subs	r2, r3, #1
 800459e:	4b34      	ldr	r3, [pc, #208]	@ (8004670 <xTaskResumeAll+0xf8>)
 80045a0:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045a2:	4b33      	ldr	r3, [pc, #204]	@ (8004670 <xTaskResumeAll+0xf8>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d15b      	bne.n	8004662 <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045aa:	4b32      	ldr	r3, [pc, #200]	@ (8004674 <xTaskResumeAll+0xfc>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d057      	beq.n	8004662 <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045b2:	e02f      	b.n	8004614 <xTaskResumeAll+0x9c>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80045b4:	4b30      	ldr	r3, [pc, #192]	@ (8004678 <xTaskResumeAll+0x100>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	3318      	adds	r3, #24
 80045c0:	0018      	movs	r0, r3
 80045c2:	f7ff f812 	bl	80035ea <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	3304      	adds	r3, #4
 80045ca:	0018      	movs	r0, r3
 80045cc:	f7ff f80d 	bl	80035ea <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045d4:	4b29      	ldr	r3, [pc, #164]	@ (800467c <xTaskResumeAll+0x104>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d903      	bls.n	80045e4 <xTaskResumeAll+0x6c>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045e0:	4b26      	ldr	r3, [pc, #152]	@ (800467c <xTaskResumeAll+0x104>)
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045e8:	0013      	movs	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	189b      	adds	r3, r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4a23      	ldr	r2, [pc, #140]	@ (8004680 <xTaskResumeAll+0x108>)
 80045f2:	189a      	adds	r2, r3, r2
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	3304      	adds	r3, #4
 80045f8:	0019      	movs	r1, r3
 80045fa:	0010      	movs	r0, r2
 80045fc:	f7fe ff9d 	bl	800353a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004604:	4b1f      	ldr	r3, [pc, #124]	@ (8004684 <xTaskResumeAll+0x10c>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800460a:	429a      	cmp	r2, r3
 800460c:	d302      	bcc.n	8004614 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 800460e:	4b1e      	ldr	r3, [pc, #120]	@ (8004688 <xTaskResumeAll+0x110>)
 8004610:	2201      	movs	r2, #1
 8004612:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004614:	4b18      	ldr	r3, [pc, #96]	@ (8004678 <xTaskResumeAll+0x100>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1cb      	bne.n	80045b4 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004622:	f000 fb0d 	bl	8004c40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004626:	4b19      	ldr	r3, [pc, #100]	@ (800468c <xTaskResumeAll+0x114>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00f      	beq.n	8004652 <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004632:	f000 f83b 	bl	80046ac <xTaskIncrementTick>
 8004636:	1e03      	subs	r3, r0, #0
 8004638:	d002      	beq.n	8004640 <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 800463a:	4b13      	ldr	r3, [pc, #76]	@ (8004688 <xTaskResumeAll+0x110>)
 800463c:	2201      	movs	r2, #1
 800463e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	3b01      	subs	r3, #1
 8004644:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1f2      	bne.n	8004632 <xTaskResumeAll+0xba>

						uxPendedTicks = 0;
 800464c:	4b0f      	ldr	r3, [pc, #60]	@ (800468c <xTaskResumeAll+0x114>)
 800464e:	2200      	movs	r2, #0
 8004650:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004652:	4b0d      	ldr	r3, [pc, #52]	@ (8004688 <xTaskResumeAll+0x110>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d003      	beq.n	8004662 <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800465a:	2301      	movs	r3, #1
 800465c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800465e:	f001 f847 	bl	80056f0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004662:	f001 f867 	bl	8005734 <vPortExitCritical>

	return xAlreadyYielded;
 8004666:	68bb      	ldr	r3, [r7, #8]
}
 8004668:	0018      	movs	r0, r3
 800466a:	46bd      	mov	sp, r7
 800466c:	b004      	add	sp, #16
 800466e:	bd80      	pop	{r7, pc}
 8004670:	20000c54 	.word	0x20000c54
 8004674:	20000c2c 	.word	0x20000c2c
 8004678:	20000bec 	.word	0x20000bec
 800467c:	20000c34 	.word	0x20000c34
 8004680:	2000075c 	.word	0x2000075c
 8004684:	20000758 	.word	0x20000758
 8004688:	20000c40 	.word	0x20000c40
 800468c:	20000c3c 	.word	0x20000c3c

08004690 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004696:	4b04      	ldr	r3, [pc, #16]	@ (80046a8 <xTaskGetTickCount+0x18>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800469c:	687b      	ldr	r3, [r7, #4]
}
 800469e:	0018      	movs	r0, r3
 80046a0:	46bd      	mov	sp, r7
 80046a2:	b002      	add	sp, #8
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	46c0      	nop			@ (mov r8, r8)
 80046a8:	20000c30 	.word	0x20000c30

080046ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80046b2:	2300      	movs	r3, #0
 80046b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046b6:	4b4d      	ldr	r3, [pc, #308]	@ (80047ec <xTaskIncrementTick+0x140>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d000      	beq.n	80046c0 <xTaskIncrementTick+0x14>
 80046be:	e084      	b.n	80047ca <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80046c0:	4b4b      	ldr	r3, [pc, #300]	@ (80047f0 <xTaskIncrementTick+0x144>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	3301      	adds	r3, #1
 80046c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80046c8:	4b49      	ldr	r3, [pc, #292]	@ (80047f0 <xTaskIncrementTick+0x144>)
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d118      	bne.n	8004706 <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 80046d4:	4b47      	ldr	r3, [pc, #284]	@ (80047f4 <xTaskIncrementTick+0x148>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d002      	beq.n	80046e4 <xTaskIncrementTick+0x38>
 80046de:	b672      	cpsid	i
 80046e0:	46c0      	nop			@ (mov r8, r8)
 80046e2:	e7fd      	b.n	80046e0 <xTaskIncrementTick+0x34>
 80046e4:	4b43      	ldr	r3, [pc, #268]	@ (80047f4 <xTaskIncrementTick+0x148>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	60fb      	str	r3, [r7, #12]
 80046ea:	4b43      	ldr	r3, [pc, #268]	@ (80047f8 <xTaskIncrementTick+0x14c>)
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	4b41      	ldr	r3, [pc, #260]	@ (80047f4 <xTaskIncrementTick+0x148>)
 80046f0:	601a      	str	r2, [r3, #0]
 80046f2:	4b41      	ldr	r3, [pc, #260]	@ (80047f8 <xTaskIncrementTick+0x14c>)
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	601a      	str	r2, [r3, #0]
 80046f8:	4b40      	ldr	r3, [pc, #256]	@ (80047fc <xTaskIncrementTick+0x150>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	1c5a      	adds	r2, r3, #1
 80046fe:	4b3f      	ldr	r3, [pc, #252]	@ (80047fc <xTaskIncrementTick+0x150>)
 8004700:	601a      	str	r2, [r3, #0]
 8004702:	f000 fa9d 	bl	8004c40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004706:	4b3e      	ldr	r3, [pc, #248]	@ (8004800 <xTaskIncrementTick+0x154>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	429a      	cmp	r2, r3
 800470e:	d34e      	bcc.n	80047ae <xTaskIncrementTick+0x102>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004710:	4b38      	ldr	r3, [pc, #224]	@ (80047f4 <xTaskIncrementTick+0x148>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d101      	bne.n	800471e <xTaskIncrementTick+0x72>
 800471a:	2301      	movs	r3, #1
 800471c:	e000      	b.n	8004720 <xTaskIncrementTick+0x74>
 800471e:	2300      	movs	r3, #0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d004      	beq.n	800472e <xTaskIncrementTick+0x82>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004724:	4b36      	ldr	r3, [pc, #216]	@ (8004800 <xTaskIncrementTick+0x154>)
 8004726:	2201      	movs	r2, #1
 8004728:	4252      	negs	r2, r2
 800472a:	601a      	str	r2, [r3, #0]
					break;
 800472c:	e03f      	b.n	80047ae <xTaskIncrementTick+0x102>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800472e:	4b31      	ldr	r3, [pc, #196]	@ (80047f4 <xTaskIncrementTick+0x148>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	429a      	cmp	r2, r3
 8004744:	d203      	bcs.n	800474e <xTaskIncrementTick+0xa2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004746:	4b2e      	ldr	r3, [pc, #184]	@ (8004800 <xTaskIncrementTick+0x154>)
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	601a      	str	r2, [r3, #0]
						break;
 800474c:	e02f      	b.n	80047ae <xTaskIncrementTick+0x102>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	3304      	adds	r3, #4
 8004752:	0018      	movs	r0, r3
 8004754:	f7fe ff49 	bl	80035ea <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800475c:	2b00      	cmp	r3, #0
 800475e:	d004      	beq.n	800476a <xTaskIncrementTick+0xbe>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	3318      	adds	r3, #24
 8004764:	0018      	movs	r0, r3
 8004766:	f7fe ff40 	bl	80035ea <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800476e:	4b25      	ldr	r3, [pc, #148]	@ (8004804 <xTaskIncrementTick+0x158>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	429a      	cmp	r2, r3
 8004774:	d903      	bls.n	800477e <xTaskIncrementTick+0xd2>
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800477a:	4b22      	ldr	r3, [pc, #136]	@ (8004804 <xTaskIncrementTick+0x158>)
 800477c:	601a      	str	r2, [r3, #0]
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004782:	0013      	movs	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	189b      	adds	r3, r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4a1f      	ldr	r2, [pc, #124]	@ (8004808 <xTaskIncrementTick+0x15c>)
 800478c:	189a      	adds	r2, r3, r2
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	3304      	adds	r3, #4
 8004792:	0019      	movs	r1, r3
 8004794:	0010      	movs	r0, r2
 8004796:	f7fe fed0 	bl	800353a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800479e:	4b1b      	ldr	r3, [pc, #108]	@ (800480c <xTaskIncrementTick+0x160>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d3b3      	bcc.n	8004710 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 80047a8:	2301      	movs	r3, #1
 80047aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047ac:	e7b0      	b.n	8004710 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80047ae:	4b17      	ldr	r3, [pc, #92]	@ (800480c <xTaskIncrementTick+0x160>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047b4:	4914      	ldr	r1, [pc, #80]	@ (8004808 <xTaskIncrementTick+0x15c>)
 80047b6:	0013      	movs	r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	189b      	adds	r3, r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	585b      	ldr	r3, [r3, r1]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d907      	bls.n	80047d4 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 80047c4:	2301      	movs	r3, #1
 80047c6:	617b      	str	r3, [r7, #20]
 80047c8:	e004      	b.n	80047d4 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80047ca:	4b11      	ldr	r3, [pc, #68]	@ (8004810 <xTaskIncrementTick+0x164>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	1c5a      	adds	r2, r3, #1
 80047d0:	4b0f      	ldr	r3, [pc, #60]	@ (8004810 <xTaskIncrementTick+0x164>)
 80047d2:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80047d4:	4b0f      	ldr	r3, [pc, #60]	@ (8004814 <xTaskIncrementTick+0x168>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <xTaskIncrementTick+0x134>
		{
			xSwitchRequired = pdTRUE;
 80047dc:	2301      	movs	r3, #1
 80047de:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80047e0:	697b      	ldr	r3, [r7, #20]
}
 80047e2:	0018      	movs	r0, r3
 80047e4:	46bd      	mov	sp, r7
 80047e6:	b006      	add	sp, #24
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	46c0      	nop			@ (mov r8, r8)
 80047ec:	20000c54 	.word	0x20000c54
 80047f0:	20000c30 	.word	0x20000c30
 80047f4:	20000be4 	.word	0x20000be4
 80047f8:	20000be8 	.word	0x20000be8
 80047fc:	20000c44 	.word	0x20000c44
 8004800:	20000c4c 	.word	0x20000c4c
 8004804:	20000c34 	.word	0x20000c34
 8004808:	2000075c 	.word	0x2000075c
 800480c:	20000758 	.word	0x20000758
 8004810:	20000c3c 	.word	0x20000c3c
 8004814:	20000c40 	.word	0x20000c40

08004818 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800481e:	4b22      	ldr	r3, [pc, #136]	@ (80048a8 <vTaskSwitchContext+0x90>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d003      	beq.n	800482e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004826:	4b21      	ldr	r3, [pc, #132]	@ (80048ac <vTaskSwitchContext+0x94>)
 8004828:	2201      	movs	r2, #1
 800482a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800482c:	e038      	b.n	80048a0 <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 800482e:	4b1f      	ldr	r3, [pc, #124]	@ (80048ac <vTaskSwitchContext+0x94>)
 8004830:	2200      	movs	r2, #0
 8004832:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004834:	4b1e      	ldr	r3, [pc, #120]	@ (80048b0 <vTaskSwitchContext+0x98>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	607b      	str	r3, [r7, #4]
 800483a:	e008      	b.n	800484e <vTaskSwitchContext+0x36>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d102      	bne.n	8004848 <vTaskSwitchContext+0x30>
 8004842:	b672      	cpsid	i
 8004844:	46c0      	nop			@ (mov r8, r8)
 8004846:	e7fd      	b.n	8004844 <vTaskSwitchContext+0x2c>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	3b01      	subs	r3, #1
 800484c:	607b      	str	r3, [r7, #4]
 800484e:	4919      	ldr	r1, [pc, #100]	@ (80048b4 <vTaskSwitchContext+0x9c>)
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	0013      	movs	r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	189b      	adds	r3, r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	585b      	ldr	r3, [r3, r1]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d0ed      	beq.n	800483c <vTaskSwitchContext+0x24>
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	0013      	movs	r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	189b      	adds	r3, r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4a12      	ldr	r2, [pc, #72]	@ (80048b4 <vTaskSwitchContext+0x9c>)
 800486c:	189b      	adds	r3, r3, r2
 800486e:	603b      	str	r3, [r7, #0]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	685a      	ldr	r2, [r3, #4]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	605a      	str	r2, [r3, #4]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	685a      	ldr	r2, [r3, #4]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	3308      	adds	r3, #8
 8004882:	429a      	cmp	r2, r3
 8004884:	d104      	bne.n	8004890 <vTaskSwitchContext+0x78>
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	685a      	ldr	r2, [r3, #4]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	605a      	str	r2, [r3, #4]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	68da      	ldr	r2, [r3, #12]
 8004896:	4b08      	ldr	r3, [pc, #32]	@ (80048b8 <vTaskSwitchContext+0xa0>)
 8004898:	601a      	str	r2, [r3, #0]
 800489a:	4b05      	ldr	r3, [pc, #20]	@ (80048b0 <vTaskSwitchContext+0x98>)
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	601a      	str	r2, [r3, #0]
}
 80048a0:	46c0      	nop			@ (mov r8, r8)
 80048a2:	46bd      	mov	sp, r7
 80048a4:	b002      	add	sp, #8
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	20000c54 	.word	0x20000c54
 80048ac:	20000c40 	.word	0x20000c40
 80048b0:	20000c34 	.word	0x20000c34
 80048b4:	2000075c 	.word	0x2000075c
 80048b8:	20000758 	.word	0x20000758

080048bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d102      	bne.n	80048d2 <vTaskPlaceOnEventList+0x16>
 80048cc:	b672      	cpsid	i
 80048ce:	46c0      	nop			@ (mov r8, r8)
 80048d0:	e7fd      	b.n	80048ce <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80048d2:	4b09      	ldr	r3, [pc, #36]	@ (80048f8 <vTaskPlaceOnEventList+0x3c>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	3318      	adds	r3, #24
 80048d8:	001a      	movs	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	0011      	movs	r1, r2
 80048de:	0018      	movs	r0, r3
 80048e0:	f7fe fe4d 	bl	800357e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	2101      	movs	r1, #1
 80048e8:	0018      	movs	r0, r3
 80048ea:	f000 fb3d 	bl	8004f68 <prvAddCurrentTaskToDelayedList>
}
 80048ee:	46c0      	nop			@ (mov r8, r8)
 80048f0:	46bd      	mov	sp, r7
 80048f2:	b002      	add	sp, #8
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	46c0      	nop			@ (mov r8, r8)
 80048f8:	20000758 	.word	0x20000758

080048fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d102      	bne.n	8004914 <vTaskPlaceOnEventListRestricted+0x18>
 800490e:	b672      	cpsid	i
 8004910:	46c0      	nop			@ (mov r8, r8)
 8004912:	e7fd      	b.n	8004910 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004914:	4b0c      	ldr	r3, [pc, #48]	@ (8004948 <vTaskPlaceOnEventListRestricted+0x4c>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	3318      	adds	r3, #24
 800491a:	001a      	movs	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	0011      	movs	r1, r2
 8004920:	0018      	movs	r0, r3
 8004922:	f7fe fe0a 	bl	800353a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d002      	beq.n	8004932 <vTaskPlaceOnEventListRestricted+0x36>
		{
			xTicksToWait = portMAX_DELAY;
 800492c:	2301      	movs	r3, #1
 800492e:	425b      	negs	r3, r3
 8004930:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	0011      	movs	r1, r2
 8004938:	0018      	movs	r0, r3
 800493a:	f000 fb15 	bl	8004f68 <prvAddCurrentTaskToDelayedList>
	}
 800493e:	46c0      	nop			@ (mov r8, r8)
 8004940:	46bd      	mov	sp, r7
 8004942:	b004      	add	sp, #16
 8004944:	bd80      	pop	{r7, pc}
 8004946:	46c0      	nop			@ (mov r8, r8)
 8004948:	20000758 	.word	0x20000758

0800494c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d102      	bne.n	8004968 <xTaskRemoveFromEventList+0x1c>
 8004962:	b672      	cpsid	i
 8004964:	46c0      	nop			@ (mov r8, r8)
 8004966:	e7fd      	b.n	8004964 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	3318      	adds	r3, #24
 800496c:	0018      	movs	r0, r3
 800496e:	f7fe fe3c 	bl	80035ea <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004972:	4b1f      	ldr	r3, [pc, #124]	@ (80049f0 <xTaskRemoveFromEventList+0xa4>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d11d      	bne.n	80049b6 <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	3304      	adds	r3, #4
 800497e:	0018      	movs	r0, r3
 8004980:	f7fe fe33 	bl	80035ea <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004988:	4b1a      	ldr	r3, [pc, #104]	@ (80049f4 <xTaskRemoveFromEventList+0xa8>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	429a      	cmp	r2, r3
 800498e:	d903      	bls.n	8004998 <xTaskRemoveFromEventList+0x4c>
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004994:	4b17      	ldr	r3, [pc, #92]	@ (80049f4 <xTaskRemoveFromEventList+0xa8>)
 8004996:	601a      	str	r2, [r3, #0]
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800499c:	0013      	movs	r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	189b      	adds	r3, r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4a14      	ldr	r2, [pc, #80]	@ (80049f8 <xTaskRemoveFromEventList+0xac>)
 80049a6:	189a      	adds	r2, r3, r2
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	3304      	adds	r3, #4
 80049ac:	0019      	movs	r1, r3
 80049ae:	0010      	movs	r0, r2
 80049b0:	f7fe fdc3 	bl	800353a <vListInsertEnd>
 80049b4:	e007      	b.n	80049c6 <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	3318      	adds	r3, #24
 80049ba:	001a      	movs	r2, r3
 80049bc:	4b0f      	ldr	r3, [pc, #60]	@ (80049fc <xTaskRemoveFromEventList+0xb0>)
 80049be:	0011      	movs	r1, r2
 80049c0:	0018      	movs	r0, r3
 80049c2:	f7fe fdba 	bl	800353a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004a00 <xTaskRemoveFromEventList+0xb4>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d905      	bls.n	80049e0 <xTaskRemoveFromEventList+0x94>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80049d4:	2301      	movs	r3, #1
 80049d6:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80049d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004a04 <xTaskRemoveFromEventList+0xb8>)
 80049da:	2201      	movs	r2, #1
 80049dc:	601a      	str	r2, [r3, #0]
 80049de:	e001      	b.n	80049e4 <xTaskRemoveFromEventList+0x98>
	}
	else
	{
		xReturn = pdFALSE;
 80049e0:	2300      	movs	r3, #0
 80049e2:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80049e4:	68fb      	ldr	r3, [r7, #12]
}
 80049e6:	0018      	movs	r0, r3
 80049e8:	46bd      	mov	sp, r7
 80049ea:	b004      	add	sp, #16
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	46c0      	nop			@ (mov r8, r8)
 80049f0:	20000c54 	.word	0x20000c54
 80049f4:	20000c34 	.word	0x20000c34
 80049f8:	2000075c 	.word	0x2000075c
 80049fc:	20000bec 	.word	0x20000bec
 8004a00:	20000758 	.word	0x20000758
 8004a04:	20000c40 	.word	0x20000c40

08004a08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a10:	4b05      	ldr	r3, [pc, #20]	@ (8004a28 <vTaskInternalSetTimeOutState+0x20>)
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004a18:	4b04      	ldr	r3, [pc, #16]	@ (8004a2c <vTaskInternalSetTimeOutState+0x24>)
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	605a      	str	r2, [r3, #4]
}
 8004a20:	46c0      	nop			@ (mov r8, r8)
 8004a22:	46bd      	mov	sp, r7
 8004a24:	b002      	add	sp, #8
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	20000c44 	.word	0x20000c44
 8004a2c:	20000c30 	.word	0x20000c30

08004a30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d102      	bne.n	8004a46 <xTaskCheckForTimeOut+0x16>
 8004a40:	b672      	cpsid	i
 8004a42:	46c0      	nop			@ (mov r8, r8)
 8004a44:	e7fd      	b.n	8004a42 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d102      	bne.n	8004a52 <xTaskCheckForTimeOut+0x22>
 8004a4c:	b672      	cpsid	i
 8004a4e:	46c0      	nop			@ (mov r8, r8)
 8004a50:	e7fd      	b.n	8004a4e <xTaskCheckForTimeOut+0x1e>

	taskENTER_CRITICAL();
 8004a52:	f000 fe5d 	bl	8005710 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004a56:	4b1d      	ldr	r3, [pc, #116]	@ (8004acc <xTaskCheckForTimeOut+0x9c>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	d102      	bne.n	8004a74 <xTaskCheckForTimeOut+0x44>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	617b      	str	r3, [r7, #20]
 8004a72:	e024      	b.n	8004abe <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	4b15      	ldr	r3, [pc, #84]	@ (8004ad0 <xTaskCheckForTimeOut+0xa0>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d007      	beq.n	8004a90 <xTaskCheckForTimeOut+0x60>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d302      	bcc.n	8004a90 <xTaskCheckForTimeOut+0x60>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	617b      	str	r3, [r7, #20]
 8004a8e:	e016      	b.n	8004abe <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d20c      	bcs.n	8004ab4 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	1ad2      	subs	r2, r2, r3
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	0018      	movs	r0, r3
 8004aaa:	f7ff ffad 	bl	8004a08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	617b      	str	r3, [r7, #20]
 8004ab2:	e004      	b.n	8004abe <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004aba:	2301      	movs	r3, #1
 8004abc:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8004abe:	f000 fe39 	bl	8005734 <vPortExitCritical>

	return xReturn;
 8004ac2:	697b      	ldr	r3, [r7, #20]
}
 8004ac4:	0018      	movs	r0, r3
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	b006      	add	sp, #24
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	20000c30 	.word	0x20000c30
 8004ad0:	20000c44 	.word	0x20000c44

08004ad4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004ad8:	4b02      	ldr	r3, [pc, #8]	@ (8004ae4 <vTaskMissedYield+0x10>)
 8004ada:	2201      	movs	r2, #1
 8004adc:	601a      	str	r2, [r3, #0]
}
 8004ade:	46c0      	nop			@ (mov r8, r8)
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	20000c40 	.word	0x20000c40

08004ae8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004af0:	f000 f84e 	bl	8004b90 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004af4:	4b03      	ldr	r3, [pc, #12]	@ (8004b04 <prvIdleTask+0x1c>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d9f9      	bls.n	8004af0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004afc:	f000 fdf8 	bl	80056f0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8004b00:	e7f6      	b.n	8004af0 <prvIdleTask+0x8>
 8004b02:	46c0      	nop			@ (mov r8, r8)
 8004b04:	2000075c 	.word	0x2000075c

08004b08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b0e:	2300      	movs	r3, #0
 8004b10:	607b      	str	r3, [r7, #4]
 8004b12:	e00c      	b.n	8004b2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	0013      	movs	r3, r2
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	189b      	adds	r3, r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4a14      	ldr	r2, [pc, #80]	@ (8004b70 <prvInitialiseTaskLists+0x68>)
 8004b20:	189b      	adds	r3, r3, r2
 8004b22:	0018      	movs	r0, r3
 8004b24:	f7fe fce0 	bl	80034e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	607b      	str	r3, [r7, #4]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b37      	cmp	r3, #55	@ 0x37
 8004b32:	d9ef      	bls.n	8004b14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004b34:	4b0f      	ldr	r3, [pc, #60]	@ (8004b74 <prvInitialiseTaskLists+0x6c>)
 8004b36:	0018      	movs	r0, r3
 8004b38:	f7fe fcd6 	bl	80034e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8004b78 <prvInitialiseTaskLists+0x70>)
 8004b3e:	0018      	movs	r0, r3
 8004b40:	f7fe fcd2 	bl	80034e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004b44:	4b0d      	ldr	r3, [pc, #52]	@ (8004b7c <prvInitialiseTaskLists+0x74>)
 8004b46:	0018      	movs	r0, r3
 8004b48:	f7fe fcce 	bl	80034e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8004b80 <prvInitialiseTaskLists+0x78>)
 8004b4e:	0018      	movs	r0, r3
 8004b50:	f7fe fcca 	bl	80034e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004b54:	4b0b      	ldr	r3, [pc, #44]	@ (8004b84 <prvInitialiseTaskLists+0x7c>)
 8004b56:	0018      	movs	r0, r3
 8004b58:	f7fe fcc6 	bl	80034e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8004b88 <prvInitialiseTaskLists+0x80>)
 8004b5e:	4a05      	ldr	r2, [pc, #20]	@ (8004b74 <prvInitialiseTaskLists+0x6c>)
 8004b60:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004b62:	4b0a      	ldr	r3, [pc, #40]	@ (8004b8c <prvInitialiseTaskLists+0x84>)
 8004b64:	4a04      	ldr	r2, [pc, #16]	@ (8004b78 <prvInitialiseTaskLists+0x70>)
 8004b66:	601a      	str	r2, [r3, #0]
}
 8004b68:	46c0      	nop			@ (mov r8, r8)
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	b002      	add	sp, #8
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	2000075c 	.word	0x2000075c
 8004b74:	20000bbc 	.word	0x20000bbc
 8004b78:	20000bd0 	.word	0x20000bd0
 8004b7c:	20000bec 	.word	0x20000bec
 8004b80:	20000c00 	.word	0x20000c00
 8004b84:	20000c18 	.word	0x20000c18
 8004b88:	20000be4 	.word	0x20000be4
 8004b8c:	20000be8 	.word	0x20000be8

08004b90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b96:	e01a      	b.n	8004bce <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8004b98:	f000 fdba 	bl	8005710 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004b9c:	4b10      	ldr	r3, [pc, #64]	@ (8004be0 <prvCheckTasksWaitingTermination+0x50>)
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	3304      	adds	r3, #4
 8004ba8:	0018      	movs	r0, r3
 8004baa:	f7fe fd1e 	bl	80035ea <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004bae:	4b0d      	ldr	r3, [pc, #52]	@ (8004be4 <prvCheckTasksWaitingTermination+0x54>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	1e5a      	subs	r2, r3, #1
 8004bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8004be4 <prvCheckTasksWaitingTermination+0x54>)
 8004bb6:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8004be8 <prvCheckTasksWaitingTermination+0x58>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	1e5a      	subs	r2, r3, #1
 8004bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8004be8 <prvCheckTasksWaitingTermination+0x58>)
 8004bc0:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8004bc2:	f000 fdb7 	bl	8005734 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	0018      	movs	r0, r3
 8004bca:	f000 f80f 	bl	8004bec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bce:	4b06      	ldr	r3, [pc, #24]	@ (8004be8 <prvCheckTasksWaitingTermination+0x58>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1e0      	bne.n	8004b98 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004bd6:	46c0      	nop			@ (mov r8, r8)
 8004bd8:	46c0      	nop			@ (mov r8, r8)
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	b002      	add	sp, #8
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	20000c00 	.word	0x20000c00
 8004be4:	20000c2c 	.word	0x20000c2c
 8004be8:	20000c14 	.word	0x20000c14

08004bec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2259      	movs	r2, #89	@ 0x59
 8004bf8:	5c9b      	ldrb	r3, [r3, r2]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d109      	bne.n	8004c12 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c02:	0018      	movs	r0, r3
 8004c04:	f000 fec4 	bl	8005990 <vPortFree>
				vPortFree( pxTCB );
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	f000 fec0 	bl	8005990 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004c10:	e011      	b.n	8004c36 <prvDeleteTCB+0x4a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2259      	movs	r2, #89	@ 0x59
 8004c16:	5c9b      	ldrb	r3, [r3, r2]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d104      	bne.n	8004c26 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	0018      	movs	r0, r3
 8004c20:	f000 feb6 	bl	8005990 <vPortFree>
	}
 8004c24:	e007      	b.n	8004c36 <prvDeleteTCB+0x4a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2259      	movs	r2, #89	@ 0x59
 8004c2a:	5c9b      	ldrb	r3, [r3, r2]
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d002      	beq.n	8004c36 <prvDeleteTCB+0x4a>
 8004c30:	b672      	cpsid	i
 8004c32:	46c0      	nop			@ (mov r8, r8)
 8004c34:	e7fd      	b.n	8004c32 <prvDeleteTCB+0x46>
	}
 8004c36:	46c0      	nop			@ (mov r8, r8)
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	b002      	add	sp, #8
 8004c3c:	bd80      	pop	{r7, pc}
	...

08004c40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c46:	4b0e      	ldr	r3, [pc, #56]	@ (8004c80 <prvResetNextTaskUnblockTime+0x40>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <prvResetNextTaskUnblockTime+0x14>
 8004c50:	2301      	movs	r3, #1
 8004c52:	e000      	b.n	8004c56 <prvResetNextTaskUnblockTime+0x16>
 8004c54:	2300      	movs	r3, #0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d004      	beq.n	8004c64 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8004c84 <prvResetNextTaskUnblockTime+0x44>)
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	4252      	negs	r2, r2
 8004c60:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004c62:	e008      	b.n	8004c76 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004c64:	4b06      	ldr	r3, [pc, #24]	@ (8004c80 <prvResetNextTaskUnblockTime+0x40>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	4b04      	ldr	r3, [pc, #16]	@ (8004c84 <prvResetNextTaskUnblockTime+0x44>)
 8004c74:	601a      	str	r2, [r3, #0]
}
 8004c76:	46c0      	nop			@ (mov r8, r8)
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	b002      	add	sp, #8
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	46c0      	nop			@ (mov r8, r8)
 8004c80:	20000be4 	.word	0x20000be4
 8004c84:	20000c4c 	.word	0x20000c4c

08004c88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8004cb8 <xTaskGetSchedulerState+0x30>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d102      	bne.n	8004c9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004c96:	2301      	movs	r3, #1
 8004c98:	607b      	str	r3, [r7, #4]
 8004c9a:	e008      	b.n	8004cae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c9c:	4b07      	ldr	r3, [pc, #28]	@ (8004cbc <xTaskGetSchedulerState+0x34>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d102      	bne.n	8004caa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	607b      	str	r3, [r7, #4]
 8004ca8:	e001      	b.n	8004cae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004caa:	2300      	movs	r3, #0
 8004cac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004cae:	687b      	ldr	r3, [r7, #4]
	}
 8004cb0:	0018      	movs	r0, r3
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	b002      	add	sp, #8
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	20000c38 	.word	0x20000c38
 8004cbc:	20000c54 	.word	0x20000c54

08004cc0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d056      	beq.n	8004d84 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cda:	4b2d      	ldr	r3, [pc, #180]	@ (8004d90 <xTaskPriorityInherit+0xd0>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d246      	bcs.n	8004d72 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	db06      	blt.n	8004cfa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cec:	4b28      	ldr	r3, [pc, #160]	@ (8004d90 <xTaskPriorityInherit+0xd0>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf2:	2238      	movs	r2, #56	@ 0x38
 8004cf4:	1ad2      	subs	r2, r2, r3
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	6959      	ldr	r1, [r3, #20]
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d02:	0013      	movs	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	189b      	adds	r3, r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4a22      	ldr	r2, [pc, #136]	@ (8004d94 <xTaskPriorityInherit+0xd4>)
 8004d0c:	189b      	adds	r3, r3, r2
 8004d0e:	4299      	cmp	r1, r3
 8004d10:	d101      	bne.n	8004d16 <xTaskPriorityInherit+0x56>
 8004d12:	2301      	movs	r3, #1
 8004d14:	e000      	b.n	8004d18 <xTaskPriorityInherit+0x58>
 8004d16:	2300      	movs	r3, #0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d022      	beq.n	8004d62 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	3304      	adds	r3, #4
 8004d20:	0018      	movs	r0, r3
 8004d22:	f7fe fc62 	bl	80035ea <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004d26:	4b1a      	ldr	r3, [pc, #104]	@ (8004d90 <xTaskPriorityInherit+0xd0>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d34:	4b18      	ldr	r3, [pc, #96]	@ (8004d98 <xTaskPriorityInherit+0xd8>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d903      	bls.n	8004d44 <xTaskPriorityInherit+0x84>
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d40:	4b15      	ldr	r3, [pc, #84]	@ (8004d98 <xTaskPriorityInherit+0xd8>)
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d48:	0013      	movs	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	189b      	adds	r3, r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	4a10      	ldr	r2, [pc, #64]	@ (8004d94 <xTaskPriorityInherit+0xd4>)
 8004d52:	189a      	adds	r2, r3, r2
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	3304      	adds	r3, #4
 8004d58:	0019      	movs	r1, r3
 8004d5a:	0010      	movs	r0, r2
 8004d5c:	f7fe fbed 	bl	800353a <vListInsertEnd>
 8004d60:	e004      	b.n	8004d6c <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004d62:	4b0b      	ldr	r3, [pc, #44]	@ (8004d90 <xTaskPriorityInherit+0xd0>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	60fb      	str	r3, [r7, #12]
 8004d70:	e008      	b.n	8004d84 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d76:	4b06      	ldr	r3, [pc, #24]	@ (8004d90 <xTaskPriorityInherit+0xd0>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d201      	bcs.n	8004d84 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004d80:	2301      	movs	r3, #1
 8004d82:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004d84:	68fb      	ldr	r3, [r7, #12]
	}
 8004d86:	0018      	movs	r0, r3
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	b004      	add	sp, #16
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	46c0      	nop			@ (mov r8, r8)
 8004d90:	20000758 	.word	0x20000758
 8004d94:	2000075c 	.word	0x2000075c
 8004d98:	20000c34 	.word	0x20000c34

08004d9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004da8:	2300      	movs	r3, #0
 8004daa:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d046      	beq.n	8004e40 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004db2:	4b26      	ldr	r3, [pc, #152]	@ (8004e4c <xTaskPriorityDisinherit+0xb0>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d002      	beq.n	8004dc2 <xTaskPriorityDisinherit+0x26>
 8004dbc:	b672      	cpsid	i
 8004dbe:	46c0      	nop			@ (mov r8, r8)
 8004dc0:	e7fd      	b.n	8004dbe <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d102      	bne.n	8004dd0 <xTaskPriorityDisinherit+0x34>
 8004dca:	b672      	cpsid	i
 8004dcc:	46c0      	nop			@ (mov r8, r8)
 8004dce:	e7fd      	b.n	8004dcc <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dd4:	1e5a      	subs	r2, r3, #1
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d02c      	beq.n	8004e40 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d128      	bne.n	8004e40 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	3304      	adds	r3, #4
 8004df2:	0018      	movs	r0, r3
 8004df4:	f7fe fbf9 	bl	80035ea <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e04:	2238      	movs	r2, #56	@ 0x38
 8004e06:	1ad2      	subs	r2, r2, r3
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e10:	4b0f      	ldr	r3, [pc, #60]	@ (8004e50 <xTaskPriorityDisinherit+0xb4>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d903      	bls.n	8004e20 <xTaskPriorityDisinherit+0x84>
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8004e50 <xTaskPriorityDisinherit+0xb4>)
 8004e1e:	601a      	str	r2, [r3, #0]
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e24:	0013      	movs	r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	189b      	adds	r3, r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	4a09      	ldr	r2, [pc, #36]	@ (8004e54 <xTaskPriorityDisinherit+0xb8>)
 8004e2e:	189a      	adds	r2, r3, r2
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	3304      	adds	r3, #4
 8004e34:	0019      	movs	r1, r3
 8004e36:	0010      	movs	r0, r2
 8004e38:	f7fe fb7f 	bl	800353a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e40:	68fb      	ldr	r3, [r7, #12]
	}
 8004e42:	0018      	movs	r0, r3
 8004e44:	46bd      	mov	sp, r7
 8004e46:	b004      	add	sp, #16
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	46c0      	nop			@ (mov r8, r8)
 8004e4c:	20000758 	.word	0x20000758
 8004e50:	20000c34 	.word	0x20000c34
 8004e54:	2000075c 	.word	0x2000075c

08004e58 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004e66:	2301      	movs	r3, #1
 8004e68:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d05f      	beq.n	8004f30 <vTaskPriorityDisinheritAfterTimeout+0xd8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d102      	bne.n	8004e7e <vTaskPriorityDisinheritAfterTimeout+0x26>
 8004e78:	b672      	cpsid	i
 8004e7a:	46c0      	nop			@ (mov r8, r8)
 8004e7c:	e7fd      	b.n	8004e7a <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e82:	683a      	ldr	r2, [r7, #0]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d902      	bls.n	8004e8e <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	617b      	str	r3, [r7, #20]
 8004e8c:	e002      	b.n	8004e94 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e92:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d048      	beq.n	8004f30 <vTaskPriorityDisinheritAfterTimeout+0xd8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d143      	bne.n	8004f30 <vTaskPriorityDisinheritAfterTimeout+0xd8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004ea8:	4b23      	ldr	r3, [pc, #140]	@ (8004f38 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d102      	bne.n	8004eb8 <vTaskPriorityDisinheritAfterTimeout+0x60>
 8004eb2:	b672      	cpsid	i
 8004eb4:	46c0      	nop			@ (mov r8, r8)
 8004eb6:	e7fd      	b.n	8004eb4 <vTaskPriorityDisinheritAfterTimeout+0x5c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ebc:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	db04      	blt.n	8004ed6 <vTaskPriorityDisinheritAfterTimeout+0x7e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	2238      	movs	r2, #56	@ 0x38
 8004ed0:	1ad2      	subs	r2, r2, r3
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	6959      	ldr	r1, [r3, #20]
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	0013      	movs	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	189b      	adds	r3, r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	4a15      	ldr	r2, [pc, #84]	@ (8004f3c <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 8004ee6:	189b      	adds	r3, r3, r2
 8004ee8:	4299      	cmp	r1, r3
 8004eea:	d101      	bne.n	8004ef0 <vTaskPriorityDisinheritAfterTimeout+0x98>
 8004eec:	2301      	movs	r3, #1
 8004eee:	e000      	b.n	8004ef2 <vTaskPriorityDisinheritAfterTimeout+0x9a>
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d01c      	beq.n	8004f30 <vTaskPriorityDisinheritAfterTimeout+0xd8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	3304      	adds	r3, #4
 8004efa:	0018      	movs	r0, r3
 8004efc:	f7fe fb75 	bl	80035ea <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f04:	4b0e      	ldr	r3, [pc, #56]	@ (8004f40 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d903      	bls.n	8004f14 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f10:	4b0b      	ldr	r3, [pc, #44]	@ (8004f40 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
 8004f12:	601a      	str	r2, [r3, #0]
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f18:	0013      	movs	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	189b      	adds	r3, r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4a06      	ldr	r2, [pc, #24]	@ (8004f3c <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 8004f22:	189a      	adds	r2, r3, r2
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	3304      	adds	r3, #4
 8004f28:	0019      	movs	r1, r3
 8004f2a:	0010      	movs	r0, r2
 8004f2c:	f7fe fb05 	bl	800353a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f30:	46c0      	nop			@ (mov r8, r8)
 8004f32:	46bd      	mov	sp, r7
 8004f34:	b006      	add	sp, #24
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	20000758 	.word	0x20000758
 8004f3c:	2000075c 	.word	0x2000075c
 8004f40:	20000c34 	.word	0x20000c34

08004f44 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004f48:	4b06      	ldr	r3, [pc, #24]	@ (8004f64 <pvTaskIncrementMutexHeldCount+0x20>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d004      	beq.n	8004f5a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004f50:	4b04      	ldr	r3, [pc, #16]	@ (8004f64 <pvTaskIncrementMutexHeldCount+0x20>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004f56:	3201      	adds	r2, #1
 8004f58:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8004f5a:	4b02      	ldr	r3, [pc, #8]	@ (8004f64 <pvTaskIncrementMutexHeldCount+0x20>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
	}
 8004f5e:	0018      	movs	r0, r3
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	20000758 	.word	0x20000758

08004f68 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f72:	4b21      	ldr	r3, [pc, #132]	@ (8004ff8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f78:	4b20      	ldr	r3, [pc, #128]	@ (8004ffc <prvAddCurrentTaskToDelayedList+0x94>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	3304      	adds	r3, #4
 8004f7e:	0018      	movs	r0, r3
 8004f80:	f7fe fb33 	bl	80035ea <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3301      	adds	r3, #1
 8004f88:	d10b      	bne.n	8004fa2 <prvAddCurrentTaskToDelayedList+0x3a>
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d008      	beq.n	8004fa2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f90:	4b1a      	ldr	r3, [pc, #104]	@ (8004ffc <prvAddCurrentTaskToDelayedList+0x94>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	1d1a      	adds	r2, r3, #4
 8004f96:	4b1a      	ldr	r3, [pc, #104]	@ (8005000 <prvAddCurrentTaskToDelayedList+0x98>)
 8004f98:	0011      	movs	r1, r2
 8004f9a:	0018      	movs	r0, r3
 8004f9c:	f7fe facd 	bl	800353a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004fa0:	e026      	b.n	8004ff0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	18d3      	adds	r3, r2, r3
 8004fa8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004faa:	4b14      	ldr	r3, [pc, #80]	@ (8004ffc <prvAddCurrentTaskToDelayedList+0x94>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004fb2:	68ba      	ldr	r2, [r7, #8]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d209      	bcs.n	8004fce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fba:	4b12      	ldr	r3, [pc, #72]	@ (8005004 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8004ffc <prvAddCurrentTaskToDelayedList+0x94>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	3304      	adds	r3, #4
 8004fc4:	0019      	movs	r1, r3
 8004fc6:	0010      	movs	r0, r2
 8004fc8:	f7fe fad9 	bl	800357e <vListInsert>
}
 8004fcc:	e010      	b.n	8004ff0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fce:	4b0e      	ldr	r3, [pc, #56]	@ (8005008 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8004ffc <prvAddCurrentTaskToDelayedList+0x94>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	3304      	adds	r3, #4
 8004fd8:	0019      	movs	r1, r3
 8004fda:	0010      	movs	r0, r2
 8004fdc:	f7fe facf 	bl	800357e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800500c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d202      	bcs.n	8004ff0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004fea:	4b08      	ldr	r3, [pc, #32]	@ (800500c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	601a      	str	r2, [r3, #0]
}
 8004ff0:	46c0      	nop			@ (mov r8, r8)
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	b004      	add	sp, #16
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	20000c30 	.word	0x20000c30
 8004ffc:	20000758 	.word	0x20000758
 8005000:	20000c18 	.word	0x20000c18
 8005004:	20000be8 	.word	0x20000be8
 8005008:	20000be4 	.word	0x20000be4
 800500c:	20000c4c 	.word	0x20000c4c

08005010 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005010:	b590      	push	{r4, r7, lr}
 8005012:	b089      	sub	sp, #36	@ 0x24
 8005014:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005016:	2300      	movs	r3, #0
 8005018:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800501a:	f000 fa9b 	bl	8005554 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800501e:	4b18      	ldr	r3, [pc, #96]	@ (8005080 <xTimerCreateTimerTask+0x70>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d020      	beq.n	8005068 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005026:	2300      	movs	r3, #0
 8005028:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800502a:	2300      	movs	r3, #0
 800502c:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800502e:	003a      	movs	r2, r7
 8005030:	1d39      	adds	r1, r7, #4
 8005032:	2308      	movs	r3, #8
 8005034:	18fb      	adds	r3, r7, r3
 8005036:	0018      	movs	r0, r3
 8005038:	f7fe fa3e 	bl	80034b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800503c:	683c      	ldr	r4, [r7, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	4910      	ldr	r1, [pc, #64]	@ (8005084 <xTimerCreateTimerTask+0x74>)
 8005044:	4810      	ldr	r0, [pc, #64]	@ (8005088 <xTimerCreateTimerTask+0x78>)
 8005046:	9202      	str	r2, [sp, #8]
 8005048:	9301      	str	r3, [sp, #4]
 800504a:	2302      	movs	r3, #2
 800504c:	9300      	str	r3, [sp, #0]
 800504e:	2300      	movs	r3, #0
 8005050:	0022      	movs	r2, r4
 8005052:	f7ff f88c 	bl	800416e <xTaskCreateStatic>
 8005056:	0002      	movs	r2, r0
 8005058:	4b0c      	ldr	r3, [pc, #48]	@ (800508c <xTimerCreateTimerTask+0x7c>)
 800505a:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800505c:	4b0b      	ldr	r3, [pc, #44]	@ (800508c <xTimerCreateTimerTask+0x7c>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d001      	beq.n	8005068 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8005064:	2301      	movs	r3, #1
 8005066:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d102      	bne.n	8005074 <xTimerCreateTimerTask+0x64>
 800506e:	b672      	cpsid	i
 8005070:	46c0      	nop			@ (mov r8, r8)
 8005072:	e7fd      	b.n	8005070 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8005074:	68fb      	ldr	r3, [r7, #12]
}
 8005076:	0018      	movs	r0, r3
 8005078:	46bd      	mov	sp, r7
 800507a:	b005      	add	sp, #20
 800507c:	bd90      	pop	{r4, r7, pc}
 800507e:	46c0      	nop			@ (mov r8, r8)
 8005080:	20000c88 	.word	0x20000c88
 8005084:	08005cb0 	.word	0x08005cb0
 8005088:	0800519d 	.word	0x0800519d
 800508c:	20000c8c 	.word	0x20000c8c

08005090 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005090:	b590      	push	{r4, r7, lr}
 8005092:	b08b      	sub	sp, #44	@ 0x2c
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]
 800509c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800509e:	2300      	movs	r3, #0
 80050a0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d102      	bne.n	80050ae <xTimerGenericCommand+0x1e>
 80050a8:	b672      	cpsid	i
 80050aa:	46c0      	nop			@ (mov r8, r8)
 80050ac:	e7fd      	b.n	80050aa <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80050ae:	4b1d      	ldr	r3, [pc, #116]	@ (8005124 <xTimerGenericCommand+0x94>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d030      	beq.n	8005118 <xTimerGenericCommand+0x88>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80050b6:	2414      	movs	r4, #20
 80050b8:	193b      	adds	r3, r7, r4
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80050be:	193b      	adds	r3, r7, r4
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80050c4:	193b      	adds	r3, r7, r4
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	2b05      	cmp	r3, #5
 80050ce:	dc19      	bgt.n	8005104 <xTimerGenericCommand+0x74>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80050d0:	f7ff fdda 	bl	8004c88 <xTaskGetSchedulerState>
 80050d4:	0003      	movs	r3, r0
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d109      	bne.n	80050ee <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80050da:	4b12      	ldr	r3, [pc, #72]	@ (8005124 <xTimerGenericCommand+0x94>)
 80050dc:	6818      	ldr	r0, [r3, #0]
 80050de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80050e0:	1939      	adds	r1, r7, r4
 80050e2:	2300      	movs	r3, #0
 80050e4:	f7fe fbe2 	bl	80038ac <xQueueGenericSend>
 80050e8:	0003      	movs	r3, r0
 80050ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80050ec:	e014      	b.n	8005118 <xTimerGenericCommand+0x88>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80050ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005124 <xTimerGenericCommand+0x94>)
 80050f0:	6818      	ldr	r0, [r3, #0]
 80050f2:	2314      	movs	r3, #20
 80050f4:	18f9      	adds	r1, r7, r3
 80050f6:	2300      	movs	r3, #0
 80050f8:	2200      	movs	r2, #0
 80050fa:	f7fe fbd7 	bl	80038ac <xQueueGenericSend>
 80050fe:	0003      	movs	r3, r0
 8005100:	627b      	str	r3, [r7, #36]	@ 0x24
 8005102:	e009      	b.n	8005118 <xTimerGenericCommand+0x88>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005104:	4b07      	ldr	r3, [pc, #28]	@ (8005124 <xTimerGenericCommand+0x94>)
 8005106:	6818      	ldr	r0, [r3, #0]
 8005108:	683a      	ldr	r2, [r7, #0]
 800510a:	2314      	movs	r3, #20
 800510c:	18f9      	adds	r1, r7, r3
 800510e:	2300      	movs	r3, #0
 8005110:	f7fe fc94 	bl	8003a3c <xQueueGenericSendFromISR>
 8005114:	0003      	movs	r3, r0
 8005116:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800511a:	0018      	movs	r0, r3
 800511c:	46bd      	mov	sp, r7
 800511e:	b00b      	add	sp, #44	@ 0x2c
 8005120:	bd90      	pop	{r4, r7, pc}
 8005122:	46c0      	nop			@ (mov r8, r8)
 8005124:	20000c88 	.word	0x20000c88

08005128 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af02      	add	r7, sp, #8
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005132:	4b19      	ldr	r3, [pc, #100]	@ (8005198 <prvProcessExpiredTimer+0x70>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	3304      	adds	r3, #4
 8005140:	0018      	movs	r0, r3
 8005142:	f7fe fa52 	bl	80035ea <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	69db      	ldr	r3, [r3, #28]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d11a      	bne.n	8005184 <prvProcessExpiredTimer+0x5c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	699a      	ldr	r2, [r3, #24]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	18d1      	adds	r1, r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	683a      	ldr	r2, [r7, #0]
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f000 f8ba 	bl	80052d4 <prvInsertTimerInActiveList>
 8005160:	1e03      	subs	r3, r0, #0
 8005162:	d00f      	beq.n	8005184 <prvProcessExpiredTimer+0x5c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	2300      	movs	r3, #0
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	2300      	movs	r3, #0
 800516e:	2100      	movs	r1, #0
 8005170:	f7ff ff8e 	bl	8005090 <xTimerGenericCommand>
 8005174:	0003      	movs	r3, r0
 8005176:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d102      	bne.n	8005184 <prvProcessExpiredTimer+0x5c>
 800517e:	b672      	cpsid	i
 8005180:	46c0      	nop			@ (mov r8, r8)
 8005182:	e7fd      	b.n	8005180 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	0010      	movs	r0, r2
 800518c:	4798      	blx	r3
}
 800518e:	46c0      	nop			@ (mov r8, r8)
 8005190:	46bd      	mov	sp, r7
 8005192:	b004      	add	sp, #16
 8005194:	bd80      	pop	{r7, pc}
 8005196:	46c0      	nop			@ (mov r8, r8)
 8005198:	20000c80 	.word	0x20000c80

0800519c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80051a4:	2308      	movs	r3, #8
 80051a6:	18fb      	adds	r3, r7, r3
 80051a8:	0018      	movs	r0, r3
 80051aa:	f000 f853 	bl	8005254 <prvGetNextExpireTime>
 80051ae:	0003      	movs	r3, r0
 80051b0:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	0011      	movs	r1, r2
 80051b8:	0018      	movs	r0, r3
 80051ba:	f000 f805 	bl	80051c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80051be:	f000 f8cb 	bl	8005358 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80051c2:	46c0      	nop			@ (mov r8, r8)
 80051c4:	e7ee      	b.n	80051a4 <prvTimerTask+0x8>
	...

080051c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80051d2:	f7ff f9c5 	bl	8004560 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80051d6:	2308      	movs	r3, #8
 80051d8:	18fb      	adds	r3, r7, r3
 80051da:	0018      	movs	r0, r3
 80051dc:	f000 f85a 	bl	8005294 <prvSampleTimeNow>
 80051e0:	0003      	movs	r3, r0
 80051e2:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d129      	bne.n	800523e <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10c      	bne.n	800520a <prvProcessTimerOrBlockTask+0x42>
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d808      	bhi.n	800520a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 80051f8:	f7ff f9be 	bl	8004578 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	0011      	movs	r1, r2
 8005202:	0018      	movs	r0, r3
 8005204:	f7ff ff90 	bl	8005128 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005208:	e01b      	b.n	8005242 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d006      	beq.n	800521e <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005210:	4b0e      	ldr	r3, [pc, #56]	@ (800524c <prvProcessTimerOrBlockTask+0x84>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	425a      	negs	r2, r3
 8005218:	4153      	adcs	r3, r2
 800521a:	b2db      	uxtb	r3, r3
 800521c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800521e:	4b0c      	ldr	r3, [pc, #48]	@ (8005250 <prvProcessTimerOrBlockTask+0x88>)
 8005220:	6818      	ldr	r0, [r3, #0]
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	683a      	ldr	r2, [r7, #0]
 800522a:	0019      	movs	r1, r3
 800522c:	f7fe ff6c 	bl	8004108 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005230:	f7ff f9a2 	bl	8004578 <xTaskResumeAll>
 8005234:	1e03      	subs	r3, r0, #0
 8005236:	d104      	bne.n	8005242 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8005238:	f000 fa5a 	bl	80056f0 <vPortYield>
}
 800523c:	e001      	b.n	8005242 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 800523e:	f7ff f99b 	bl	8004578 <xTaskResumeAll>
}
 8005242:	46c0      	nop			@ (mov r8, r8)
 8005244:	46bd      	mov	sp, r7
 8005246:	b004      	add	sp, #16
 8005248:	bd80      	pop	{r7, pc}
 800524a:	46c0      	nop			@ (mov r8, r8)
 800524c:	20000c84 	.word	0x20000c84
 8005250:	20000c88 	.word	0x20000c88

08005254 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800525c:	4b0c      	ldr	r3, [pc, #48]	@ (8005290 <prvGetNextExpireTime+0x3c>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	425a      	negs	r2, r3
 8005264:	4153      	adcs	r3, r2
 8005266:	b2db      	uxtb	r3, r3
 8005268:	001a      	movs	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d105      	bne.n	8005282 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005276:	4b06      	ldr	r3, [pc, #24]	@ (8005290 <prvGetNextExpireTime+0x3c>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	60fb      	str	r3, [r7, #12]
 8005280:	e001      	b.n	8005286 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005282:	2300      	movs	r3, #0
 8005284:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005286:	68fb      	ldr	r3, [r7, #12]
}
 8005288:	0018      	movs	r0, r3
 800528a:	46bd      	mov	sp, r7
 800528c:	b004      	add	sp, #16
 800528e:	bd80      	pop	{r7, pc}
 8005290:	20000c80 	.word	0x20000c80

08005294 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800529c:	f7ff f9f8 	bl	8004690 <xTaskGetTickCount>
 80052a0:	0003      	movs	r3, r0
 80052a2:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 80052a4:	4b0a      	ldr	r3, [pc, #40]	@ (80052d0 <prvSampleTimeNow+0x3c>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d205      	bcs.n	80052ba <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 80052ae:	f000 f8f5 	bl	800549c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	e002      	b.n	80052c0 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80052c0:	4b03      	ldr	r3, [pc, #12]	@ (80052d0 <prvSampleTimeNow+0x3c>)
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 80052c6:	68fb      	ldr	r3, [r7, #12]
}
 80052c8:	0018      	movs	r0, r3
 80052ca:	46bd      	mov	sp, r7
 80052cc:	b004      	add	sp, #16
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	20000c90 	.word	0x20000c90

080052d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b086      	sub	sp, #24
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
 80052e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80052e2:	2300      	movs	r3, #0
 80052e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	68ba      	ldr	r2, [r7, #8]
 80052ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d812      	bhi.n	8005320 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	1ad2      	subs	r2, r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	429a      	cmp	r2, r3
 8005306:	d302      	bcc.n	800530e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005308:	2301      	movs	r3, #1
 800530a:	617b      	str	r3, [r7, #20]
 800530c:	e01b      	b.n	8005346 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800530e:	4b10      	ldr	r3, [pc, #64]	@ (8005350 <prvInsertTimerInActiveList+0x7c>)
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	3304      	adds	r3, #4
 8005316:	0019      	movs	r1, r3
 8005318:	0010      	movs	r0, r2
 800531a:	f7fe f930 	bl	800357e <vListInsert>
 800531e:	e012      	b.n	8005346 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	429a      	cmp	r2, r3
 8005326:	d206      	bcs.n	8005336 <prvInsertTimerInActiveList+0x62>
 8005328:	68ba      	ldr	r2, [r7, #8]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	429a      	cmp	r2, r3
 800532e:	d302      	bcc.n	8005336 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005330:	2301      	movs	r3, #1
 8005332:	617b      	str	r3, [r7, #20]
 8005334:	e007      	b.n	8005346 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005336:	4b07      	ldr	r3, [pc, #28]	@ (8005354 <prvInsertTimerInActiveList+0x80>)
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	3304      	adds	r3, #4
 800533e:	0019      	movs	r1, r3
 8005340:	0010      	movs	r0, r2
 8005342:	f7fe f91c 	bl	800357e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005346:	697b      	ldr	r3, [r7, #20]
}
 8005348:	0018      	movs	r0, r3
 800534a:	46bd      	mov	sp, r7
 800534c:	b006      	add	sp, #24
 800534e:	bd80      	pop	{r7, pc}
 8005350:	20000c84 	.word	0x20000c84
 8005354:	20000c80 	.word	0x20000c80

08005358 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005358:	b590      	push	{r4, r7, lr}
 800535a:	b08d      	sub	sp, #52	@ 0x34
 800535c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800535e:	e089      	b.n	8005474 <prvProcessReceivedCommands+0x11c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005360:	2208      	movs	r2, #8
 8005362:	18bb      	adds	r3, r7, r2
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	da10      	bge.n	800538c <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800536a:	18bb      	adds	r3, r7, r2
 800536c:	3304      	adds	r3, #4
 800536e:	627b      	str	r3, [r7, #36]	@ 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005372:	2b00      	cmp	r3, #0
 8005374:	d102      	bne.n	800537c <prvProcessReceivedCommands+0x24>
 8005376:	b672      	cpsid	i
 8005378:	46c0      	nop			@ (mov r8, r8)
 800537a:	e7fd      	b.n	8005378 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800537c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005382:	6858      	ldr	r0, [r3, #4]
 8005384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	0019      	movs	r1, r3
 800538a:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800538c:	2208      	movs	r2, #8
 800538e:	18bb      	adds	r3, r7, r2
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	da00      	bge.n	8005398 <prvProcessReceivedCommands+0x40>
 8005396:	e06d      	b.n	8005474 <prvProcessReceivedCommands+0x11c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005398:	18bb      	adds	r3, r7, r2
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800539e:	6a3b      	ldr	r3, [r7, #32]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d004      	beq.n	80053b0 <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	3304      	adds	r3, #4
 80053aa:	0018      	movs	r0, r3
 80053ac:	f7fe f91d 	bl	80035ea <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80053b0:	1d3b      	adds	r3, r7, #4
 80053b2:	0018      	movs	r0, r3
 80053b4:	f7ff ff6e 	bl	8005294 <prvSampleTimeNow>
 80053b8:	0003      	movs	r3, r0
 80053ba:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 80053bc:	2308      	movs	r3, #8
 80053be:	18fb      	adds	r3, r7, r3
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2b09      	cmp	r3, #9
 80053c4:	d84f      	bhi.n	8005466 <prvProcessReceivedCommands+0x10e>
 80053c6:	009a      	lsls	r2, r3, #2
 80053c8:	4b32      	ldr	r3, [pc, #200]	@ (8005494 <prvProcessReceivedCommands+0x13c>)
 80053ca:	18d3      	adds	r3, r2, r3
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80053d0:	2408      	movs	r4, #8
 80053d2:	193b      	adds	r3, r7, r4
 80053d4:	685a      	ldr	r2, [r3, #4]
 80053d6:	6a3b      	ldr	r3, [r7, #32]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	18d1      	adds	r1, r2, r3
 80053dc:	193b      	adds	r3, r7, r4
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	69fa      	ldr	r2, [r7, #28]
 80053e2:	6a38      	ldr	r0, [r7, #32]
 80053e4:	f7ff ff76 	bl	80052d4 <prvInsertTimerInActiveList>
 80053e8:	1e03      	subs	r3, r0, #0
 80053ea:	d040      	beq.n	800546e <prvProcessReceivedCommands+0x116>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f0:	6a3a      	ldr	r2, [r7, #32]
 80053f2:	0010      	movs	r0, r2
 80053f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80053f6:	6a3b      	ldr	r3, [r7, #32]
 80053f8:	69db      	ldr	r3, [r3, #28]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d137      	bne.n	800546e <prvProcessReceivedCommands+0x116>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80053fe:	193b      	adds	r3, r7, r4
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	6a3b      	ldr	r3, [r7, #32]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	18d2      	adds	r2, r2, r3
 8005408:	6a38      	ldr	r0, [r7, #32]
 800540a:	2300      	movs	r3, #0
 800540c:	9300      	str	r3, [sp, #0]
 800540e:	2300      	movs	r3, #0
 8005410:	2100      	movs	r1, #0
 8005412:	f7ff fe3d 	bl	8005090 <xTimerGenericCommand>
 8005416:	0003      	movs	r3, r0
 8005418:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d126      	bne.n	800546e <prvProcessReceivedCommands+0x116>
 8005420:	b672      	cpsid	i
 8005422:	46c0      	nop			@ (mov r8, r8)
 8005424:	e7fd      	b.n	8005422 <prvProcessReceivedCommands+0xca>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005426:	2308      	movs	r3, #8
 8005428:	18fb      	adds	r3, r7, r3
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005430:	6a3b      	ldr	r3, [r7, #32]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d102      	bne.n	800543e <prvProcessReceivedCommands+0xe6>
 8005438:	b672      	cpsid	i
 800543a:	46c0      	nop			@ (mov r8, r8)
 800543c:	e7fd      	b.n	800543a <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800543e:	6a3b      	ldr	r3, [r7, #32]
 8005440:	699a      	ldr	r2, [r3, #24]
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	18d1      	adds	r1, r2, r3
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	69fa      	ldr	r2, [r7, #28]
 800544a:	6a38      	ldr	r0, [r7, #32]
 800544c:	f7ff ff42 	bl	80052d4 <prvInsertTimerInActiveList>
					break;
 8005450:	e010      	b.n	8005474 <prvProcessReceivedCommands+0x11c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005452:	6a3b      	ldr	r3, [r7, #32]
 8005454:	222c      	movs	r2, #44	@ 0x2c
 8005456:	5c9b      	ldrb	r3, [r3, r2]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d10a      	bne.n	8005472 <prvProcessReceivedCommands+0x11a>
						{
							vPortFree( pxTimer );
 800545c:	6a3b      	ldr	r3, [r7, #32]
 800545e:	0018      	movs	r0, r3
 8005460:	f000 fa96 	bl	8005990 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005464:	e005      	b.n	8005472 <prvProcessReceivedCommands+0x11a>

				default	:
					/* Don't expect to get here. */
					break;
 8005466:	46c0      	nop			@ (mov r8, r8)
 8005468:	e004      	b.n	8005474 <prvProcessReceivedCommands+0x11c>
					break;
 800546a:	46c0      	nop			@ (mov r8, r8)
 800546c:	e002      	b.n	8005474 <prvProcessReceivedCommands+0x11c>
					break;
 800546e:	46c0      	nop			@ (mov r8, r8)
 8005470:	e000      	b.n	8005474 <prvProcessReceivedCommands+0x11c>
					break;
 8005472:	46c0      	nop			@ (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005474:	4b08      	ldr	r3, [pc, #32]	@ (8005498 <prvProcessReceivedCommands+0x140>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2208      	movs	r2, #8
 800547a:	18b9      	adds	r1, r7, r2
 800547c:	2200      	movs	r2, #0
 800547e:	0018      	movs	r0, r3
 8005480:	f7fe fb50 	bl	8003b24 <xQueueReceive>
 8005484:	1e03      	subs	r3, r0, #0
 8005486:	d000      	beq.n	800548a <prvProcessReceivedCommands+0x132>
 8005488:	e76a      	b.n	8005360 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800548a:	46c0      	nop			@ (mov r8, r8)
 800548c:	46c0      	nop			@ (mov r8, r8)
 800548e:	46bd      	mov	sp, r7
 8005490:	b00b      	add	sp, #44	@ 0x2c
 8005492:	bd90      	pop	{r4, r7, pc}
 8005494:	08005d00 	.word	0x08005d00
 8005498:	20000c88 	.word	0x20000c88

0800549c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b088      	sub	sp, #32
 80054a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80054a2:	e03f      	b.n	8005524 <prvSwitchTimerLists+0x88>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80054a4:	4b29      	ldr	r3, [pc, #164]	@ (800554c <prvSwitchTimerLists+0xb0>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80054ae:	4b27      	ldr	r3, [pc, #156]	@ (800554c <prvSwitchTimerLists+0xb0>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	3304      	adds	r3, #4
 80054bc:	0018      	movs	r0, r3
 80054be:	f7fe f894 	bl	80035ea <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	0010      	movs	r0, r2
 80054ca:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	69db      	ldr	r3, [r3, #28]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d127      	bne.n	8005524 <prvSwitchTimerLists+0x88>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	18d3      	adds	r3, r2, r3
 80054dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80054de:	68ba      	ldr	r2, [r7, #8]
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d90e      	bls.n	8005504 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80054f2:	4b16      	ldr	r3, [pc, #88]	@ (800554c <prvSwitchTimerLists+0xb0>)
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	3304      	adds	r3, #4
 80054fa:	0019      	movs	r1, r3
 80054fc:	0010      	movs	r0, r2
 80054fe:	f7fe f83e 	bl	800357e <vListInsert>
 8005502:	e00f      	b.n	8005524 <prvSwitchTimerLists+0x88>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005504:	693a      	ldr	r2, [r7, #16]
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	2300      	movs	r3, #0
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	2300      	movs	r3, #0
 800550e:	2100      	movs	r1, #0
 8005510:	f7ff fdbe 	bl	8005090 <xTimerGenericCommand>
 8005514:	0003      	movs	r3, r0
 8005516:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d102      	bne.n	8005524 <prvSwitchTimerLists+0x88>
 800551e:	b672      	cpsid	i
 8005520:	46c0      	nop			@ (mov r8, r8)
 8005522:	e7fd      	b.n	8005520 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005524:	4b09      	ldr	r3, [pc, #36]	@ (800554c <prvSwitchTimerLists+0xb0>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1ba      	bne.n	80054a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800552e:	4b07      	ldr	r3, [pc, #28]	@ (800554c <prvSwitchTimerLists+0xb0>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005534:	4b06      	ldr	r3, [pc, #24]	@ (8005550 <prvSwitchTimerLists+0xb4>)
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	4b04      	ldr	r3, [pc, #16]	@ (800554c <prvSwitchTimerLists+0xb0>)
 800553a:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800553c:	4b04      	ldr	r3, [pc, #16]	@ (8005550 <prvSwitchTimerLists+0xb4>)
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	601a      	str	r2, [r3, #0]
}
 8005542:	46c0      	nop			@ (mov r8, r8)
 8005544:	46bd      	mov	sp, r7
 8005546:	b006      	add	sp, #24
 8005548:	bd80      	pop	{r7, pc}
 800554a:	46c0      	nop			@ (mov r8, r8)
 800554c:	20000c80 	.word	0x20000c80
 8005550:	20000c84 	.word	0x20000c84

08005554 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800555a:	f000 f8d9 	bl	8005710 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800555e:	4b16      	ldr	r3, [pc, #88]	@ (80055b8 <prvCheckForValidListAndQueue+0x64>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d123      	bne.n	80055ae <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8005566:	4b15      	ldr	r3, [pc, #84]	@ (80055bc <prvCheckForValidListAndQueue+0x68>)
 8005568:	0018      	movs	r0, r3
 800556a:	f7fd ffbd 	bl	80034e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800556e:	4b14      	ldr	r3, [pc, #80]	@ (80055c0 <prvCheckForValidListAndQueue+0x6c>)
 8005570:	0018      	movs	r0, r3
 8005572:	f7fd ffb9 	bl	80034e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005576:	4b13      	ldr	r3, [pc, #76]	@ (80055c4 <prvCheckForValidListAndQueue+0x70>)
 8005578:	4a10      	ldr	r2, [pc, #64]	@ (80055bc <prvCheckForValidListAndQueue+0x68>)
 800557a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800557c:	4b12      	ldr	r3, [pc, #72]	@ (80055c8 <prvCheckForValidListAndQueue+0x74>)
 800557e:	4a10      	ldr	r2, [pc, #64]	@ (80055c0 <prvCheckForValidListAndQueue+0x6c>)
 8005580:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005582:	4b12      	ldr	r3, [pc, #72]	@ (80055cc <prvCheckForValidListAndQueue+0x78>)
 8005584:	4a12      	ldr	r2, [pc, #72]	@ (80055d0 <prvCheckForValidListAndQueue+0x7c>)
 8005586:	2100      	movs	r1, #0
 8005588:	9100      	str	r1, [sp, #0]
 800558a:	2110      	movs	r1, #16
 800558c:	200a      	movs	r0, #10
 800558e:	f7fe f8a9 	bl	80036e4 <xQueueGenericCreateStatic>
 8005592:	0002      	movs	r2, r0
 8005594:	4b08      	ldr	r3, [pc, #32]	@ (80055b8 <prvCheckForValidListAndQueue+0x64>)
 8005596:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005598:	4b07      	ldr	r3, [pc, #28]	@ (80055b8 <prvCheckForValidListAndQueue+0x64>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d006      	beq.n	80055ae <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80055a0:	4b05      	ldr	r3, [pc, #20]	@ (80055b8 <prvCheckForValidListAndQueue+0x64>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a0b      	ldr	r2, [pc, #44]	@ (80055d4 <prvCheckForValidListAndQueue+0x80>)
 80055a6:	0011      	movs	r1, r2
 80055a8:	0018      	movs	r0, r3
 80055aa:	f7fe fd85 	bl	80040b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80055ae:	f000 f8c1 	bl	8005734 <vPortExitCritical>
}
 80055b2:	46c0      	nop			@ (mov r8, r8)
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	20000c88 	.word	0x20000c88
 80055bc:	20000c58 	.word	0x20000c58
 80055c0:	20000c6c 	.word	0x20000c6c
 80055c4:	20000c80 	.word	0x20000c80
 80055c8:	20000c84 	.word	0x20000c84
 80055cc:	20000d34 	.word	0x20000d34
 80055d0:	20000c94 	.word	0x20000c94
 80055d4:	08005cb8 	.word	0x08005cb8

080055d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	3b04      	subs	r3, #4
 80055e8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2280      	movs	r2, #128	@ 0x80
 80055ee:	0452      	lsls	r2, r2, #17
 80055f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	3b04      	subs	r3, #4
 80055f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80055f8:	68ba      	ldr	r2, [r7, #8]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	3b04      	subs	r3, #4
 8005602:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005604:	4a08      	ldr	r2, [pc, #32]	@ (8005628 <pxPortInitialiseStack+0x50>)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	3b14      	subs	r3, #20
 800560e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	3b20      	subs	r3, #32
 800561a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800561c:	68fb      	ldr	r3, [r7, #12]
}
 800561e:	0018      	movs	r0, r3
 8005620:	46bd      	mov	sp, r7
 8005622:	b004      	add	sp, #16
 8005624:	bd80      	pop	{r7, pc}
 8005626:	46c0      	nop			@ (mov r8, r8)
 8005628:	0800562d 	.word	0x0800562d

0800562c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005632:	2300      	movs	r3, #0
 8005634:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005636:	4b08      	ldr	r3, [pc, #32]	@ (8005658 <prvTaskExitError+0x2c>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	3301      	adds	r3, #1
 800563c:	d002      	beq.n	8005644 <prvTaskExitError+0x18>
 800563e:	b672      	cpsid	i
 8005640:	46c0      	nop			@ (mov r8, r8)
 8005642:	e7fd      	b.n	8005640 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8005644:	b672      	cpsid	i
	while( ulDummy == 0 )
 8005646:	46c0      	nop			@ (mov r8, r8)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d0fc      	beq.n	8005648 <prvTaskExitError+0x1c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800564e:	46c0      	nop			@ (mov r8, r8)
 8005650:	46c0      	nop			@ (mov r8, r8)
 8005652:	46bd      	mov	sp, r7
 8005654:	b002      	add	sp, #8
 8005656:	bd80      	pop	{r7, pc}
 8005658:	20000018 	.word	0x20000018

0800565c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800565c:	b580      	push	{r7, lr}
 800565e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8005660:	46c0      	nop			@ (mov r8, r8)
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
	...

08005670 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8005670:	4a0b      	ldr	r2, [pc, #44]	@ (80056a0 <pxCurrentTCBConst2>)
 8005672:	6813      	ldr	r3, [r2, #0]
 8005674:	6818      	ldr	r0, [r3, #0]
 8005676:	3020      	adds	r0, #32
 8005678:	f380 8809 	msr	PSP, r0
 800567c:	2002      	movs	r0, #2
 800567e:	f380 8814 	msr	CONTROL, r0
 8005682:	f3bf 8f6f 	isb	sy
 8005686:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8005688:	46ae      	mov	lr, r5
 800568a:	bc08      	pop	{r3}
 800568c:	bc04      	pop	{r2}
 800568e:	b662      	cpsie	i
 8005690:	4718      	bx	r3
 8005692:	46c0      	nop			@ (mov r8, r8)
 8005694:	46c0      	nop			@ (mov r8, r8)
 8005696:	46c0      	nop			@ (mov r8, r8)
 8005698:	46c0      	nop			@ (mov r8, r8)
 800569a:	46c0      	nop			@ (mov r8, r8)
 800569c:	46c0      	nop			@ (mov r8, r8)
 800569e:	46c0      	nop			@ (mov r8, r8)

080056a0 <pxCurrentTCBConst2>:
 80056a0:	20000758 	.word	0x20000758
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80056a4:	46c0      	nop			@ (mov r8, r8)
 80056a6:	46c0      	nop			@ (mov r8, r8)

080056a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80056ac:	4b0e      	ldr	r3, [pc, #56]	@ (80056e8 <xPortStartScheduler+0x40>)
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	4b0d      	ldr	r3, [pc, #52]	@ (80056e8 <xPortStartScheduler+0x40>)
 80056b2:	21ff      	movs	r1, #255	@ 0xff
 80056b4:	0409      	lsls	r1, r1, #16
 80056b6:	430a      	orrs	r2, r1
 80056b8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80056ba:	4b0b      	ldr	r3, [pc, #44]	@ (80056e8 <xPortStartScheduler+0x40>)
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	4b0a      	ldr	r3, [pc, #40]	@ (80056e8 <xPortStartScheduler+0x40>)
 80056c0:	21ff      	movs	r1, #255	@ 0xff
 80056c2:	0609      	lsls	r1, r1, #24
 80056c4:	430a      	orrs	r2, r1
 80056c6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80056c8:	f000 f898 	bl	80057fc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80056cc:	4b07      	ldr	r3, [pc, #28]	@ (80056ec <xPortStartScheduler+0x44>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80056d2:	f7ff ffcd 	bl	8005670 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80056d6:	f7ff f89f 	bl	8004818 <vTaskSwitchContext>
	prvTaskExitError();
 80056da:	f7ff ffa7 	bl	800562c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	0018      	movs	r0, r3
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	46c0      	nop			@ (mov r8, r8)
 80056e8:	e000ed20 	.word	0xe000ed20
 80056ec:	20000018 	.word	0x20000018

080056f0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80056f4:	4b05      	ldr	r3, [pc, #20]	@ (800570c <vPortYield+0x1c>)
 80056f6:	2280      	movs	r2, #128	@ 0x80
 80056f8:	0552      	lsls	r2, r2, #21
 80056fa:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80056fc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005700:	f3bf 8f6f 	isb	sy
}
 8005704:	46c0      	nop			@ (mov r8, r8)
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	46c0      	nop			@ (mov r8, r8)
 800570c:	e000ed04 	.word	0xe000ed04

08005710 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005710:	b580      	push	{r7, lr}
 8005712:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8005714:	b672      	cpsid	i
    uxCriticalNesting++;
 8005716:	4b06      	ldr	r3, [pc, #24]	@ (8005730 <vPortEnterCritical+0x20>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	4b04      	ldr	r3, [pc, #16]	@ (8005730 <vPortEnterCritical+0x20>)
 800571e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8005720:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005724:	f3bf 8f6f 	isb	sy
}
 8005728:	46c0      	nop			@ (mov r8, r8)
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	46c0      	nop			@ (mov r8, r8)
 8005730:	20000018 	.word	0x20000018

08005734 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005734:	b580      	push	{r7, lr}
 8005736:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005738:	4b09      	ldr	r3, [pc, #36]	@ (8005760 <vPortExitCritical+0x2c>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d102      	bne.n	8005746 <vPortExitCritical+0x12>
 8005740:	b672      	cpsid	i
 8005742:	46c0      	nop			@ (mov r8, r8)
 8005744:	e7fd      	b.n	8005742 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8005746:	4b06      	ldr	r3, [pc, #24]	@ (8005760 <vPortExitCritical+0x2c>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	1e5a      	subs	r2, r3, #1
 800574c:	4b04      	ldr	r3, [pc, #16]	@ (8005760 <vPortExitCritical+0x2c>)
 800574e:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8005750:	4b03      	ldr	r3, [pc, #12]	@ (8005760 <vPortExitCritical+0x2c>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d100      	bne.n	800575a <vPortExitCritical+0x26>
    {
        portENABLE_INTERRUPTS();
 8005758:	b662      	cpsie	i
    }
}
 800575a:	46c0      	nop			@ (mov r8, r8)
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	20000018 	.word	0x20000018

08005764 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8005764:	f3ef 8010 	mrs	r0, PRIMASK
 8005768:	b672      	cpsid	i
 800576a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800576c:	46c0      	nop			@ (mov r8, r8)
 800576e:	0018      	movs	r0, r3

08005770 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8005770:	f380 8810 	msr	PRIMASK, r0
 8005774:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8005776:	46c0      	nop			@ (mov r8, r8)
	...

08005780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005780:	f3ef 8009 	mrs	r0, PSP
 8005784:	4b0e      	ldr	r3, [pc, #56]	@ (80057c0 <pxCurrentTCBConst>)
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	3820      	subs	r0, #32
 800578a:	6010      	str	r0, [r2, #0]
 800578c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800578e:	4644      	mov	r4, r8
 8005790:	464d      	mov	r5, r9
 8005792:	4656      	mov	r6, sl
 8005794:	465f      	mov	r7, fp
 8005796:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005798:	b508      	push	{r3, lr}
 800579a:	b672      	cpsid	i
 800579c:	f7ff f83c 	bl	8004818 <vTaskSwitchContext>
 80057a0:	b662      	cpsie	i
 80057a2:	bc0c      	pop	{r2, r3}
 80057a4:	6811      	ldr	r1, [r2, #0]
 80057a6:	6808      	ldr	r0, [r1, #0]
 80057a8:	3010      	adds	r0, #16
 80057aa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80057ac:	46a0      	mov	r8, r4
 80057ae:	46a9      	mov	r9, r5
 80057b0:	46b2      	mov	sl, r6
 80057b2:	46bb      	mov	fp, r7
 80057b4:	f380 8809 	msr	PSP, r0
 80057b8:	3820      	subs	r0, #32
 80057ba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80057bc:	4718      	bx	r3
 80057be:	46c0      	nop			@ (mov r8, r8)

080057c0 <pxCurrentTCBConst>:
 80057c0:	20000758 	.word	0x20000758
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80057c4:	46c0      	nop			@ (mov r8, r8)
 80057c6:	46c0      	nop			@ (mov r8, r8)

080057c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80057ce:	f7ff ffc9 	bl	8005764 <ulSetInterruptMaskFromISR>
 80057d2:	0003      	movs	r3, r0
 80057d4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80057d6:	f7fe ff69 	bl	80046ac <xTaskIncrementTick>
 80057da:	1e03      	subs	r3, r0, #0
 80057dc:	d003      	beq.n	80057e6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80057de:	4b06      	ldr	r3, [pc, #24]	@ (80057f8 <xPortSysTickHandler+0x30>)
 80057e0:	2280      	movs	r2, #128	@ 0x80
 80057e2:	0552      	lsls	r2, r2, #21
 80057e4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	0018      	movs	r0, r3
 80057ea:	f7ff ffc1 	bl	8005770 <vClearInterruptMaskFromISR>
}
 80057ee:	46c0      	nop			@ (mov r8, r8)
 80057f0:	46bd      	mov	sp, r7
 80057f2:	b002      	add	sp, #8
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	46c0      	nop			@ (mov r8, r8)
 80057f8:	e000ed04 	.word	0xe000ed04

080057fc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8005800:	4b0b      	ldr	r3, [pc, #44]	@ (8005830 <prvSetupTimerInterrupt+0x34>)
 8005802:	2200      	movs	r2, #0
 8005804:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8005806:	4b0b      	ldr	r3, [pc, #44]	@ (8005834 <prvSetupTimerInterrupt+0x38>)
 8005808:	2200      	movs	r2, #0
 800580a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800580c:	4b0a      	ldr	r3, [pc, #40]	@ (8005838 <prvSetupTimerInterrupt+0x3c>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	22fa      	movs	r2, #250	@ 0xfa
 8005812:	0091      	lsls	r1, r2, #2
 8005814:	0018      	movs	r0, r3
 8005816:	f7fa fc77 	bl	8000108 <__udivsi3>
 800581a:	0003      	movs	r3, r0
 800581c:	001a      	movs	r2, r3
 800581e:	4b07      	ldr	r3, [pc, #28]	@ (800583c <prvSetupTimerInterrupt+0x40>)
 8005820:	3a01      	subs	r2, #1
 8005822:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8005824:	4b02      	ldr	r3, [pc, #8]	@ (8005830 <prvSetupTimerInterrupt+0x34>)
 8005826:	2207      	movs	r2, #7
 8005828:	601a      	str	r2, [r3, #0]
}
 800582a:	46c0      	nop			@ (mov r8, r8)
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	e000e010 	.word	0xe000e010
 8005834:	e000e018 	.word	0xe000e018
 8005838:	20000000 	.word	0x20000000
 800583c:	e000e014 	.word	0xe000e014

08005840 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b086      	sub	sp, #24
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005848:	2300      	movs	r3, #0
 800584a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800584c:	f7fe fe88 	bl	8004560 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005850:	4b4a      	ldr	r3, [pc, #296]	@ (800597c <pvPortMalloc+0x13c>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d101      	bne.n	800585c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005858:	f000 f8e4 	bl	8005a24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800585c:	4b48      	ldr	r3, [pc, #288]	@ (8005980 <pvPortMalloc+0x140>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	4013      	ands	r3, r2
 8005864:	d000      	beq.n	8005868 <pvPortMalloc+0x28>
 8005866:	e07b      	b.n	8005960 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d013      	beq.n	8005896 <pvPortMalloc+0x56>
			{
				xWantedSize += xHeapStructSize;
 800586e:	2208      	movs	r2, #8
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	189b      	adds	r3, r3, r2
 8005874:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2207      	movs	r2, #7
 800587a:	4013      	ands	r3, r2
 800587c:	d00b      	beq.n	8005896 <pvPortMalloc+0x56>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2207      	movs	r2, #7
 8005882:	4393      	bics	r3, r2
 8005884:	3308      	adds	r3, #8
 8005886:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2207      	movs	r2, #7
 800588c:	4013      	ands	r3, r2
 800588e:	d002      	beq.n	8005896 <pvPortMalloc+0x56>
 8005890:	b672      	cpsid	i
 8005892:	46c0      	nop			@ (mov r8, r8)
 8005894:	e7fd      	b.n	8005892 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d061      	beq.n	8005960 <pvPortMalloc+0x120>
 800589c:	4b39      	ldr	r3, [pc, #228]	@ (8005984 <pvPortMalloc+0x144>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d85c      	bhi.n	8005960 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80058a6:	4b38      	ldr	r3, [pc, #224]	@ (8005988 <pvPortMalloc+0x148>)
 80058a8:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80058aa:	4b37      	ldr	r3, [pc, #220]	@ (8005988 <pvPortMalloc+0x148>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058b0:	e004      	b.n	80058bc <pvPortMalloc+0x7c>
				{
					pxPreviousBlock = pxBlock;
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d903      	bls.n	80058ce <pvPortMalloc+0x8e>
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1f1      	bne.n	80058b2 <pvPortMalloc+0x72>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80058ce:	4b2b      	ldr	r3, [pc, #172]	@ (800597c <pvPortMalloc+0x13c>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	697a      	ldr	r2, [r7, #20]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d043      	beq.n	8005960 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2208      	movs	r2, #8
 80058de:	189b      	adds	r3, r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	685a      	ldr	r2, [r3, #4]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	1ad2      	subs	r2, r2, r3
 80058f2:	2308      	movs	r3, #8
 80058f4:	005b      	lsls	r3, r3, #1
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d917      	bls.n	800592a <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	18d3      	adds	r3, r2, r3
 8005900:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	2207      	movs	r2, #7
 8005906:	4013      	ands	r3, r2
 8005908:	d002      	beq.n	8005910 <pvPortMalloc+0xd0>
 800590a:	b672      	cpsid	i
 800590c:	46c0      	nop			@ (mov r8, r8)
 800590e:	e7fd      	b.n	800590c <pvPortMalloc+0xcc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	1ad2      	subs	r2, r2, r3
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	0018      	movs	r0, r3
 8005926:	f000 f8dd 	bl	8005ae4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800592a:	4b16      	ldr	r3, [pc, #88]	@ (8005984 <pvPortMalloc+0x144>)
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	1ad2      	subs	r2, r2, r3
 8005934:	4b13      	ldr	r3, [pc, #76]	@ (8005984 <pvPortMalloc+0x144>)
 8005936:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005938:	4b12      	ldr	r3, [pc, #72]	@ (8005984 <pvPortMalloc+0x144>)
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	4b13      	ldr	r3, [pc, #76]	@ (800598c <pvPortMalloc+0x14c>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	429a      	cmp	r2, r3
 8005942:	d203      	bcs.n	800594c <pvPortMalloc+0x10c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005944:	4b0f      	ldr	r3, [pc, #60]	@ (8005984 <pvPortMalloc+0x144>)
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	4b10      	ldr	r3, [pc, #64]	@ (800598c <pvPortMalloc+0x14c>)
 800594a:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	685a      	ldr	r2, [r3, #4]
 8005950:	4b0b      	ldr	r3, [pc, #44]	@ (8005980 <pvPortMalloc+0x140>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	431a      	orrs	r2, r3
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	2200      	movs	r2, #0
 800595e:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005960:	f7fe fe0a 	bl	8004578 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2207      	movs	r2, #7
 8005968:	4013      	ands	r3, r2
 800596a:	d002      	beq.n	8005972 <pvPortMalloc+0x132>
 800596c:	b672      	cpsid	i
 800596e:	46c0      	nop			@ (mov r8, r8)
 8005970:	e7fd      	b.n	800596e <pvPortMalloc+0x12e>
	return pvReturn;
 8005972:	68fb      	ldr	r3, [r7, #12]
}
 8005974:	0018      	movs	r0, r3
 8005976:	46bd      	mov	sp, r7
 8005978:	b006      	add	sp, #24
 800597a:	bd80      	pop	{r7, pc}
 800597c:	2000198c 	.word	0x2000198c
 8005980:	20001998 	.word	0x20001998
 8005984:	20001990 	.word	0x20001990
 8005988:	20001984 	.word	0x20001984
 800598c:	20001994 	.word	0x20001994

08005990 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d037      	beq.n	8005a12 <vPortFree+0x82>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80059a2:	2308      	movs	r3, #8
 80059a4:	425b      	negs	r3, r3
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	18d3      	adds	r3, r2, r3
 80059aa:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	685a      	ldr	r2, [r3, #4]
 80059b4:	4b19      	ldr	r3, [pc, #100]	@ (8005a1c <vPortFree+0x8c>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4013      	ands	r3, r2
 80059ba:	d102      	bne.n	80059c2 <vPortFree+0x32>
 80059bc:	b672      	cpsid	i
 80059be:	46c0      	nop			@ (mov r8, r8)
 80059c0:	e7fd      	b.n	80059be <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d002      	beq.n	80059d0 <vPortFree+0x40>
 80059ca:	b672      	cpsid	i
 80059cc:	46c0      	nop			@ (mov r8, r8)
 80059ce:	e7fd      	b.n	80059cc <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	4b11      	ldr	r3, [pc, #68]	@ (8005a1c <vPortFree+0x8c>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4013      	ands	r3, r2
 80059da:	d01a      	beq.n	8005a12 <vPortFree+0x82>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d116      	bne.n	8005a12 <vPortFree+0x82>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	685a      	ldr	r2, [r3, #4]
 80059e8:	4b0c      	ldr	r3, [pc, #48]	@ (8005a1c <vPortFree+0x8c>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	43db      	mvns	r3, r3
 80059ee:	401a      	ands	r2, r3
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80059f4:	f7fe fdb4 	bl	8004560 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	685a      	ldr	r2, [r3, #4]
 80059fc:	4b08      	ldr	r3, [pc, #32]	@ (8005a20 <vPortFree+0x90>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	18d2      	adds	r2, r2, r3
 8005a02:	4b07      	ldr	r3, [pc, #28]	@ (8005a20 <vPortFree+0x90>)
 8005a04:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	0018      	movs	r0, r3
 8005a0a:	f000 f86b 	bl	8005ae4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005a0e:	f7fe fdb3 	bl	8004578 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005a12:	46c0      	nop			@ (mov r8, r8)
 8005a14:	46bd      	mov	sp, r7
 8005a16:	b004      	add	sp, #16
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	46c0      	nop			@ (mov r8, r8)
 8005a1c:	20001998 	.word	0x20001998
 8005a20:	20001990 	.word	0x20001990

08005a24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a2a:	23c0      	movs	r3, #192	@ 0xc0
 8005a2c:	011b      	lsls	r3, r3, #4
 8005a2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005a30:	4b26      	ldr	r3, [pc, #152]	@ (8005acc <prvHeapInit+0xa8>)
 8005a32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2207      	movs	r2, #7
 8005a38:	4013      	ands	r3, r2
 8005a3a:	d00c      	beq.n	8005a56 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	3307      	adds	r3, #7
 8005a40:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2207      	movs	r2, #7
 8005a46:	4393      	bics	r3, r2
 8005a48:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	1ad2      	subs	r2, r2, r3
 8005a50:	4b1e      	ldr	r3, [pc, #120]	@ (8005acc <prvHeapInit+0xa8>)
 8005a52:	18d3      	adds	r3, r2, r3
 8005a54:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a5a:	4b1d      	ldr	r3, [pc, #116]	@ (8005ad0 <prvHeapInit+0xac>)
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a60:	4b1b      	ldr	r3, [pc, #108]	@ (8005ad0 <prvHeapInit+0xac>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	68ba      	ldr	r2, [r7, #8]
 8005a6a:	18d3      	adds	r3, r2, r3
 8005a6c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005a6e:	2208      	movs	r2, #8
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	1a9b      	subs	r3, r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2207      	movs	r2, #7
 8005a7a:	4393      	bics	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	4b14      	ldr	r3, [pc, #80]	@ (8005ad4 <prvHeapInit+0xb0>)
 8005a82:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8005a84:	4b13      	ldr	r3, [pc, #76]	@ (8005ad4 <prvHeapInit+0xb0>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a8c:	4b11      	ldr	r3, [pc, #68]	@ (8005ad4 <prvHeapInit+0xb0>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2200      	movs	r2, #0
 8005a92:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	1ad2      	subs	r2, r2, r3
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8005ad4 <prvHeapInit+0xb0>)
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	4b0a      	ldr	r3, [pc, #40]	@ (8005ad8 <prvHeapInit+0xb4>)
 8005ab0:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	685a      	ldr	r2, [r3, #4]
 8005ab6:	4b09      	ldr	r3, [pc, #36]	@ (8005adc <prvHeapInit+0xb8>)
 8005ab8:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005aba:	4b09      	ldr	r3, [pc, #36]	@ (8005ae0 <prvHeapInit+0xbc>)
 8005abc:	2280      	movs	r2, #128	@ 0x80
 8005abe:	0612      	lsls	r2, r2, #24
 8005ac0:	601a      	str	r2, [r3, #0]
}
 8005ac2:	46c0      	nop			@ (mov r8, r8)
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	b004      	add	sp, #16
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	46c0      	nop			@ (mov r8, r8)
 8005acc:	20000d84 	.word	0x20000d84
 8005ad0:	20001984 	.word	0x20001984
 8005ad4:	2000198c 	.word	0x2000198c
 8005ad8:	20001994 	.word	0x20001994
 8005adc:	20001990 	.word	0x20001990
 8005ae0:	20001998 	.word	0x20001998

08005ae4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005aec:	4b27      	ldr	r3, [pc, #156]	@ (8005b8c <prvInsertBlockIntoFreeList+0xa8>)
 8005aee:	60fb      	str	r3, [r7, #12]
 8005af0:	e002      	b.n	8005af8 <prvInsertBlockIntoFreeList+0x14>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	60fb      	str	r3, [r7, #12]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d8f7      	bhi.n	8005af2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	68ba      	ldr	r2, [r7, #8]
 8005b0c:	18d3      	adds	r3, r2, r3
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d108      	bne.n	8005b26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	18d2      	adds	r2, r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	18d2      	adds	r2, r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d118      	bne.n	8005b6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	4b14      	ldr	r3, [pc, #80]	@ (8005b90 <prvInsertBlockIntoFreeList+0xac>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d00d      	beq.n	8005b62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685a      	ldr	r2, [r3, #4]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	18d2      	adds	r2, r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	601a      	str	r2, [r3, #0]
 8005b60:	e008      	b.n	8005b74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b62:	4b0b      	ldr	r3, [pc, #44]	@ (8005b90 <prvInsertBlockIntoFreeList+0xac>)
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	601a      	str	r2, [r3, #0]
 8005b6a:	e003      	b.n	8005b74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d002      	beq.n	8005b82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b82:	46c0      	nop			@ (mov r8, r8)
 8005b84:	46bd      	mov	sp, r7
 8005b86:	b004      	add	sp, #16
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	46c0      	nop			@ (mov r8, r8)
 8005b8c:	20001984 	.word	0x20001984
 8005b90:	2000198c 	.word	0x2000198c

08005b94 <memset>:
 8005b94:	0003      	movs	r3, r0
 8005b96:	1882      	adds	r2, r0, r2
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d100      	bne.n	8005b9e <memset+0xa>
 8005b9c:	4770      	bx	lr
 8005b9e:	7019      	strb	r1, [r3, #0]
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	e7f9      	b.n	8005b98 <memset+0x4>

08005ba4 <__libc_init_array>:
 8005ba4:	b570      	push	{r4, r5, r6, lr}
 8005ba6:	2600      	movs	r6, #0
 8005ba8:	4c0c      	ldr	r4, [pc, #48]	@ (8005bdc <__libc_init_array+0x38>)
 8005baa:	4d0d      	ldr	r5, [pc, #52]	@ (8005be0 <__libc_init_array+0x3c>)
 8005bac:	1b64      	subs	r4, r4, r5
 8005bae:	10a4      	asrs	r4, r4, #2
 8005bb0:	42a6      	cmp	r6, r4
 8005bb2:	d109      	bne.n	8005bc8 <__libc_init_array+0x24>
 8005bb4:	2600      	movs	r6, #0
 8005bb6:	f000 f823 	bl	8005c00 <_init>
 8005bba:	4c0a      	ldr	r4, [pc, #40]	@ (8005be4 <__libc_init_array+0x40>)
 8005bbc:	4d0a      	ldr	r5, [pc, #40]	@ (8005be8 <__libc_init_array+0x44>)
 8005bbe:	1b64      	subs	r4, r4, r5
 8005bc0:	10a4      	asrs	r4, r4, #2
 8005bc2:	42a6      	cmp	r6, r4
 8005bc4:	d105      	bne.n	8005bd2 <__libc_init_array+0x2e>
 8005bc6:	bd70      	pop	{r4, r5, r6, pc}
 8005bc8:	00b3      	lsls	r3, r6, #2
 8005bca:	58eb      	ldr	r3, [r5, r3]
 8005bcc:	4798      	blx	r3
 8005bce:	3601      	adds	r6, #1
 8005bd0:	e7ee      	b.n	8005bb0 <__libc_init_array+0xc>
 8005bd2:	00b3      	lsls	r3, r6, #2
 8005bd4:	58eb      	ldr	r3, [r5, r3]
 8005bd6:	4798      	blx	r3
 8005bd8:	3601      	adds	r6, #1
 8005bda:	e7f2      	b.n	8005bc2 <__libc_init_array+0x1e>
 8005bdc:	08005d28 	.word	0x08005d28
 8005be0:	08005d28 	.word	0x08005d28
 8005be4:	08005d2c 	.word	0x08005d2c
 8005be8:	08005d28 	.word	0x08005d28

08005bec <memcpy>:
 8005bec:	2300      	movs	r3, #0
 8005bee:	b510      	push	{r4, lr}
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d100      	bne.n	8005bf6 <memcpy+0xa>
 8005bf4:	bd10      	pop	{r4, pc}
 8005bf6:	5ccc      	ldrb	r4, [r1, r3]
 8005bf8:	54c4      	strb	r4, [r0, r3]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	e7f8      	b.n	8005bf0 <memcpy+0x4>
	...

08005c00 <_init>:
 8005c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c02:	46c0      	nop			@ (mov r8, r8)
 8005c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c06:	bc08      	pop	{r3}
 8005c08:	469e      	mov	lr, r3
 8005c0a:	4770      	bx	lr

08005c0c <_fini>:
 8005c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c0e:	46c0      	nop			@ (mov r8, r8)
 8005c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c12:	bc08      	pop	{r3}
 8005c14:	469e      	mov	lr, r3
 8005c16:	4770      	bx	lr

Disassembly of section mysection:

08005c18 <timerHandler>:
.global timerHandler
.type timerHandler, "function"

timerHandler:
	# r0-r3, r0 return
	LDR R0, =0x48000014	// ODR for GPIOA
 8005c18:	4805      	ldr	r0, [pc, #20]	@ (8005c30 <timerHandler+0x18>)
	LDR R1, [R0]
 8005c1a:	6801      	ldr	r1, [r0, #0]
	MOVS R2, #1
 8005c1c:	2201      	movs	r2, #1
	LSLS R2, #5
 8005c1e:	0152      	lsls	r2, r2, #5
	EORS R1, R2
 8005c20:	4051      	eors	r1, r2
	STR R1, [R0]
 8005c22:	6001      	str	r1, [r0, #0]

	LDR R0, =0x40000410	// SR for TIM3
 8005c24:	4803      	ldr	r0, [pc, #12]	@ (8005c34 <timerHandler+0x1c>)
	LDR R1, [R0]
 8005c26:	6801      	ldr	r1, [r0, #0]
	MOVS R2, #1
 8005c28:	2201      	movs	r2, #1
	BICS R1, R1, R2
 8005c2a:	4391      	bics	r1, r2
	STR R1, [R0]
 8005c2c:	6001      	str	r1, [r0, #0]
	BX LR
 8005c2e:	4770      	bx	lr
	LDR R0, =0x48000014	// ODR for GPIOA
 8005c30:	48000014 	.word	0x48000014
	LDR R0, =0x40000410	// SR for TIM3
 8005c34:	40000410 	.word	0x40000410
